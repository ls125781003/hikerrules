海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@蓝奏下载资源beta@eyJsYXN0X2NoYXB0ZXJfcnVsZSI6IiIsInRpdGxlIjoi6JOd5aWP5LiL6L296LWE5rqQYmV0YSIsImF1dGhvciI6IvCfkI8mJuWwj+WImCIsInVybCI6Imhpa2VyOi8vZW1wdHkjI2Z5cGFnZSIsInZlcnNpb24iOjIwMjMxMTA3MDEsImNvbF90eXBlIjoibW92aWVfMyIsImNsYXNzX25hbWUiOiIiLCJ0eXBlIjoib3RoZXIiLCJjbGFzc191cmwiOiIiLCJhcmVhX25hbWUiOiIiLCJhcmVhX3VybCI6IiIsInNvcnRfbmFtZSI6IiIsInllYXJfbmFtZSI6IiIsInNvcnRfdXJsIjoiIiwieWVhcl91cmwiOiIiLCJmaW5kX3J1bGUiOiJqczpcblxuZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9jbGFzc2ljSGVhZGVyJykpLnJ1bGUpXG5ldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3llbWlhbicpKS5ydWxlKSIsInNlYXJjaF91cmwiOiIiLCJncm91cCI6IuKRo+W3peWFtyIsInNlYXJjaEZpbmQiOiJqczpcbnZhciBkID0gW107XG52YXIgaHRtbCA9IGdldFJlc0NvZGUoKTtcbnZhciBsaXN0ID0gcGRmYShodG1sLCAnYm9keSYmLnJlc3VsdCYmLmxhbnpvdS1pdGVtJyk7XG5mb3IgKHZhciBqIGluIGxpc3QpIHtcbiAgICBkLnB1c2goe1xuICAgICAgICB0aXRsZTogcGRmaChsaXN0W2pdLCAnLmxhbnpvdS1pdGVtLXJpZ2h0LXRpdGxlJiZUZXh0JyksXG4gICAgICAgIGRlc2M6IHBkZmgobGlzdFtqXSwgJy50ZXh0LW11dGVkJiZUZXh0JyksXG4gICAgICAgIGNvbnRlbnQ6IHBkZmgobGlzdFtqXSwgJy50ZXh0LW11dGVkLDEmJlRleHQnKSxcbiAgICAgICAgdXJsOiAkKHBkKGxpc3Rbal0sICdhJiZocmVmJykpLnJ1bGUoKCkgPT4ge1xuICAgICAgICAgICAgdmFyIGQgPSBbXTtcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbGF6eScpKS5ydWxlKVxuICAgICAgICAgICAgdmFyIGh0bWwgPSBnZXRSZXNDb2RlKCk7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IHBkZmEoaHRtbCwgJ2JvZHkmJi51cmxfYWRyZWVzcycpO1xuICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCI8c21hbGw+5pCc57Si5YaF5a655p2l6Ieq6JOd5buL572R6aG154mI44CCXFxu6Iul5omT5LiN5byA6ZO+5o6l5oiW6ICF5o+Q56S65YiG5Lqr5bey5Y+W5raI77yM6K+35bCd6K+V5YW25LuW55qE5Zyw5Z2APC9zbWFsbD5cIlxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBsaXN0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIFVSTCA9IHBkKGxpc3Rbal0sICdhJiZocmVmJylcbiAgICAgICAgICAgICAgICBpZiAoVVJMLmluZGV4T2YoXCJjb20vdHAvXCIpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBVUkwgPSBVUkwucmVwbGFjZShcImNvbS9cIiwgXCJjb20vdHAvXCIpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi8J+UlyAg5Zyw5Z2AXCIgKyBqLCAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBVUkwgKyBsYXp5LFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXCJhdmF0YXJcIixcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0UmVzdWx0KGQpXG4gICAgICAgIH0pXG4gICAgfSk7XG59XG5zZXRSZXN1bHQoZCkiLCJkZXRhaWxfY29sX3R5cGUiOiJtb3ZpZV8xIiwiZGV0YWlsX2ZpbmRfcnVsZSI6IiIsInNkZXRhaWxfY29sX3R5cGUiOiJyaWNoX3RleHQiLCJzZGV0YWlsX2ZpbmRfcnVsZSI6IiIsInVhIjoibW9iaWxlIiwicHJlUnVsZSI6IiIsInBhZ2VzIjoiW3tcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLmlbDmja5cIixcInBhdGhcIjpcInNodWp1XCIsXCJydWxlXCI6XCJ2YXIgdGFicyA9IHtcXG4gICAgXFxcImRhdGFcXFwiOiBbXFxuLy/ova/ku7ZcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBcXFwiZ3JvdXBcXFwiOiBcXFwi6L2v5Lu2XFxcIixcXG4gICAgICAgICAgICBcXFwib3B0aW9uc1xcXCI6IFt7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlsI/mo4noooTova/ku7bns7vliJdcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL2hhaWt1by5sYW56b3VtLmNvbS91L0dvbGRSaXZlclxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCIvL+imgeacieWvhueggeWhq3B3ZOi/mVxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLphbflrolBUFBb5a6J5Y2T54mIXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYydXpxMmJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuW9seinhui9r+S7tkFQUFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYyeDRzeWhcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuaLjeeFp+aRhOW9seiuvuiuoUFQUFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxY3p5amNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiQURHVUFSRFvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjE5NDIwaFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJBZGd1YXJkW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3l4c3NwLmxhbnpvdW0uY29tL2I2MjA2NTJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCIyMzQ4XFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuezu+e7n+i+heWKqUFQUFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxOTQ0b2RcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiRVPmlofku7bmtY/op4jlmahcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmMWQ3czJoXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIk1U566h55CG5ZmoQVBQW+WumOeJiF1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL2Jpbm10LmxhbnpvdW0uY29tL2IwMWJpdmt6Y1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlroflrpnlt6XlhbfnrrFb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8veXhzc3AubGFuem91bS5jb20vYjA2aHpvZDZoXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiYnE4dVxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlpYflppnmkJzntKJb5a6J5Y2T5a6Y54mIXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vbWFnaWNhbHN0b3J5LmxhbnpvdW0uY29tL3MvbWFnaWNhbHNlYXJjaFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5aWH5aaZ5bqU55SoW+WuieWNk+WumOeJiF1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL21hZ2ljYWxzdG9yeS5sYW56b3VtLmNvbS9zL21hZ2ljYWxhcHBcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuezu+e7n+a/gOa0u+W3peWFt1tXaW5kb3dzXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxdDlsMGJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgXVxcbiAgICAgICAgfSxcXG4vL+W4uOeUqOW3peWFt1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJncm91cFxcXCI6IFxcXCLluLjnlKjlt6XlhbdcXFwiLFxcbiAgICAgICAgICAgIFxcXCJvcHRpb25zXFxcIjogW3tcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIkJU5LiL6L295bel5YW3W1BDXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxYXdncWJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiSURNW1BDXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGY1NHg5c2ZcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiMWRtK1vlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly95eHNzcC5sYW56b3VtLmNvbS9iNDc4ODY2XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiY2FqZFxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJBZG0gUHJvW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3l4c3NwLmxhbnpvdW0uY29tL2I1OTExODdcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCI5enpzXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIldJRknkuIfog73pkqXljJlb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxZjF0NWNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiQ2ltb2Nb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vaGFsZXlkdS5sYW56b3VxLmNvbS9iMGRzM3Y4NGRcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCIxMjM0XFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuefpeS5jkFQUFvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjJsa2FmZVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlvq7ljZpBUFBb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxZ25iM2FcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5oqW6Z+zQVBQW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmMTk5YTVhXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuaymeebmFtQQ11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmMWFqemVmXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIldQU1vlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjE5N3NrYlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiV1BTW1dpbmRvd3NdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjJxbDNiZVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi6Kej5Y6L57yp6L2v5Lu26ZuGW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmMWJndmplXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIkFJY2hhdOegtOino+mbhlvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjU0dW16Y1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJPZmZpY2VTdWl0ZVvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjE5OWtyY1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJWTU9TIFByb1vlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly95eHNzcC5sYW56b3VtLmNvbS9iMDZoZGw5ZmNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCI3ZHBrXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIlNE5aWz5L2jW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3l4c3NwLmxhbnpvdW0uY29tL2IzNTYwNTdcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJhdWd0XFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIkNDbGVhbmVyIFByb1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8veXhzc3AubGFuem91bS5jb20vYjM2MTU0M1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcImE0ZWdcXFwiXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgXVxcbiAgICAgICAgfSxcXG4vL+mYheivu1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJncm91cFxcXCI6IFxcXCLpmIXor7tcXFwiLFxcbiAgICAgICAgICAgIFxcXCJvcHRpb25zXFxcIjogW3tcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIumYheivuzMuMOa1i+ivleeJiCjlhbHlrZjljIUpXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9sczEyNTc4MTAwMy5sYW56b3VtLmNvbS9iMDY4NmZ2NGJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJmYTA5XFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIumYheivuzMuMOa1i+ivleeJiFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vbHMxMjU3ODEwMDMubGFuem91bS5jb20vYjA2ODc2ZmNmXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiYjVudlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLpmIXor7szLjDkuYzkupHmm7/mjaLlh4DljJZcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3d3aS5sYW56b3VtLmNvbS9iMGJ3OGp3b2hcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi6ZiF6K+7My4w5LiA56iL5rqQXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly95LWMubGFuem91bS5jb20vYjAwcjFrbzBkXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwic3lkeVxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLpmIXor7szLjDkuabmupBcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL2xzMTI1NzgxMDAzLmxhbnpvdW0uY29tL2IwNjZnYXplZFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIjh1MTVcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi6ZiF6K+7My4w5YWz6ICz5rqQXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly93d2EubGFuem91bS5jb20vYjA1ZnM1Y2NkXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiZ3VhbmVyXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIumYheivuzMuMFRob21hc+WWsua6kFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vd3dyLmxhbnpvdW0uY29tL2IwM3A5ZnRwY1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcInJlYWRcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi6Z2Z6K+75aSp5LiL5LiT5Lia54mIW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3l4c3NwLmxhbnpvdW0uY29tL2IwcTR1bmliXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiNW0xM1xcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJGdWxsUmVhZGVyW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3l4c3NwLmxhbnpvdW0uY29tL2I3MDk5NzNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCIyOXB5XFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIueUteWtkOmYheivu+W6lOeUqFvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjFjZHI5aVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBdXFxuICAgICAgICB9LFxcbi8v6Z+z5LmQXFxuICAgICAgICB7XFxuICAgICAgICAgICAgXFxcImdyb3VwXFxcIjogXFxcIumfs+S5kFxcXCIsXFxuICAgICAgICAgICAgXFxcIm9wdGlvbnNcXFwiOiBbe1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5ZCs5LiL6Z+z5LmQW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL2JnZy5sYW56b3VtLmNvbS9iMDJiamo4cGFcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5oKm6Z+zW+WuieWNk13lgZzmraLmm7TmlrBcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3d3ci5sYW56b3VtLmNvbS9iMDJpZTNwMGRcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi6a2U6Z+zW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3d3dS5sYW56b3VtLmNvbS9iMDBwMTJ4bGlcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCIzbGR4XFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIumtlOmfs1tQQ11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3d3dS5sYW56b3VtLmNvbS9iMDBveWx5dGlcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJkMjJsXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIua0m+mbqumfs+S5kOWKqeaJi1vlhajlubPlj7BdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9sczEyNTc4MTAwMy5sYW56b3VtLmNvbS9iMDY4OXFyOWdcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJpNG5lXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIkxJU1RFTjFb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8veXVqaWFuZ3FhcS5sYW56b3VtLmNvbS9iMDEwNHE4OWVcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJsaXN0ZW4xXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIkZseU11c2ljW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL2RtbGEubGFuem91bS5jb20vYjA1bmIxZThkXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuafoOS5kOmfs+S5kFvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9kbWxhLmxhbnpvdW0uY29tL2IwNXBoN25vaFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlhajmsJHpn7PkuZBb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vd3d3LmxhbnpvdW0uY29tL2IwaTR5dWFiXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIumfs+S5kOaXtuWIu1vlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9wYW4ubGFuem91bS5jb20vYjBhaWt1d2doXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIui2o+WQrOmfs+S5kFvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly93d3oubGFuem91bS5jb20vcy9xbGlzdGVuMVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmn5DmiJHpn7PkuZBb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYzbm02cmNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5LqU6Z+z5Yqp5omLW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3Nvc28ubGFuem91bS5jb20vYjAwbmJ5dHFqXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIF1cXG4gICAgICAgIH0sXFxuLy/lkKzkuaZcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBcXFwiZ3JvdXBcXFwiOiBcXFwi5ZCs5LmmXFxcIixcXG4gICAgICAgICAgICBcXFwib3B0aW9uc1xcXCI6IFt7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmiJHnmoTlkKzkuaZBUFBb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vd3dpLmxhbnpvdW0uY29tL2IwNWcxYndmXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmmIrmmIrlkKzkuaZBUFBb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vd3dtLmxhbnpvdW0uY29tL3MvaGh0c1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlsI/lkKzkuaZBUFBb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vYXBwYnJvd3NlLmxhbnpvdW0uY29tL2IwN2xwdXI1Z1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5p+g5qqs5ZCs5LmmW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3hpYW96YW8ubGFuem91bS5jb20vYjA0ZDc5azdnXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIumjnum4n+WQrOS5plvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9wYW4ubGFuem91bS5jb20vcy9mZWlhYmNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgXVxcbiAgICAgICAgfSxcXG5cXG4vL+aSreaUvuWZqFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJncm91cFxcXCI6IFxcXCLmkq3mlL7lmahcXFwiLFxcbiAgICAgICAgICAgIFxcXCJvcHRpb25zXFxcIjogW3tcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIk1YIHBsYXllclvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjE5ZW8zY1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJSRUVYW+WuieWNk10o5a+G56CBcWF6dylcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3d3dS5sYW56b3VtLmNvbS9iMDFucDE2NWNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiTVhfUGxheWVyW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3l4c3NwLmxhbnpvdW0uY29tL2IzMzE0OTRcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJhbzVtXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIk9QbGF5ZXJb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8veXhzc3AubGFuem91bS5jb20vYjUzNzQxNFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcImNnNDFcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiWFBsYXllclvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly95eHNzcC5sYW56b3VtLmNvbS9iNjI5NzI4XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiZ2pqZVxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJLTVBsYXllciBQcm9b5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8veXhzc3AubGFuem91bS5jb20vYjU1MDc4OVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcImR3cXFcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5pKt5pS+5Zmo5a6J5Y2T6ZuGXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjFndnlxalxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmkq3mlL7lmah3aW5QQ+mbhlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxazU5cWhcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiQuermUFQUFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxZ2tzbmVcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiQuermSjlronljZNMU1BhdGNoL1hQYXRjaOeJiClcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3d3ZS5sYW56b3VtLmNvbS9iMDE1bGw0c2JcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCIyMzMzXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIue9keaYk+S6kemfs+S5kFvlronljZNd5YaF572u5qih5Z2X54mIXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly93d3UubGFuem91bS5jb20vYjBjcmtoeXpnXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiM3F2d1xcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLnvZHmmJPkupHpn7PkuZBBUFBcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmM3FkamZjXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuayueeuoUFQUFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYybGtyYWJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiWW91VHViZSBWYW5jZWRb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8veXhzc3AubGFuem91bS5jb20vYjA2aDBvM2doXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiNGtxM1xcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLnuq/nuq/nnIvnlapb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vbHMxMjU3ODEwMDMubGFuem91bS5jb20vYjA2N2VzaHppXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiNmlxYlxcXCJcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBdXFxuICAgICAgICB9LFxcbiAvL+a1j+iniOWZqFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJncm91cFxcXCI6IFxcXCLmtY/op4jlmahcXFwiLFxcbiAgICAgICAgICAgIFxcXCJvcHRpb25zXFxcIjogW1xcbiAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmtY/op4jlmahBUFDlkIjpm4bikaBcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL2NvamUtaGUubGFuem91bS5jb20vYjAwemR3cXFkXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIua1j+iniOWZqEFQUOWQiOmbhuKRoVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYyNHU0ZGVcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiV2ViS2l05rWP6KeI5ZmoQVBQXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly80MjNkb3duLmxhbnpvdW0uY29tL2IwZjJyMGFvalxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJNL+Wcn+eLly/ogZrmkJzmtY/op4jlmahb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vbW9zaGFuZ2luZy5sYW56b3VtLmNvbS9iMDFoeHJuMGhcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJtb21vXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIk3mtY/op4jlmagzLjBb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vd3dpLmxhbnpvdW0uY29tL3MvbWJyb3dzZXJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0sXFxuXFxuICAgICAgICAgICAgXVxcbiAgICAgICAgfSxcXG5cXG4vL+W3peWFt+mbhlxcbiAgICAgICAge1xcbiAgICAgICAgICAgIFxcXCJncm91cFxcXCI6IFxcXCLlt6XlhbfmnYLpm4ZcXFwiLFxcbiAgICAgICAgICAgIFxcXCJvcHRpb25zXFxcIjogW1xcbiAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLomZrmi5/mnLrkuI7moYbmnrbova/ku7bpm4Zb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vNDIzZG93bi5sYW56b3VtLmNvbS9iMGYxZm5zN2FcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi6L2v5Lu26ZuGXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9sczEyNTc4MTAwMy5sYW56b3VtLmNvbS9iMDY1bGNsOGpcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInB3ZFxcXCI6IFxcXCJmdjJ0XFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIlNvbmljZVBsdXNb5a6J5Y2TXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vc29uaWNlLmxhbnpvdW0uY29tL2IwMThmNGVoYVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcImJ6YXdcXFwiXFxuICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi572R55uYQVBQ6ZuGW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmMWZsMzhqXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIue9keebmOW6lOeUqOmbhltQQ11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmMTlpbWFiXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIlRW6ZuGW+WuieWNk11cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovLzQyM2Rvd24ubGFuem91bS5jb20vYjBmMTk0NGFqXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIlRWYm945a6J6KOF5YyF6ZuGW+WuieWNk+aQrOi/kF1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL2xzMTI1NzgxMDAzLmxhbnpvdW0uY29tL2IwNjZjOGJ3YlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIjA3MDhcXFwiXFxuICAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuWQvueIseacieS4ieaXpeaciOS4juWNv1/ova/ku7bpm4ZcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInVybFxcXCI6IFxcXCJodHRwczovL3d1YWl5b3VzYW4ubGFuem91bS5jb20vYjAydW53dmVkXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiXFxcIlxcbiAgICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlkL7niLHmnInkuInml6XmnIjkuI7ljb9f5pys5Zyw5o6l5Y+j5YyFXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly93dWFpeW91c2FuLmxhbnpvdW0uY29tL2IwMnY3Mmk0ZlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIlxcXCJcXG4gICAgICAgICAgICAgICAgIH0se1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5pif5LqR5pel6K6wX+acrOWcsOaOpeWPo+WMhVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vd3djLmxhbnpvdW0uY29tL2IwZXJ4NjhnZlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcIjRlOTNcXFwiXFxuICAgICAgICAgICAgICAgICB9LHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJuYW1lXFxcIjogXFxcImdrZFvlronljZNdXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBcXFwiaHR0cHM6Ly9saXNvbmdlLmxhbnpvdW0uY29tL2IwNmUxem9lZlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwicHdkXFxcIjogXFxcImdrZFxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmtbfpmJTop4bnlYzluLjop4TmupDlkIjpm4Zb5LiL6L296Kej5Y6L5ZCO6YCQ5Liq5a+85YWlXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vbHMxMjU3ODEwMDMubGFuem91bS5jb20vYjA2ODk4OHFiXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiODA4YlxcXCJcXG4gICAgICAgICAgICAgICAgfSx7XFxuICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmtbfpmJTop4bnlYzmm7TmlrDmupBb5LiL6L295a+85YWlXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwidXJsXFxcIjogXFxcImh0dHBzOi8vbHMxMjU3ODEwMDMubGFuem91bS5jb20vYjA2N3U5cHFqXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwd2RcXFwiOiBcXFwiZTd6NlxcXCJcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBdXFxuICAgICAgICB9XFxuLy/pmpTmlq1cXG4gICAgXVxcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuiOt+WPluWktOmDqFwiLFwicGF0aFwiOlwiY2xhc3NpY0hlYWRlclwiLFwicnVsZVwiOlwidmFyIGQgPSBbXVxcblxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08c21hbGw+PGZvbnQgY29sb3I9Izg3MWY3OD7op4TliJnmlbDmja7mnaXmupDkuo7nvZHnu5zvvIzkuI3kv53or4HotYTmupDlronlhajmgKfvvIzor7foh6rooYzmlp/phYzkuIvovb3jgIzms6jmhI/vvJrmj5DnpLrpnZ7kvJrlkZjkuIvovb3kuI3og73kuIvovb3nmoTotYTmupDvvIzlj6/liIfmjaJVQeaIkFBD77yM5aaC5pyJ5a+G56CB6L6T5YWl5a+G56CB5LmL5ZCO5Y2z5Y+v5LiL6L295L2/55So44CNPC9mb250Pjwvc21hbGw+JyxcXG4gICAgICAgIGRlc2M6ICfigJzigJzigJ3igJ08c21hbGw+PGZvbnQgY29sb3I9I2YyMGMwMD7mnKzop4TliJnku4XpmZDlhY3otLnlrabkuaDkuqTmtYHkvb/nlKjvvIzor7fkuo7lr7zlhaXlkI4yNOWwj+aXtuWGheWIoOmZpO+8jOS7u+S9lee7hOe7h+aIluS4quS6uuS4jeW+l+S7peS7u+S9leaWueW8j+aWueazleS8oOaSreaIluWUruWNluatpOinhOWImeeahOaVtOS9k+aIlumDqOWIhu+8gTwvZm9udD48L3NtYWxsPicsXFxuICAgICAgIHVybDonaGlrZXI6Ly9lbXB0eScsXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxuICAgIH0pXFxuXFxuaWYgKE1ZX1BBR0UgPT0gJzEnKSB7XFxuICAgLy8gZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9zcycpKS5ydWxlKVxcbn1cXG5ldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3NodWp1JykpLnJ1bGUpXFxuXFxudmFyIGxpc3RzID0gdGFicy5kYXRhXFxuZnVuY3Rpb24gc2V0VGFicyhsaXN0cywgdmFyaSkge1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBnZXRNeVZhcih2YXJpLCAnMCcpID09IGkgPyAn4oCc4oCcJyArICfij7MgJyArIGxpc3RzW2ldLmdyb3VwICsgJ+KAneKAnScgOiBsaXN0c1tpXS5ncm91cCxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcImhpa2VyOi8vZW1wdHlcXFwiKS5sYXp5UnVsZSgodmFyaSwgaSkgPT4ge1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcih2YXJpLCBpKTtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcInRhYnN1cmxcXFwiLCBpKTtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3Noc29ydCcsICcxJylcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3NoJywgaSlcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcInZhcmlsXFxcIiwgXFxcIjBcXFwiKTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuICAgICAgICAgICAgfSwgdmFyaSwgaSksXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXG4gICAgICAgIH0pXFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gc2V0TGlzdHMobGlzdHMsIGluZGV4KSB7XFxuICAgIGlmIChsaXN0cy5sZW5ndGggIT0gJycpIHtcXG4gICAgICAgIHZhciBsaXN0ID0gbGlzdHNbaW5kZXhdLm9wdGlvbnM7XFxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcXG4gICAgICAgICAgICB2YXIgdGl0aWxlID0gbGlzdFtqXS5uYW1lXFxuICAgICAgICAgICAgdmFyIGxpc3RzdXJsID0gbGlzdFtqXS51cmxcXG4gICAgICAgICAgICB2YXIgbGlzdHNwd2QgPSBsaXN0W2pdLnB3ZFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRNeVZhcihcXFwidmFyaWxcXFwiLCAnMCcpID09IGogPyAn4oCc4oCcJyArICfij7MgJyArIHRpdGlsZSArICfigJ3igJ0nIDogdGl0aWxlLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGxpc3RzdXJsLCBsaXN0c3B3ZCwgaikgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3Noc29ydCcsICcwJylcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJ2YXJpbFxcXCIsIGopO1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImxpc3RzdXJsXFxcIiwgbGlzdHN1cmwpO1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImxpc3RzcHdkXFxcIiwgbGlzdHNwd2QpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICAgICAgICAgICAgICB9LCBsaXN0c3VybCwgbGlzdHNwd2QsIGopLFxcbiAgICAgICAgICAgIC8vICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cXG5pZiAoTVlfUEFHRSA9PSAnMScpIHtcXG4gICAgc2V0VGFicyhsaXN0cywgTVlfVVJMKTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgfSlcXG4gICAgc2V0TGlzdHMobGlzdHMsIGdldE15VmFyKE1ZX1VSTCwgJzAnKSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogJ2xpbmVfYmxhbmsnXFxuICAgIH0pXFxufVxcblxcbi8vVVJMXFxuaWYgKGdldE15VmFyKCdzaHNvcnQnKSA9PSBcXFwiMVxcXCIpIHtcXG4gICAgdmFyIFVSTCA9IGxpc3RzW2dldE15VmFyKCdzaCcsIFxcXCIwXFxcIildLm9wdGlvbnNbMF0udXJsXFxuICAgIHZhciBwd2QgPSBsaXN0c1tnZXRNeVZhcignc2gnLCBcXFwiMFxcXCIpXS5vcHRpb25zWzBdLnB3ZFxcbn0gZWxzZSB7XFxuICAgIHZhciBVUkwgPSBnZXRNeVZhcihcXFwibGlzdHN1cmxcXFwiLCBsaXN0c1swXS5vcHRpb25zWzBdLnVybClcXG4gICAgdmFyIHB3ZCA9IGdldE15VmFyKFxcXCJsaXN0c3B3ZFxcXCIsIGxpc3RzWzBdLm9wdGlvbnNbMF0ucHdkKTtcXG59XFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCJjb29raWVcIixcInBhdGhcIjpcImNvb2tpZVwiLFwicnVsZVwiOlwiZnVuY3Rpb24gZ2V0SnNvbih1cmwsIHB3ZCwgdHJ1cmwpIHtcXG4gICAgbGV0IGh0bWwgPSByZXF1ZXN0KHVybCk7XFxuICAgIHRyeSB7XFxuICAgICAgICB2YXIgaWNvID0gaHRtbC5tYXRjaCgvYmFja2dyb3VuZDp1cmxcXFxcKCguKj8pJy8pWzFdO1xcbiAgICB9IGNhdGNoIChlKSB7fVxcbiAgICBwdXRNeVZhcihcXFwiaWNvXFxcIiwgaWNvKTtcXG4gICAgcHV0TXlWYXIoXFxcImh0bWxcXFwiLCBodG1sKTtcXG4gICAgZXZhbChodG1sLm1hdGNoKC92YXIgcGdzOyhbXFxcXHNcXFxcU10qP3Bncy4rOykvKVsxXSk7XFxuICAgIGV2YWwoJ3ZhciBib2R5ID0nICsgaHRtbC5tYXRjaCgvZGF0YSA6KFtcXFxcc1xcXFxTXSo/XFxcXH0pLylbMV0pO1xcbiAgICByZXR1cm4gSlNPTi5wYXJzZShwb3N0KHRydXJsICsgJy9maWxlbW9yZWFqYXgucGhwJywge1xcbiAgICAgICAgYm9keTogYm9keVxcbiAgICB9KSkudGV4dDtcXG59XFxudmFyIHRydXJsID0gVVJMLm1hdGNoKC9odHRwLio/Y29tLyk7XFxudmFyIGxpc3QgPSBnZXRKc29uKFVSTCwgcHdkLCB0cnVybCk7XFxuXFxuLy/mhJ/osKLlopnkvazku6PnoIFcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaQnOe0olwiLFwicGF0aFwiOlwic3NcIixcInJ1bGVcIjpcImQucHVzaCh7XFxuICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgaWYgKGlucHV0LnRyaW0oKSkge1xcbiAgICAgICAgIGlmICgvaHR0cHxodHRwcy8udGVzdChpbnB1dCkpIHtcXG4gICAgICAgICAgICB2YXIgbGluayA9ICdoaWtlcjovL2VtcHR5IyNmeXBhZ2UkJCQnICsgaW5wdXQ7XFxuICAgICAgICAgICAgcmV0dXJuICQobGluaykucnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHZhciBkID0gW11cXG4gICAgICAgICAgICAgICAgLy92YXIgc3N1cmwgPSBNWV9VUkwuc3BsaXQoXFxcIiQkJFxcXCIpWzFdLm1hdGNoKC8oaHR0cHxmdHB8aHR0cHMpOlxcXFwvXFxcXC9bXFxcXHdcXFxcLV9dKyhcXFxcLltcXFxcd1xcXFwtX10rKSsoW1xcXFx3XFxcXC1cXFxcLixAP149JSY6L35cXFxcKyNdKltcXFxcd1xcXFwtXFxcXEA/Xj0lJi9+XFxcXCsjXSk/LylbMF1cXG5cXHRcXHRcXHRcXHR2YXIgc3N1cmwgPSBNWV9VUkwubWF0Y2goLyhodHRwfGZ0cHxodHRwcyk6XFxcXC9cXFxcL1tcXFxcd1xcXFwtX10rKFxcXFwuW1xcXFx3XFxcXC1fXSspKyhbXFxcXHdcXFxcLVxcXFwuLEA/Xj0lJjovflxcXFwrI10qW1xcXFx3XFxcXC1cXFxcQD9ePSUmL35cXFxcKyNdKT8vKVswXVxcbiAgICAgICAgICAgICAgICB2YXIgc3Nwd2QgPSBNWV9VUkwuc3BsaXQoXFxcIuWvhueggTpcXFwiKVsxXVxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwibGlzdHN1cmxcXFwiLCBzc3VybCk7XFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJsaXN0c3B3ZFxcXCIsIHNzcHdkKTtcXG4gICAgICAgICAgICAgICAgdmFyIFVSTCA9IGdldE15VmFyKFxcXCJsaXN0c3VybFxcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgdmFyIHB3ZCA9IGdldE15VmFyKFxcXCJsaXN0c3B3ZFxcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS95ZW1pYW4nKSkucnVsZSlcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfWVsc2V7XFxuICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9zZWFyY2g/cnVsZT1cXFwiICsgTVlfUlVMRS50aXRsZSArIFxcXCImcz1cXFwiK2lucHV0XFxuICAgICAgICBcXG4gICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v6K+36L6T5YWl572R55uY6ZO+5o6lJztcXG4gICAgICAgIH1cXG4gICAgfSksXFxuICAgIHRpdGxlOiAn6L+b5YWlJyxcXG4gICAgZGVzYzogXFxcIuaUr+aMgei+k+WFpeS6keebmOWIhuS6q+mTvuaOpVxcXCIsXFxuICAgIGNvbF90eXBlOiBcXFwiaW5wdXRcXFwiXFxufSk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCJsYXp5XCIsXCJwYXRoXCI6XCJsYXp5XCIsXCJydWxlXCI6XCJ2YXIgbGF6eSA9ICQoXFxcIlxcXCIpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgdHJ5IHtcXG4gICAgICAgICAgdmFyIGh0bWwgPSByZXF1ZXN0KGlucHV0KTtcXG4gICAgICAgICAvLyBsb2coaW5wdXQpXFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICdodHRwczovL2RldmVsb3Blci5sYW56b3VnLmNvbS9maWxlLycgKyBodG1sLm1hdGNoKC8nKFxcXFw/Lio/KScvKVsxXVxcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9nKHVybClcXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIganN1cmwgPSByZXF1ZXN0KHVybCwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdDogZmFsc2UsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhIZWFkZXJzOiB0cnVlXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIganN1cmwgPSBqc3VybC5tYXRjaCgvaHJlZj0uXFxcIiguKj8pXFxcIi8pWzFdXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJkb3dubG9hZDovL1xcXCIgKyBqc3VybCBcXG4vLzHjgIHlu7rorq7kvb/nlKjnrKzkuInmlrnkuIvovb3lmahcXG4gICAgICAgICAgICAgICAgICAgICAvLyAgICByZXR1cm4ganN1cmwgXFxuIC8vMuOAgeW7uuiuruWGhee9ruS4i+i9veWZqOS9v+eUqFxcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhcXFwi6L2s6Lez5Y6f56uZXFxcIilcXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2coaW5wdXQpXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLnvZHnm5hcIixcInBhdGhcIjpcInllbWlhblwiLFwicnVsZVwiOlwic2V0UGFnZVRpdGxlKCfnvZHnm5gnKVxcbmV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbGF6eScpKS5ydWxlKVxcblxcblxcblxcbnRyeSB7XFxuICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvY29va2llJykpLnJ1bGUpXFxuICAgIGlmIChNWV9QQUdFID09ICcxJykge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICB2YXIgd2xpc3QgPSBwYXJzZURvbUZvckFycmF5KGdldE15VmFyKFxcXCJodG1sXFxcIiksICcjZm9sZGVyJiZhJyk7XFxuICAgICAgICAgICAgZm9yICh2YXIgaiBpbiB3bGlzdCkge1xcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gJ2hpa2VyOi8vZW1wdHkjZnlwYWdlJCQkJyArIHRydXJsICsgd2xpc3Rbal0ubWF0Y2goL2hyZWY9XFxcIiguKj8pXFxcIi8pWzFdO1xcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly9naC1wcm94eS5jb20vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2xzMTI1NzgxMDAzL2xtdHViaWFvL21haW4vbW9yZS8zNy5wbmcnLFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHBhcnNlRG9tRm9ySHRtbCh3bGlzdFtqXSwgJy5maWxlbmFtZSYmVGV4dCcpLnJlcGxhY2UoL+WFrOS8l+WPty4rL2csIFxcXCJcXFwiKSxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYXZhdGFyXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJCh1cmwpLnJ1bGUoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9nKE1ZX1VSTClcXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IFtdXFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNzdXJsID0gTVlfVVJMLnNwbGl0KFxcXCIkJCRcXFwiKVsxXS5tYXRjaCgvKGh0dHB8ZnRwfGh0dHBzKTpcXFxcL1xcXFwvW1xcXFx3XFxcXC1fXSsoXFxcXC5bXFxcXHdcXFxcLV9dKykrKFtcXFxcd1xcXFwtXFxcXC4sQD9ePSUmOi9+XFxcXCsjXSpbXFxcXHdcXFxcLVxcXFxAP149JSYvflxcXFwrI10pPy8pWzBdXFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNzcHdkID0gTVlfVVJMLnNwbGl0KFxcXCLlr4bnoIE6XFxcIilbMV1cXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwibGlzdHN1cmxcXFwiLCBzc3VybCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImxpc3RzcHdkXFxcIiwgc3Nwd2QpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBVUkwgPSBnZXRNeVZhcihcXFwibGlzdHN1cmxcXFwiLCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB3ZCA9IGdldE15VmFyKFxcXCJsaXN0c3B3ZFxcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3llbWlhbicpKS5ydWxlKVxcbiAgICAgICAgICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgfSlcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGNhdGNoIChlKSB7fVxcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAvL2lmIChVUkwgPT0gbGlzdHNbMF0ub3B0aW9uc1swXS51cmwpIHtcXG4gICAgICAgICAgICBpZiAoL2hhaWt1by8udGVzdChVUkwpKSB7XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIjxjZW50ZXI+XFxcIiArICc8c3BhbiBzdHlsZT1cXFwiY29sb3I6ICNGRjQ1MDBcXFwiPuWFrOS8l+WPt++8muaWsOaWueWchuWwj+ajieiihO+8gTxzbWFsbD4o54K55Ye75aSN5Yi2KTwvc21hbGw+PC9zcGFuPjwvY2VudGVyPicsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdjb3B5Oi8v5paw5pa55ZyG5bCP5qOJ6KKELmpzOlxcXCJ0b2FzdDovL+W3suWkjeWItu+8jOivt+WIsOW+ruS/oeWFs+azqOWwj+ajieiihOWFrOS8l+WPt1xcXCInLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJhdmF0YXJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBcXFwiaHR0cDovL3BpYy5kb3duY2MuY29tL3VwbG9hZC8yMDIxLTQvMjAyMTQ4MTQxNTMwMTM2OS5wbmdcXFwiXFxuICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnTxjZW50ZXI+PHNtYWxsPlxcXCIgKyAnPHNwYW4gc3R5bGU9XFxcImNvbG9yOiAjRkY0NTAwXFxcIj7ph43opoHmm7TmlrDlhoXlrrnop4HlhazkvJflj7fvvJrmlrDmlrnlnIblsI/mo4noooTvvIFcXFxcbuWIq+W/mOS6hueCuei1nuOAgeWcqOeci+OAgeaKleW4geS4iei/nu+8gTwvc3Bhbj48L3NtYWxsPjwvY2VudGVyPicsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL21wLndlaXhpbi5xcS5jb20vcy91a01aNEQ2ZVJtLU9DQVIxRzhQYW9RJyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNTsgaisrKSB7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGNhdGNoIChlKSB7fVxcbiAgICB9XFxuXFxuICAgXFxuICAgIGZvciAodmFyIGkgaW4gbGlzdCkge1xcbiAgICAgICAgaWYgKGxpc3RbaV0uaWQgIT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICBcXHR2YXIgdXJsID10cnVybCArICcvJyArIGxpc3RbaV0uaWRcXG4gICAgICAgICAgICBpZiAobGlzdFtpXS5pY28gIT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICAgIHZhciBpY28gPSBnZXRNeVZhcihcXFwiaWNvXFxcIikgKyBsaXN0W2ldLmljb1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHZhciBpY28gPSBcXFwiaHR0cHM6Ly9naC1wcm94eS5jb20vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2xzMTI1NzgxMDAzL2xtdHViaWFvL21haW4vbWVzc3kvNzEuc3ZnXFxcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogbGlzdFtpXS5uYW1lX2FsbCxcXG4gICAgICAgICAgICAgICAgaW1nOiBpY28sICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICB1cmw6dXJsK2xhenksIFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTpcXFwi4piF5Y+R5biD5LqO4piFXFxcIitsaXN0W2ldLnRpbWUsXFxuICAgICAgICAgIC8vICB1cmw6XFxcInRvYXN0Oi8v5Y+R5biD5LqOXFxcIitsaXN0W2ldLnRpbWUsIFxcbiAgICAgICAgICAgIHVybDp1cmwrbGF6eSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgIC8vIGNvbF90eXBlOiBcXFwiYXZhdGFyXFxcIixcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgfSlcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBpZiAobGlzdCA9PSBcXFwibm8gZmlsZVxcXCIpIHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ08Y2VudGVyPjxzbWFsbD5cXFwiICsgJzxzcGFuIHN0eWxlPVxcXCJjb2xvcjogIzk5OTk5OVxcXCI+772e772e772e5oiR5piv5pyJ5bqV57q/55qE772e772e772ePC9zcGFuPjwvc21hbGw+PC9jZW50ZXI+JyxcXG4gICAgICAgICAgICB1cmw6ICd0b2FzdDovL+WIq+eCueS6hu+8jOaIkeecn+eahOacieW6lee6v++8gScsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgXFxuICAgICAgaWYgKGxpc3QgPT0gXFxcIlxcXCIpIHtcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdPGNlbnRlcj5cXFwiICsgJzxzcGFuIHN0eWxlPVxcXCJjb2xvcjogI0ZGNDUwMFxcXCI+5rKh5pyJ6I635Y+W5Yiw5pWw5o2u44CC77yBPHNtYWxsPijngrnlh7vov5vljp/nvZHpobUpPC9zbWFsbD48L3NwYW4+PC9jZW50ZXI+JyxcXG4gICAgICAgICAgIC8vdGl0bGU6IFxcXCLigJzigJzigJ3igJ08Y2VudGVyPjxzbWFsbD5cXFwiICsgJzxzcGFuIHN0eWxlPVxcXCJjb2xvcjogIzk5OTk5OVxcXCI+5rKh5pyJ6I635Y+W5Yiw5pWw5o2u44CC77yI54K55Ye76L+b5Y6f572R6aG177yJPC9zcGFuPjwvc21hbGw+PC9jZW50ZXI+JyxcXG4gICAgICAgICAgICB1cmw6IFVSTCxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxuICAgICAgICB9KTsgXFxuICAgIFxcbiAgICAgfVxcbn0gY2F0Y2ggKGUpIHtcXG5cXHRpZiAoL2xhbnpvdS8udGVzdChNWV9VUkwpKSB7XFxuXFx0XFx0dmFyIGRhPU1ZX1VSTC5tYXRjaCgvKGh0dHB8ZnRwfGh0dHBzKTpcXFxcL1xcXFwvW1xcXFx3XFxcXC1fXSsoXFxcXC5bXFxcXHdcXFxcLV9dKykrKFtcXFxcd1xcXFwtXFxcXC4sQD9ePSUmOi9+XFxcXCsjXSpbXFxcXHdcXFxcLVxcXFxAP149JSYvflxcXFwrI10pPy8pWzBdXFxuXFx0XFx0aWYoZGEuaW5kZXhPZihcXFwiY29tL3RwL1xcXCIpPT0tMSl7ICBcXG5cXHRcXHR2YXIgZGE9ZGEucmVwbGFjZShcXFwiY29tL1xcXCIsXFxcImNvbS90cC9cXFwiKVxcblxcdFxcdH1cXG5cXHRcXHRkLnB1c2goe1xcblxcdFxcdFxcdHRpdGxlOiBcXFwi8J+Ul1xcXCIrZGEsXFxuXFx0XFx0XFx0dXJsOiBkYStsYXp5LFxcblxcdFxcdFxcdGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXHRcXHRcXHRcXG4gICAgfSk7XFx0XFxuXFx0XFx0fWVsc2V7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuayoeacieiOt+WPluWIsOS6keebmOS/oeaBr++8jOivt+ehruiupOe9keebmOmTvuaOpeaYr+WQpuato+ehru+8gVxcXCIsXFxuICAgICAgICB1cmw6ICd0b2FzdDovL+ecn+eahOayoeacieiOt+WPluWIsH5+JyxcXG4gICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG4gICAgfSk7XFxuICAgIGlmICgvaHR0cHxodHRwcy8udGVzdChNWV9VUkwpKSB7XFxuICAgICAgIHZhciB1cmwgPSBNWV9VUkwubWF0Y2goLyhodHRwfGZ0cHxodHRwcyk6XFxcXC9cXFxcL1tcXFxcd1xcXFwtX10rKFxcXFwuW1xcXFx3XFxcXC1fXSspKyhbXFxcXHdcXFxcLVxcXFwuLEA/Xj0lJjovflxcXFwrI10qW1xcXFx3XFxcXC1cXFxcQD9ePSUmL35cXFxcKyNdKT8vKVswXVxcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgdmFyIHVybCA9ICd0b2FzdDovL+WlveWDj+S4jeaYr+S4qumTvuaOpe+8gSdcXG4gICAgfVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLngrnlh7vnvZHpobXmn6XnnIvjgILkvaDovpPlhaXnmoTlnLDlnYDvvJpcXFxcblxcXCIgKyBNWV9VUkwuc3BsaXQoXFxcIiQkJFxcXCIpWzFdLFxcbiAgICAgICAgdXJsOiB1cmwsXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfMSdcXG4gICAgfSk7XFxuICAgIGNsZWFyTXlWYXIoXFxcImxpc3RzdXJsXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoXFxcImxpc3RzcHdkXFxcIik7XFxuICAgIH1cXG59XFxuc2V0UmVzdWx0KGQpO1wifV0iLCJpY29uIjoiaHR0cHM6Ly9pbWcxLmFsaTIxMy5uZXQvc2hvdXlvdS9jb3Zlci84LzEwMjU3NzM1LmpwZyIsInByb3h5IjoiIn0=