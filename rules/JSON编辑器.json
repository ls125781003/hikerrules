{"last_chapter_rule":"","pageList":[{"col_type":"scroll_button","name":"内容载入","path":"content","rule":"js:\neval(JSON.parse(request('hiker://page/functions')).rule)\nlet { Path, Hash, File } = MY_PARAMS,\nAllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\n    Json = JSONRecur(AllJson, Path),\n    Type = Object.prototype.toString.call(Json).slice(8, -1),\n    exPath = 'hiker://files/tmp/JSONEditor_'\nif (!File) {\n    setPageTitle('JSON编辑器')\n    exPath += $.dateFormat(new Date(), 'yyyyMMddHHmmssS') + '.json'\n} else {\n    let exName = File.split('?')[0].split('#')[0].split('/')\n    exName = exName[exName.length - 1]\n    setPageTitle(exName)\n    if (Path.length > 1) {\n        exPath += $.dateFormat(new Date(), 'yyyyMMddHHmmssS') + '.json'\n    } else if (/^hiker:\\/\\/(?!files)/.test(File)) {\n        setPageTitle(File)\n        exPath += File.replace('://', '_')\n    } else if (/^(ht|f)tps?:\\/\\//.test(File)) {\n        exPath += exName\n    } else exPath = File\n}\nif (Path.length == 1)\n    addListener('onClose', $.toString((Hash) => {\n        clearMyVar('search_' + Hash)\n        deleteFile('JSON_' + Hash)\n        switch (getMyVar('prePage')) {\n            case 'home':\n                refreshPage(false)\n                break\n            case 'interface':\n                back(false)\n                break\n            default:\n        }\n    }, Hash))\nelse addListener('onClose', 'refreshPage(false)')\nlet el = [{\n    title: '““””' + (Path.join('.') + ': ').bold().fontcolor('#409eff') + '[' + Type + '] 🖋️',\n    url: $(\n        ['Object', 'Array', 'String', 'Number', 'Boolean', 'Null'],\n        2, '更改数据类型'\n    ).select((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n        JSONRecur(AllJson, Path, (self) => typeConvert(self, input))\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n        refreshPage(false)\n    }, Path, Hash),\n    col_type: 'text_1',\n    extra: { lineVisible: false },\n}, {\n    title: '✏️修改',\n    url: 'hiker://page/editor#noRefresh#',\n    extra: { Path: Path, Hash: Hash }\n}, null, null, {\n    title: '📤导出',\n    url: $(exPath, '导出文件本地路径\\n置空则写入剪切板').input((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\n            Json = typeConvert(JSONRecur(AllJson, Path), 'String')\n        if (input) {\n            if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\n                input = 'file://' + input\n            writeFile(input, Json)\n            return 'toast://已导出至' + input\n        } else return 'copy://' + Json\n    }, Path, Hash)\n}, null, {\n    title: '📦更多',\n    url: $('self=', '用JS对本级内容self进行自定义修改\\n大佬级操作，不懂JS慎用').input((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n        JSONRecur(AllJson, Path, new Function('self', input + ';return self'))\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n        refreshPage(false)\n    }, Path, Hash)\n}, { col_type: 'line_blank' }]\n\nif (Type == 'Object' || Type == 'Array') {\n    eval(JSON.parse(request('hiker://page/' + Type)).rule)\n} else {\n    Json = String(Json)\n    if (Json.length > 9999) Json = Json.slice(0, 9999) + '\\n\\n......'\n    el.push({\n        title: Json,\n        col_type: 'long_text',\n        extra: { textSize: 12 }\n    })\n}\nsetResult(el)\n"},{"col_type":"movie_3","name":"对象解析","path":"Object","rule":"el[2] = {\n    title: '💠新增',\n    url: $('', '新增的键名\\n不能与对象中已有键名重复').input((Path, Hash, File) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\n            Json = JSONRecur(AllJson, Path)\n        if (Object.hasOwn(Json, input))\n            return `toast://无法新增，对象中已有[${input}]键`\n        updateItem('JSONEditorNewItem' + Hash, { extra: { Path: Path.concat(input), Hash: Hash, File: File } })\n        JSONRecur(AllJson, Path, (self) => (self[input] = null, self))\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n        return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\n    }, Path, Hash, File),\n    extra: { Id: 'JSONEditorNewItem' + Hash }\n}\nlet searchKey = JSON.parse(getMyVar('search_' + Hash, '{}'))[Path.join('.')]\nif (searchKey) el[3] = {\n    title: `🔍查找[${searchKey}]`,\n    url: $(['✂  应用过滤', '✗  结束查找', '✎  更改查找'], 1).select((Path, Hash, searchKey) => {\n        switch (input.slice(3)) {\n            case '应用过滤':\n                return $('应用过滤会将查找结果写入缓存\\n删除不符合条件的项目\\n确定要继续吗？')\n                    .confirm((Path, Hash, searchKey) => {\n                        eval(JSON.parse(request('hiker://page/functions')).rule)\n                        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n                        JSONRecur(AllJson, Path, (self) => {\n                            for (let k in self) {\n                                let v = self[k],\n                                    vStr = typeConvert(v, 'String'),\n                                    vType = Object.prototype.toString.call(v).slice(8, -1)\n                                if (searchKey.startsWith('>>')) {\n                                    if (!objSearchParse(searchKey.slice(2), k, vStr, vType))\n                                        delete self[k]\n                                } else if (!k.includes(searchKey) && !vStr.includes(searchKey))\n                                    delete self[k]\n                            }\n                            return self\n                        })\n                        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n                        Path = Path.join('.')\n                        setSKey(undefined)\n                    }, Path, Hash, searchKey)\n            case '更改查找':\n                return $(searchKey,\n                    '查找关键字\\n普通模式下为键名或键值的一部分\\n以>>开头启用高级模式\\n详见使用帮助'\n                ).input((Path, Hash) => {\n                    eval(JSON.parse(request('hiker://page/functions')).rule)\n                    setSKey(input)\n                }, Path.join('.'), Hash)\n            case '结束查找':\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                Path = Path.join('.')\n                setSKey(undefined)\n        }\n    }, Path, Hash, searchKey)\n}\nelse el[3] = {\n    title: '🔍查找',\n    url: $(searchKey || '',\n        '查找关键字\\n普通模式下为键名或键值的一部分\\n以>>开头启用高级模式\\n详见使帮助子页面'\n    ).input((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        setSKey(input)\n    }, Path.join('.'), Hash)\n}\nel[5] = {\n    title: '📥导入',\n    url: $('hiker://files/', '要导入的对象JSON或文件URL\\n键名相同的会被覆盖').input((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        try {\n            input = JSON.parse(input)\n        } catch (e) {\n            if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\n                input = 'file://' + input\n            input = JSON.parse(request(input))\n        }\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n        JSONRecur(AllJson, Path, (self) => Object.assign(self, input))\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n        refreshPage(false)\n    }, Path, Hash)\n}\nfor (let k in Json) {\n    let v = Json[k],\n        vStr = typeConvert(v, 'String'),\n        vType = Object.prototype.toString.call(v).slice(8, -1)\n    if (searchKey) {\n        if (searchKey.startsWith('>>')) {\n            if (!objSearchParse(searchKey.slice(2), k, vStr, vType))\n                continue\n        } else if (!k.includes(searchKey) && !vStr.includes(searchKey))\n            continue\n    }\n    el.push({\n        title: `““””${k.bold()}: [${vType}]`,\n        desc: vStr.slice(0, 200),\n        col_type: 'text_1',\n        extra: {\n            Path: Path.concat(k),\n            Hash: Hash,\n            File: File\n        },\n        url: $(['≡  展开键值', '✎  更改键名', '✗  删除项目', '※  复制键名', '※  复制键值'], 1, k).select((k, Path, Hash) => {\n            eval(JSON.parse(request('hiker://page/functions')).rule)\n            return objItemSel(input, k)\n        }, k, Path, Hash)\n    })\n}\n"},{"col_type":"movie_3","name":"数组解析","path":"Array","rule":"el[2] = {\n    title: '💠新增',\n    url: $('#noLoading#').lazyRule((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n        JSONRecur(AllJson, Path, (self) => (self.push(null), self))\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n        return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\n    }, Path, Hash),\n    extra: { Path: Path.concat(Json.length), Hash: Hash }\n}\nlet searchKey = JSON.parse(getMyVar('search_' + Hash, '{}'))[Path.join('.')]\nif (searchKey) el[3] = {\n    title: `🔍查找[${searchKey}]`,\n    url: $(['✂  应用过滤', '✗  结束查找', '✎  更改查找'], 1).select((Path, Hash, searchKey) => {\n        switch (input.slice(3)) {\n            case '应用过滤':\n                return $('应用过滤会将查找结果写入缓存\\n删除不符合条件的项目\\n确定要继续吗？')\n                    .confirm((Path, Hash, searchKey) => {\n                        eval(JSON.parse(request('hiker://page/functions')).rule)\n                        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n                        JSONRecur(AllJson, Path, (self) => self.filter((v, i, arr) => {\n                            let vStr = typeConvert(v, 'String'),\n                                vType = Object.prototype.toString.call(v).slice(8, -1),\n                                vLabel = ''\n                            if (vType == 'Object') {\n                                vLabel = v.title || v.name || v.key || v.id || v.label\n                                if (typeof vLabel != 'string') vLabel = ''\n                            }\n                            if (searchKey.startsWith('>>')) {\n                                if (!arrSearchParse(searchKey.slice(2), i, vLabel, vStr, vType, arr.length))\n                                    return false\n                            } else if (!vStr.includes(searchKey))\n                                return false\n                            return true\n                        }))\n                        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n                        Path = Path.join('.')\n                        setSKey(undefined)\n                    }, Path, Hash, searchKey)\n            case '更改查找':\n                return $(searchKey,\n                    '查找关键字\\n普通模式下为数组内容的一部分\\n以>>开头启用高级模式\\n详见使帮助子页面'\n                ).input((Path, Hash) => {\n                    eval(JSON.parse(request('hiker://page/functions')).rule)\n                    setSKey(input)\n                }, Path.join('.'), Hash)\n            case '结束查找':\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                Path = Path.join('.')\n                setSKey(undefined)\n        }\n    }, Path, Hash, searchKey)\n}\nelse el[3] = {\n    title: '🔍查找',\n    url: $(searchKey || '',\n        '查找关键字\\n普通模式下为数组内容的一部分\\n以>>开头启用高级模式\\n详见使用帮助'\n    ).input((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        setSKey(input)\n    }, Path.join('.'), Hash)\n}\nel[5] = {\n    title: '📥导入',\n    url: $('hiker://files/', '要导入的数组JSON或文件URL\\n新数组会从末尾连接').input((Path, Hash) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        try {\n            input = JSON.parse(input)\n        } catch (e) {\n            if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\n                input = 'file://' + input\n            input = JSON.parse(request(input))\n        }\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n        JSONRecur(AllJson, Path, (self) => self.concat(input))\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n        refreshPage(false)\n    }, Path, Hash)\n}\nfor (let i = 0; i < Json.length; i++) {\n    let v = Json[i],\n        vStr = typeConvert(v, 'String'),\n        vType = Object.prototype.toString.call(v).slice(8, -1),\n        vLabel = ''\n    if (vType == 'Object') {\n        vLabel = v.title || v.name || v.key || v.id || v.label\n        if (typeof vLabel != 'string') vLabel = ''\n    }\n    if (searchKey) {\n        if (searchKey.startsWith('>>')) {\n            if (!arrSearchParse(searchKey.slice(2), i, vLabel, vStr, vType, Json.length))\n                continue\n        } else if (!vStr.includes(searchKey))\n            continue\n    }\n    el.push({\n        title: `““””${i.toString().bold()}: ${vLabel} [${vType}]`,\n        desc: vStr.slice(0, 200),\n        col_type: 'text_1',\n        extra: {\n            Path: Path.concat(i),\n            Hash: Hash,\n            File: File\n        },\n        url: $(['≡  展开内容', '⇵  移动位置', '✗  删除项目', '※  复制内容'], 1, i + (vLabel && ': ') + vLabel).select((i, Path, Hash) => {\n            eval(JSON.parse(request('hiker://page/functions')).rule)\n            return arrItemSel(input, i)\n        }, i, Path, Hash)\n    })\n}\n"},{"col_type":"movie_3","name":"公共函数","path":"functions","rule":"function JSONRecur(json, path, value) {\n    if (path.length == 1) {\n        if (value === undefined) {\n            return json[path[0]]\n        } else if (typeof value == 'function') {\n            json[path[0]] = value(json[path[0]])\n        } else json[path[0]] = value\n    } else {\n        return JSONRecur(json[path[0]], path.slice(1), value)\n    }\n}\n\nfunction typeConvert(value, type) {\n    let vType = Object.prototype.toString.call(value).slice(8, -1)\n    switch (type) {\n        case 'Object':\n            switch (vType) {\n                case 'Object':\n                    return value\n                case 'Array':\n                    let obj = {}\n                    for (let v of value) {\n                        if (v && Object.keys(v).length == 2\n                            && 'key' in v && 'value' in v &&\n                            !Object.hasOwn(obj, v.key)) {\n                            obj[v.key] = v.value\n                        } else break\n                    }\n                    if (Object.keys(obj).length < value.length) {\n                        obj = Object.assign({}, value)\n                        for (let k in obj) if (obj[k] === null) delete obj[k]\n                    }\n                    return obj\n                case 'String':\n                    try {\n                        return typeConvert(JSON.parse(value), type)\n                    } catch (e) { return {} };\n                default:\n                    return {}\n            };\n        case 'Array':\n            switch (vType) {\n                case 'Object':\n                    let keys = Object.keys(value), length = 0\n                    for (let k of keys)\n                        if (/^\\d+$/.test(k)) {\n                            k = Number(k) + 1\n                            if (length < k) length = k\n                        } else {\n                            length = 0\n                            break\n                        }\n                    return length > 0\n                        ? Array.from(Object.assign(value, { length: length }))\n                        : keys.map((k) => ({ key: k, value: value[k] }))\n                case 'Array':\n                    return value\n                case 'String':\n                    try {\n                        return typeConvert(JSON.parse(value), type)\n                    } catch (e) { return [] };\n                default:\n                    return []\n            };\n        case 'String':\n            switch (vType) {\n                case 'Object':\n                case 'Array':\n                    return JSON.stringify(value)\n                default:\n                    return String(value)\n            };\n        case 'Number':\n            return Number(value) || 0\n        case 'Boolean':\n            try {\n                while (typeof value == 'string')\n                    value = JSON.parse(value)\n            } catch (e) {}\n            return Boolean(value)\n        case 'Null':\n            return null\n    }\n}\n\nfunction objItemSel(input, k) {\n    switch (input.slice(3)) {\n        case '展开键值':\n            return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\n        case '更改键名':\n            return $(k, '更改的键名\\n不能与对象中已有键名重复').input((k, Path, Hash) => {\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\n                    Json = JSONRecur(AllJson, Path)\n                if (Object.hasOwn(Json, input))\n                    return `toast://无法更改，对象中已有[${input}]键`\n                JSONRecur(AllJson, Path, (self) => (self[input] = self[k], delete self[k], self))\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n                refreshPage(false)\n            }, k, Path, Hash)\n        case '删除项目':\n            return $(`确定要删除键名[${k}]的项目吗？`).confirm((k, Path, Hash) => {\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n                JSONRecur(AllJson, Path, (self) => (delete self[k], self))\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n                refreshPage(false)\n                return 'hiker://empty'\n            }, k, Path, Hash)\n        case '复制键名':\n            return 'copy://' + k\n        case '复制键值':\n            return $('#noLoading#').lazyRule((Path, Hash) => {\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n                return 'copy://' + typeConvert(JSONRecur(AllJson, Path), 'String')\n            }, Path.concat(k), Hash)\n    }\n}\n\nfunction arrItemSel(input, i) {\n    switch (input.slice(3)) {\n        case '展开内容':\n            return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\n        case '移动位置':\n            return $(String(i), '要移动到的位置序号\\n置空则移至末尾').input((i, Path, Hash) => {\n                if (input === '') input = Infinity\n                else {\n                    input = parseInt(input, 10)\n                    if (isNaN(input)) return 'toast://请正确输入数字序号'\n\t\t\t\t}\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n                JSONRecur(AllJson, Path, (self) => (self.splice(input, 0, self.splice(i, 1)[0]), self))\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n                refreshPage(false)\n            }, i, Path, Hash)\n        case '删除项目':\n            return $(`确定要删除序号[${i}]的内容吗？`).confirm((index, Path, Hash) => {\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n                JSONRecur(AllJson, Path, (self) => (self.splice(index, 1), self))\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n                refreshPage(false)\n                return 'hiker://empty'\n            }, i, Path, Hash)\n        case '复制内容':\n            return $('#noLoading#').lazyRule((Path, Hash) => {\n                eval(JSON.parse(request('hiker://page/functions')).rule)\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n                return 'copy://' + typeConvert(JSONRecur(AllJson, Path), 'String')\n            }, Path.concat(i), Hash)\n    }\n}\n\nfunction setSKey(searchKey) {\n    let search = JSON.parse(getMyVar('search_' + Hash, '{}'))\n    search[Path] = searchKey\n    putMyVar('search_' + Hash, JSON.stringify(search))\n    refreshPage(false)\n}\n\nfunction objSearchParse(searchKey, k, vStr, vType) {\n    return searchKey.split('|').some((OR) => {\n        return OR.split('&').every((AND) => {\n            let [mode, cont] = AND.split('@')\n            switch (mode) {\n                case 'key':\n                    return k.includes(cont)\n                case 'value':\n                    return vStr.includes(cont)\n                case 'type':\n                    return vType == cont\n            }\n        })\n    })\n}\nfunction arrSearchParse(searchKey, i, vLabel, vStr, vType, length) {\n    return searchKey.split('|').some((OR) => {\n        return OR.split('&').every((AND) => {\n            let [mode, cont] = AND.split('@')\n            switch (mode) {\n                case 'range':\n                    let [st, ed] = cont.split('~')\n                        .map((v) => {\n                            v = parseInt(v)\n                            if (v < 0) v += length\n                            return v\n                        })\n                    return st <= i && i <= ed\n                case 'label':\n                    return vLabel.includes(cont)\n                case 'value':\n                    return vStr.includes(cont)\n                case 'type':\n                    return vType == cont\n            }\n        })\n    })\n}\n"},{"col_type":"text_center_1","name":"对外接口","path":"interface","rule":"js:\n/*\n入口示例：\n{ url: 'hiker://page/interface#noRefresh##noHistory##noRecordHistory#?rule=JSON编辑器', extra: { Json: JSON对象或字符串或文件URL } }\n{ url: 'hiker://page/interface#noRefresh##noHistory##noRecordHistory#?rule=JSON编辑器&Json='+base64Encode(JSON字符串或文件URL)) }\n*/\nsetPageTitle('JSON编辑器')\nputMyVar('prePage', 'interface')\naddListener('onClose', 'clearMyVar(\"prePage\")')\nlet el = [],\n    input = MY_PARAMS.Json || base64Decode(getParam('Json')),\n    Hash = md5(input), Json, File\nif (typeof Json != 'object') try {\n    Json = JSON.parse(input)\n} catch (e) {\n    if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\n        input = 'file://' + input\n    Json = request(input)\n    File = input\n    try { Json = JSON.parse(Json) } catch (e) {}\n}\nif (Json && typeof Json == 'object') {\n    if (!fileExist('JSON_' + Hash))\n        saveFile('JSON_' + Hash, JSON.stringify({ this: Json }), 0)\n    Json = JSON.stringify(Json, null, 2)\n    el.push({\n        title: '““””<b>开始编辑JSON',\n        desc: '““””<b>预览',\n        url: 'hiker://page/content#noRefresh##noHistory##noRecordHistory#',\n        extra: {\n            Path: ['this'],\n            Hash: Hash,\n            File: File,\n            newWindow: true,\n            windowId: Hash,\n            lineVisible: false\n        }\n    })\n} else el.push({\n    title: '““””<b>JSON或文件解析错误，请检查输入',\n    desc: '““””<b>预览',\n    url: File,\n    extra: { lineVisible: false }\n})\nif (File && fileExist(File)) el.push({\n    title: '视界编辑器',\n    url: 'editFile://' + File,\n    col_type: 'text_2'\n}, {\n    title: '外部打开...',\n    url: 'openFile://' + File,\n    col_type: 'text_2'\n})\nif (Json.length > 9999) Json = Json.slice(0, 9999) + '\\n\\n......'\nel.push({ col_type: 'line_blank' }, {\n    title: Json,\n    col_type: 'long_text',\n    extra: { textSize: 12 }\n})\nsetResult(el)"},{"col_type":"text_2","name":"编辑界面","path":"editor","rule":"js:\neval(JSON.parse(request('hiker://page/functions')).rule)\nlet { Path, Hash } = MY_PARAMS,\n    AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\n    Json = JSONRecur(AllJson, Path),\n    Type = Object.prototype.toString.call(Json).slice(8, -1)\nsetPageTitle(Path.join('.'))\nputMyVar('edit_' + Hash, typeConvert(Json, 'String'))\naddListener('onClose', 'clearMyVar(\"edit_' + Hash + '\")')\nsetResult([{\n    title: '♻️  撤销修改',\n    url: '#noLoading#@lazyRule=.js:refreshPage(false);\"hiker://empty\"'\n}, {\n    title: '““””<b>💾&nbsp 应用并返回',\n    url: $('#noLoading#').lazyRule((Path, Hash, Type) => {\n        eval(JSON.parse(request('hiker://page/functions')).rule)\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\n        JSONRecur(AllJson, Path, typeConvert(getMyVar('edit_' + Hash, ''), Type))\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\n        back(true)\n        return 'hiker://empty'\n    }, Path, Hash, Type)\n}, {\n    col_type: 'input',\n    extra: {\n        type: 'textarea',\n        height: 15,\n        highlight: true,\n        defaultValue: getMyVar('edit_' + Hash, ''),\n        onChange: 'putMyVar(\"edit_' + Hash + '\", input)'\n    }\n}])\n"},{"col_type":"movie_3","name":"文件选择","path":"fileSelect","rule":"js:\naddListener('onClose', 'refreshPage()')\nconst requireUrl = 'http://hiker.nokia.press/hikerule/rulelist.json?id=5099',\n    initialPath = getPath('hiker://files/').slice(7)\nrequire(requireUrl).fileSelection({\n    callback: $.toString((hikerPath) => {\n        if (PATH.startsWith(hikerPath))\n            PATH = 'hiker://files/' + PATH.slice(hikerPath.length)\n        putMyVar('input', PATH)\n        return true\n    }, initialPath),\n    initialPath: initialPath,\n    rootDirPath: \"/storage/emulated/0/\",\n    requireUrl: requireUrl\n})\n"}],"title":"JSON编辑器","author":"永远の明日","version":13,"type":"tool","url":"hiker://empty","col_type":"text_2","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"工具","year_url":"","find_rule":"js:\nif (!getMyVar('cacheFreed')) {\n    let dir = getPath('hiker://files/rules/files/JSON编辑器/')\n    if (fileExist(dir)) {\n        let files = new java.io.File(dir.slice(7)).listFiles()\n        for (let v of files) if (v.getName().startsWith('JSON_')) v.delete()\n        putMyVar('cacheFreed', 'T')\n    }\n}\nputMyVar('prePage', 'home')\naddListener('onClose', 'clearMyVar(\"prePage\")')\nlet history = JSON.parse(readFile('history') || '[]'),\n    el = [{\n        desc: '输入JSON或文件URL...',\n        col_type: 'input',\n        extra: {\n            highlight: true,\n            defaultValue: getMyVar('input', ''),\n            onChange: $.toString((history) => {\n                function updateEntry(editable, isFile) {\n                    if (editable) {\n                        let Hash = md5(input)\n                        updateItem({\n                            title: '📝 开始编辑',\n                            url: $('#noLoading#').lazyRule((history, Hash, isFile) => {\n                                input = getMyVar('input', '')\n                                let Json = {}\n                                if (isFile) {\n                                    if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\n                                        input = 'file://' + input\n                                    try {\n                                        Json = JSON.parse(request(input))\n                                    } catch (e) {\n                                        return 'toast://文件解析错误，请检查输入URL'\n                                    }\n                                    if (!history.includes(input)) {\n                                        history.push(input)\n                                        saveFile('history', JSON.stringify(history))\n                                    }\n                                } else Json = JSON.parse(input)\n                                if (!fileExist('JSON_' + Hash))\n                                    saveFile('JSON_' + Hash, JSON.stringify({ this: Json }), 0)\n                                return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\n                            }, history, Hash, isFile),\n                            extra: {\n                                Path: ['this'],\n                                Hash: Hash,\n                                File: isFile && input,\n                                newWindow: true,\n                                windowId: Hash,\n                                Id: 'JSONEditorEntry'\n                            }\n                        })\n                    } else if (!findItem('JSONEditorEntry').url.startsWith('toast://'))\n                        updateItem({\n                            title: '““””' + '📝 开始编辑'.fontcolor('#ced6e0'),\n                            url: 'toast://无法读取JSON或文件，请检查输入',\n                            extra: { Id: 'JSONEditorEntry' }\n                        })\n                }\n                putMyVar('input', input)\n                try {\n                    let Json = JSON.parse(input)\n                    updateEntry(Json && typeof Json == 'object')\n                } catch (e) {\n                    if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\n                        input = 'file://' + input\n                    updateEntry(/^(ht|f)tps?:\\/\\/|^hiker:\\/\\/(?!files)/.test(input) || fileExist(input), true)\n                }\n            }, history)\n        }\n    }, {\n        title: '📂 选择文件',\n        url: 'hiker://page/fileSelect#noRecordHistory#'\n    }, {\n        title: '““””' + '📝 开始编辑'.fontcolor('#ced6e0'),\n        url: 'toast://无法读取JSON或文件，请检查输入',\n        extra: { Id: 'JSONEditorEntry' }\n    }, { col_type: 'big_blank_block' }, {\n        title: '历史记录 '.fontcolor('#000').bold().big() + '/ 帮助'.small(),\n        img: 'https://img.icons8.com/?format=png&id=RxcXMfxfvpv7&size=64',\n        url: $(['★ 使用帮助 ★', '清空历史记录', '删除单项记录']).select(() => {\n            switch (input) {\n                case '★ 使用帮助 ★':\n                    return 'https://www.yuque.com/dynamith/hikerdoc/jsoneditor_index'\n                case '清空历史记录':\n                    return $('确定要清空历史记录吗？').confirm(() => {\n                        deleteFile('history')\n                        refreshPage(false)\n                    })\n                case '删除单项记录':\n                    let code = function(his, code) {\n                        return $(['““””' + '应用并返回'.bold().fontcolor('#f44236')].concat(his), 1).select((his, code) => {\n                            if (input == '““””' + '应用并返回'.bold().fontcolor('#f44236')) {\n                                saveFile('history', JSON.stringify(his))\n                                refreshPage(false)\n                                return\n                            } else {\n                                his.splice(his.indexOf(input), 1)\n                                return code(his, code)\n                            }\n                        }, his, code)\n                    }\n                    return code(JSON.parse(readFile('history') || '[]'), code)\n            }\n        }),\n        col_type: 'text_icon'\n    }, { col_type: 'line' }]\nhistory.forEach((v) => {\n    let Hash = md5(v)\n    el.push({\n        title: v,\n        url: $('#noLoading#').lazyRule((url, Hash) => {\n            let Json = JSON.parse(request(url))\n            if (!fileExist('JSON_' + Hash))\n                saveFile('JSON_' + Hash, JSON.stringify({ this: Json }), 0)\n            return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\n        }, v, Hash),\n        extra: {\n            Path: ['this'],\n            Hash: Hash,\n            File: v,\n            newWindow: true,\n            windowId: Hash\n        },\n        col_type: 'text_center_1'\n    })\n})\nsetResult(el)\n","searchFind":"","search_url":"","group":"④工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"/*\n*/","pages":"[{\"col_type\":\"scroll_button\",\"name\":\"内容载入\",\"path\":\"content\",\"rule\":\"js:\\neval(JSON.parse(request('hiker://page/functions')).rule)\\nlet { Path, Hash, File } = MY_PARAMS,\\nAllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\\n    Json = JSONRecur(AllJson, Path),\\n    Type = Object.prototype.toString.call(Json).slice(8, -1),\\n    exPath = 'hiker://files/tmp/JSONEditor_'\\nif (!File) {\\n    setPageTitle('JSON编辑器')\\n    exPath += $.dateFormat(new Date(), 'yyyyMMddHHmmssS') + '.json'\\n} else {\\n    let exName = File.split('?')[0].split('#')[0].split('/')\\n    exName = exName[exName.length - 1]\\n    setPageTitle(exName)\\n    if (Path.length > 1) {\\n        exPath += $.dateFormat(new Date(), 'yyyyMMddHHmmssS') + '.json'\\n    } else if (/^hiker:\\\\/\\\\/(?!files)/.test(File)) {\\n        setPageTitle(File)\\n        exPath += File.replace('://', '_')\\n    } else if (/^(ht|f)tps?:\\\\/\\\\//.test(File)) {\\n        exPath += exName\\n    } else exPath = File\\n}\\nif (Path.length == 1)\\n    addListener('onClose', $.toString((Hash) => {\\n        clearMyVar('search_' + Hash)\\n        deleteFile('JSON_' + Hash)\\n        switch (getMyVar('prePage')) {\\n            case 'home':\\n                refreshPage(false)\\n                break\\n            case 'interface':\\n                back(false)\\n                break\\n            default:\\n        }\\n    }, Hash))\\nelse addListener('onClose', 'refreshPage(false)')\\nlet el = [{\\n    title: '““””' + (Path.join('.') + ': ').bold().fontcolor('#409eff') + '[' + Type + '] 🖋️',\\n    url: $(\\n        ['Object', 'Array', 'String', 'Number', 'Boolean', 'Null'],\\n        2, '更改数据类型'\\n    ).select((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n        JSONRecur(AllJson, Path, (self) => typeConvert(self, input))\\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n        refreshPage(false)\\n    }, Path, Hash),\\n    col_type: 'text_1',\\n    extra: { lineVisible: false },\\n}, {\\n    title: '✏️修改',\\n    url: 'hiker://page/editor#noRefresh#',\\n    extra: { Path: Path, Hash: Hash }\\n}, null, null, {\\n    title: '📤导出',\\n    url: $(exPath, '导出文件本地路径\\\\n置空则写入剪切板').input((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\\n            Json = typeConvert(JSONRecur(AllJson, Path), 'String')\\n        if (input) {\\n            if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\\n                input = 'file://' + input\\n            writeFile(input, Json)\\n            return 'toast://已导出至' + input\\n        } else return 'copy://' + Json\\n    }, Path, Hash)\\n}, null, {\\n    title: '📦更多',\\n    url: $('self=', '用JS对本级内容self进行自定义修改\\\\n大佬级操作，不懂JS慎用').input((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n        JSONRecur(AllJson, Path, new Function('self', input + ';return self'))\\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n        refreshPage(false)\\n    }, Path, Hash)\\n}, { col_type: 'line_blank' }]\\n\\nif (Type == 'Object' || Type == 'Array') {\\n    eval(JSON.parse(request('hiker://page/' + Type)).rule)\\n} else {\\n    Json = String(Json)\\n    if (Json.length > 9999) Json = Json.slice(0, 9999) + '\\\\n\\\\n......'\\n    el.push({\\n        title: Json,\\n        col_type: 'long_text',\\n        extra: { textSize: 12 }\\n    })\\n}\\nsetResult(el)\\n\"},{\"col_type\":\"movie_3\",\"name\":\"对象解析\",\"path\":\"Object\",\"rule\":\"el[2] = {\\n    title: '💠新增',\\n    url: $('', '新增的键名\\\\n不能与对象中已有键名重复').input((Path, Hash, File) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\\n            Json = JSONRecur(AllJson, Path)\\n        if (Object.hasOwn(Json, input))\\n            return `toast://无法新增，对象中已有[${input}]键`\\n        updateItem('JSONEditorNewItem' + Hash, { extra: { Path: Path.concat(input), Hash: Hash, File: File } })\\n        JSONRecur(AllJson, Path, (self) => (self[input] = null, self))\\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n        return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\\n    }, Path, Hash, File),\\n    extra: { Id: 'JSONEditorNewItem' + Hash }\\n}\\nlet searchKey = JSON.parse(getMyVar('search_' + Hash, '{}'))[Path.join('.')]\\nif (searchKey) el[3] = {\\n    title: `🔍查找[${searchKey}]`,\\n    url: $(['✂  应用过滤', '✗  结束查找', '✎  更改查找'], 1).select((Path, Hash, searchKey) => {\\n        switch (input.slice(3)) {\\n            case '应用过滤':\\n                return $('应用过滤会将查找结果写入缓存\\\\n删除不符合条件的项目\\\\n确定要继续吗？')\\n                    .confirm((Path, Hash, searchKey) => {\\n                        eval(JSON.parse(request('hiker://page/functions')).rule)\\n                        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n                        JSONRecur(AllJson, Path, (self) => {\\n                            for (let k in self) {\\n                                let v = self[k],\\n                                    vStr = typeConvert(v, 'String'),\\n                                    vType = Object.prototype.toString.call(v).slice(8, -1)\\n                                if (searchKey.startsWith('>>')) {\\n                                    if (!objSearchParse(searchKey.slice(2), k, vStr, vType))\\n                                        delete self[k]\\n                                } else if (!k.includes(searchKey) && !vStr.includes(searchKey))\\n                                    delete self[k]\\n                            }\\n                            return self\\n                        })\\n                        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n                        Path = Path.join('.')\\n                        setSKey(undefined)\\n                    }, Path, Hash, searchKey)\\n            case '更改查找':\\n                return $(searchKey,\\n                    '查找关键字\\\\n普通模式下为键名或键值的一部分\\\\n以>>开头启用高级模式\\\\n详见使用帮助'\\n                ).input((Path, Hash) => {\\n                    eval(JSON.parse(request('hiker://page/functions')).rule)\\n                    setSKey(input)\\n                }, Path.join('.'), Hash)\\n            case '结束查找':\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                Path = Path.join('.')\\n                setSKey(undefined)\\n        }\\n    }, Path, Hash, searchKey)\\n}\\nelse el[3] = {\\n    title: '🔍查找',\\n    url: $(searchKey || '',\\n        '查找关键字\\\\n普通模式下为键名或键值的一部分\\\\n以>>开头启用高级模式\\\\n详见使帮助子页面'\\n    ).input((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        setSKey(input)\\n    }, Path.join('.'), Hash)\\n}\\nel[5] = {\\n    title: '📥导入',\\n    url: $('hiker://files/', '要导入的对象JSON或文件URL\\\\n键名相同的会被覆盖').input((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        try {\\n            input = JSON.parse(input)\\n        } catch (e) {\\n            if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\\n                input = 'file://' + input\\n            input = JSON.parse(request(input))\\n        }\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n        JSONRecur(AllJson, Path, (self) => Object.assign(self, input))\\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n        refreshPage(false)\\n    }, Path, Hash)\\n}\\nfor (let k in Json) {\\n    let v = Json[k],\\n        vStr = typeConvert(v, 'String'),\\n        vType = Object.prototype.toString.call(v).slice(8, -1)\\n    if (searchKey) {\\n        if (searchKey.startsWith('>>')) {\\n            if (!objSearchParse(searchKey.slice(2), k, vStr, vType))\\n                continue\\n        } else if (!k.includes(searchKey) && !vStr.includes(searchKey))\\n            continue\\n    }\\n    el.push({\\n        title: `““””${k.bold()}: [${vType}]`,\\n        desc: vStr.slice(0, 200),\\n        col_type: 'text_1',\\n        extra: {\\n            Path: Path.concat(k),\\n            Hash: Hash,\\n            File: File\\n        },\\n        url: $(['≡  展开键值', '✎  更改键名', '✗  删除项目', '※  复制键名', '※  复制键值'], 1, k).select((k, Path, Hash) => {\\n            eval(JSON.parse(request('hiker://page/functions')).rule)\\n            return objItemSel(input, k)\\n        }, k, Path, Hash)\\n    })\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"数组解析\",\"path\":\"Array\",\"rule\":\"el[2] = {\\n    title: '💠新增',\\n    url: $('#noLoading#').lazyRule((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n        JSONRecur(AllJson, Path, (self) => (self.push(null), self))\\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n        return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\\n    }, Path, Hash),\\n    extra: { Path: Path.concat(Json.length), Hash: Hash }\\n}\\nlet searchKey = JSON.parse(getMyVar('search_' + Hash, '{}'))[Path.join('.')]\\nif (searchKey) el[3] = {\\n    title: `🔍查找[${searchKey}]`,\\n    url: $(['✂  应用过滤', '✗  结束查找', '✎  更改查找'], 1).select((Path, Hash, searchKey) => {\\n        switch (input.slice(3)) {\\n            case '应用过滤':\\n                return $('应用过滤会将查找结果写入缓存\\\\n删除不符合条件的项目\\\\n确定要继续吗？')\\n                    .confirm((Path, Hash, searchKey) => {\\n                        eval(JSON.parse(request('hiker://page/functions')).rule)\\n                        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n                        JSONRecur(AllJson, Path, (self) => self.filter((v, i, arr) => {\\n                            let vStr = typeConvert(v, 'String'),\\n                                vType = Object.prototype.toString.call(v).slice(8, -1),\\n                                vLabel = ''\\n                            if (vType == 'Object') {\\n                                vLabel = v.title || v.name || v.key || v.id || v.label\\n                                if (typeof vLabel != 'string') vLabel = ''\\n                            }\\n                            if (searchKey.startsWith('>>')) {\\n                                if (!arrSearchParse(searchKey.slice(2), i, vLabel, vStr, vType, arr.length))\\n                                    return false\\n                            } else if (!vStr.includes(searchKey))\\n                                return false\\n                            return true\\n                        }))\\n                        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n                        Path = Path.join('.')\\n                        setSKey(undefined)\\n                    }, Path, Hash, searchKey)\\n            case '更改查找':\\n                return $(searchKey,\\n                    '查找关键字\\\\n普通模式下为数组内容的一部分\\\\n以>>开头启用高级模式\\\\n详见使帮助子页面'\\n                ).input((Path, Hash) => {\\n                    eval(JSON.parse(request('hiker://page/functions')).rule)\\n                    setSKey(input)\\n                }, Path.join('.'), Hash)\\n            case '结束查找':\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                Path = Path.join('.')\\n                setSKey(undefined)\\n        }\\n    }, Path, Hash, searchKey)\\n}\\nelse el[3] = {\\n    title: '🔍查找',\\n    url: $(searchKey || '',\\n        '查找关键字\\\\n普通模式下为数组内容的一部分\\\\n以>>开头启用高级模式\\\\n详见使用帮助'\\n    ).input((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        setSKey(input)\\n    }, Path.join('.'), Hash)\\n}\\nel[5] = {\\n    title: '📥导入',\\n    url: $('hiker://files/', '要导入的数组JSON或文件URL\\\\n新数组会从末尾连接').input((Path, Hash) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        try {\\n            input = JSON.parse(input)\\n        } catch (e) {\\n            if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\\n                input = 'file://' + input\\n            input = JSON.parse(request(input))\\n        }\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n        JSONRecur(AllJson, Path, (self) => self.concat(input))\\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n        refreshPage(false)\\n    }, Path, Hash)\\n}\\nfor (let i = 0; i < Json.length; i++) {\\n    let v = Json[i],\\n        vStr = typeConvert(v, 'String'),\\n        vType = Object.prototype.toString.call(v).slice(8, -1),\\n        vLabel = ''\\n    if (vType == 'Object') {\\n        vLabel = v.title || v.name || v.key || v.id || v.label\\n        if (typeof vLabel != 'string') vLabel = ''\\n    }\\n    if (searchKey) {\\n        if (searchKey.startsWith('>>')) {\\n            if (!arrSearchParse(searchKey.slice(2), i, vLabel, vStr, vType, Json.length))\\n                continue\\n        } else if (!vStr.includes(searchKey))\\n            continue\\n    }\\n    el.push({\\n        title: `““””${i.toString().bold()}: ${vLabel} [${vType}]`,\\n        desc: vStr.slice(0, 200),\\n        col_type: 'text_1',\\n        extra: {\\n            Path: Path.concat(i),\\n            Hash: Hash,\\n            File: File\\n        },\\n        url: $(['≡  展开内容', '⇵  移动位置', '✗  删除项目', '※  复制内容'], 1, i + (vLabel && ': ') + vLabel).select((i, Path, Hash) => {\\n            eval(JSON.parse(request('hiker://page/functions')).rule)\\n            return arrItemSel(input, i)\\n        }, i, Path, Hash)\\n    })\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"公共函数\",\"path\":\"functions\",\"rule\":\"function JSONRecur(json, path, value) {\\n    if (path.length == 1) {\\n        if (value === undefined) {\\n            return json[path[0]]\\n        } else if (typeof value == 'function') {\\n            json[path[0]] = value(json[path[0]])\\n        } else json[path[0]] = value\\n    } else {\\n        return JSONRecur(json[path[0]], path.slice(1), value)\\n    }\\n}\\n\\nfunction typeConvert(value, type) {\\n    let vType = Object.prototype.toString.call(value).slice(8, -1)\\n    switch (type) {\\n        case 'Object':\\n            switch (vType) {\\n                case 'Object':\\n                    return value\\n                case 'Array':\\n                    let obj = {}\\n                    for (let v of value) {\\n                        if (v && Object.keys(v).length == 2\\n                            && 'key' in v && 'value' in v &&\\n                            !Object.hasOwn(obj, v.key)) {\\n                            obj[v.key] = v.value\\n                        } else break\\n                    }\\n                    if (Object.keys(obj).length < value.length) {\\n                        obj = Object.assign({}, value)\\n                        for (let k in obj) if (obj[k] === null) delete obj[k]\\n                    }\\n                    return obj\\n                case 'String':\\n                    try {\\n                        return typeConvert(JSON.parse(value), type)\\n                    } catch (e) { return {} };\\n                default:\\n                    return {}\\n            };\\n        case 'Array':\\n            switch (vType) {\\n                case 'Object':\\n                    let keys = Object.keys(value), length = 0\\n                    for (let k of keys)\\n                        if (/^\\\\d+$/.test(k)) {\\n                            k = Number(k) + 1\\n                            if (length < k) length = k\\n                        } else {\\n                            length = 0\\n                            break\\n                        }\\n                    return length > 0\\n                        ? Array.from(Object.assign(value, { length: length }))\\n                        : keys.map((k) => ({ key: k, value: value[k] }))\\n                case 'Array':\\n                    return value\\n                case 'String':\\n                    try {\\n                        return typeConvert(JSON.parse(value), type)\\n                    } catch (e) { return [] };\\n                default:\\n                    return []\\n            };\\n        case 'String':\\n            switch (vType) {\\n                case 'Object':\\n                case 'Array':\\n                    return JSON.stringify(value)\\n                default:\\n                    return String(value)\\n            };\\n        case 'Number':\\n            return Number(value) || 0\\n        case 'Boolean':\\n            try {\\n                while (typeof value == 'string')\\n                    value = JSON.parse(value)\\n            } catch (e) {}\\n            return Boolean(value)\\n        case 'Null':\\n            return null\\n    }\\n}\\n\\nfunction objItemSel(input, k) {\\n    switch (input.slice(3)) {\\n        case '展开键值':\\n            return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\\n        case '更改键名':\\n            return $(k, '更改的键名\\\\n不能与对象中已有键名重复').input((k, Path, Hash) => {\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\\n                    Json = JSONRecur(AllJson, Path)\\n                if (Object.hasOwn(Json, input))\\n                    return `toast://无法更改，对象中已有[${input}]键`\\n                JSONRecur(AllJson, Path, (self) => (self[input] = self[k], delete self[k], self))\\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n                refreshPage(false)\\n            }, k, Path, Hash)\\n        case '删除项目':\\n            return $(`确定要删除键名[${k}]的项目吗？`).confirm((k, Path, Hash) => {\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n                JSONRecur(AllJson, Path, (self) => (delete self[k], self))\\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, k, Path, Hash)\\n        case '复制键名':\\n            return 'copy://' + k\\n        case '复制键值':\\n            return $('#noLoading#').lazyRule((Path, Hash) => {\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n                return 'copy://' + typeConvert(JSONRecur(AllJson, Path), 'String')\\n            }, Path.concat(k), Hash)\\n    }\\n}\\n\\nfunction arrItemSel(input, i) {\\n    switch (input.slice(3)) {\\n        case '展开内容':\\n            return 'hiker://page/content#noRefresh##noHistory##noRecordHistory#'\\n        case '移动位置':\\n            return $(String(i), '要移动到的位置序号\\\\n置空则移至末尾').input((i, Path, Hash) => {\\n                if (input === '') input = Infinity\\n                else {\\n                    input = parseInt(input, 10)\\n                    if (isNaN(input)) return 'toast://请正确输入数字序号'\\n\\t\\t\\t\\t}\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n                JSONRecur(AllJson, Path, (self) => (self.splice(input, 0, self.splice(i, 1)[0]), self))\\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n                refreshPage(false)\\n            }, i, Path, Hash)\\n        case '删除项目':\\n            return $(`确定要删除序号[${i}]的内容吗？`).confirm((index, Path, Hash) => {\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n                JSONRecur(AllJson, Path, (self) => (self.splice(index, 1), self))\\n                saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, i, Path, Hash)\\n        case '复制内容':\\n            return $('#noLoading#').lazyRule((Path, Hash) => {\\n                eval(JSON.parse(request('hiker://page/functions')).rule)\\n                let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n                return 'copy://' + typeConvert(JSONRecur(AllJson, Path), 'String')\\n            }, Path.concat(i), Hash)\\n    }\\n}\\n\\nfunction setSKey(searchKey) {\\n    let search = JSON.parse(getMyVar('search_' + Hash, '{}'))\\n    search[Path] = searchKey\\n    putMyVar('search_' + Hash, JSON.stringify(search))\\n    refreshPage(false)\\n}\\n\\nfunction objSearchParse(searchKey, k, vStr, vType) {\\n    return searchKey.split('|').some((OR) => {\\n        return OR.split('&').every((AND) => {\\n            let [mode, cont] = AND.split('@')\\n            switch (mode) {\\n                case 'key':\\n                    return k.includes(cont)\\n                case 'value':\\n                    return vStr.includes(cont)\\n                case 'type':\\n                    return vType == cont\\n            }\\n        })\\n    })\\n}\\nfunction arrSearchParse(searchKey, i, vLabel, vStr, vType, length) {\\n    return searchKey.split('|').some((OR) => {\\n        return OR.split('&').every((AND) => {\\n            let [mode, cont] = AND.split('@')\\n            switch (mode) {\\n                case 'range':\\n                    let [st, ed] = cont.split('~')\\n                        .map((v) => {\\n                            v = parseInt(v)\\n                            if (v < 0) v += length\\n                            return v\\n                        })\\n                    return st <= i && i <= ed\\n                case 'label':\\n                    return vLabel.includes(cont)\\n                case 'value':\\n                    return vStr.includes(cont)\\n                case 'type':\\n                    return vType == cont\\n            }\\n        })\\n    })\\n}\\n\"},{\"col_type\":\"text_center_1\",\"name\":\"对外接口\",\"path\":\"interface\",\"rule\":\"js:\\n/*\\n入口示例：\\n{ url: 'hiker://page/interface#noRefresh##noHistory##noRecordHistory#?rule=JSON编辑器', extra: { Json: JSON对象或字符串或文件URL } }\\n{ url: 'hiker://page/interface#noRefresh##noHistory##noRecordHistory#?rule=JSON编辑器&Json='+base64Encode(JSON字符串或文件URL)) }\\n*/\\nsetPageTitle('JSON编辑器')\\nputMyVar('prePage', 'interface')\\naddListener('onClose', 'clearMyVar(\\\"prePage\\\")')\\nlet el = [],\\n    input = MY_PARAMS.Json || base64Decode(getParam('Json')),\\n    Hash = md5(input), Json, File\\nif (typeof Json != 'object') try {\\n    Json = JSON.parse(input)\\n} catch (e) {\\n    if (input.startsWith('/storage/') || input.startsWith('/sdcard/'))\\n        input = 'file://' + input\\n    Json = request(input)\\n    File = input\\n    try { Json = JSON.parse(Json) } catch (e) {}\\n}\\nif (Json && typeof Json == 'object') {\\n    if (!fileExist('JSON_' + Hash))\\n        saveFile('JSON_' + Hash, JSON.stringify({ this: Json }), 0)\\n    Json = JSON.stringify(Json, null, 2)\\n    el.push({\\n        title: '““””<b>开始编辑JSON',\\n        desc: '““””<b>预览',\\n        url: 'hiker://page/content#noRefresh##noHistory##noRecordHistory#',\\n        extra: {\\n            Path: ['this'],\\n            Hash: Hash,\\n            File: File,\\n            newWindow: true,\\n            windowId: Hash,\\n            lineVisible: false\\n        }\\n    })\\n} else el.push({\\n    title: '““””<b>JSON或文件解析错误，请检查输入',\\n    desc: '““””<b>预览',\\n    url: File,\\n    extra: { lineVisible: false }\\n})\\nif (File && fileExist(File)) el.push({\\n    title: '视界编辑器',\\n    url: 'editFile://' + File,\\n    col_type: 'text_2'\\n}, {\\n    title: '外部打开...',\\n    url: 'openFile://' + File,\\n    col_type: 'text_2'\\n})\\nif (Json.length > 9999) Json = Json.slice(0, 9999) + '\\\\n\\\\n......'\\nel.push({ col_type: 'line_blank' }, {\\n    title: Json,\\n    col_type: 'long_text',\\n    extra: { textSize: 12 }\\n})\\nsetResult(el)\"},{\"col_type\":\"text_2\",\"name\":\"编辑界面\",\"path\":\"editor\",\"rule\":\"js:\\neval(JSON.parse(request('hiker://page/functions')).rule)\\nlet { Path, Hash } = MY_PARAMS,\\n    AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}'),\\n    Json = JSONRecur(AllJson, Path),\\n    Type = Object.prototype.toString.call(Json).slice(8, -1)\\nsetPageTitle(Path.join('.'))\\nputMyVar('edit_' + Hash, typeConvert(Json, 'String'))\\naddListener('onClose', 'clearMyVar(\\\"edit_' + Hash + '\\\")')\\nsetResult([{\\n    title: '♻️  撤销修改',\\n    url: '#noLoading#@lazyRule=.js:refreshPage(false);\\\"hiker://empty\\\"'\\n}, {\\n    title: '““””<b>💾&nbsp 应用并返回',\\n    url: $('#noLoading#').lazyRule((Path, Hash, Type) => {\\n        eval(JSON.parse(request('hiker://page/functions')).rule)\\n        let AllJson = JSON.parse(readFile('JSON_' + Hash, 0) || '{}')\\n        JSONRecur(AllJson, Path, typeConvert(getMyVar('edit_' + Hash, ''), Type))\\n        saveFile('JSON_' + Hash, JSON.stringify(AllJson), 0)\\n        back(true)\\n        return 'hiker://empty'\\n    }, Path, Hash, Type)\\n}, {\\n    col_type: 'input',\\n    extra: {\\n        type: 'textarea',\\n        height: 15,\\n        highlight: true,\\n        defaultValue: getMyVar('edit_' + Hash, ''),\\n        onChange: 'putMyVar(\\\"edit_' + Hash + '\\\", input)'\\n    }\\n}])\\n\"},{\"col_type\":\"movie_3\",\"name\":\"文件选择\",\"path\":\"fileSelect\",\"rule\":\"js:\\naddListener('onClose', 'refreshPage()')\\nconst requireUrl = 'http://hiker.nokia.press/hikerule/rulelist.json?id=5099',\\n    initialPath = getPath('hiker://files/').slice(7)\\nrequire(requireUrl).fileSelection({\\n    callback: $.toString((hikerPath) => {\\n        if (PATH.startsWith(hikerPath))\\n            PATH = 'hiker://files/' + PATH.slice(hikerPath.length)\\n        putMyVar('input', PATH)\\n        return true\\n    }, initialPath),\\n    initialPath: initialPath,\\n    rootDirPath: \\\"/storage/emulated/0/\\\",\\n    requireUrl: requireUrl\\n})\\n\"}]","proxy":"","icon":"https://img.icons8.com/?format=png&id=6or30FVdPylJ&size=96"}