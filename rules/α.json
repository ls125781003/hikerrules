{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"二级","path":"er","rule":"js:\n/*ver 20230930 2.0\n */\nconst customs = {};\n\n//预设\nfunction customData(custom) {\n  Object.keys(custom).forEach((k) => {\n    customs[k] = custom[k];\n  })\n}\n\n\nlet Erji = {\n  通免: $('').lazyRule(() => {\n    try {\n      var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n      var url = html.url\n      if (html.encrypt == '1') {\n        url = unescape(url);\n      } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n      }\n      if (/m3u8|mp4/.test(url)) {\n        return url\n      } else {\n        return \"video://\" + input\n      }\n    } catch (e) {\n      return \"video://\" + input\n    }\n  }),\n  evalJSRule: function (item, jsRule) {\n    let rule = jsRule.replace(\"@js:\", \"\");\n    rule = rule.trim();\n    //log($.stringify(rule))\n    let input = item;\n    if (rule.startsWith(\"(\")) {\n      eval(\"result = \" + rule);\n    } else {\n      /**\n      * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\n      */\n      eval(\"result = \" + \"(() => {\" + rule + \"})()\");\n    }\n    return result || \"\";\n  },\n  updataRule: function (rule, headers) {\n    headers = headers != undefined ? headers : {};\n    setLastChapterRule('js:' + $.toString((url, rule, headers) => {\n      var html = fetch(url, headers);\n      setResult(eval(rule))\n    }, MY_URL, rule, headers))\n  },\n  updataFun: function (method, params) {\n    var methodArgs = this.getArgs(method);\n    var args = methodArgs.map(function(arg) {\n      return params[arg];\n    });\n    //method.apply(null, args);\n    setLastChapterRule('js:' + $.toString((method,args) => {\n      method.apply(null, args);\n    }, method,args))\n  },\n  updata:function(args1,args2){\n      if(args1.constructor==Function){\n        return this.updataFun(args1,args2);\n      }else{\n        return this.updataRule(args1,args2);\n      }\n  },\n  getArgs:function(func){\n    var args = func.toString().match(/function\\s.*?\\(([^)]*)\\)/)[1];\n    return args.split(\",\").map(function (arg) {\n      return arg.replace(/\\/\\*.*\\*\\//, \"\").trim();\n    }).filter(function (args) {\n      return args;\n    });\n  },\n  maxList: (arr) => { \n    return arr.reduce((acc, curr) => (curr.length > acc.length ? curr : acc), []) \n  },\n  close: function (list, sorts) {\n    addListener('onClose', $.toString((list, sorts) => {\n      list.map(x => {\n        clearMyVar('er_' + x + 'fold');\n        clearMyVar('er_' + x);\n      })\n      for (let i = 0; i < sorts; i++) {\n        clearMyVar('playlist_' + i);\n      }\n      clearMyVar('er_playlists');\n    }, list, sorts))\n  },\n  dataConvert: function (data) {\n    var newclslist = data.map(function (obj) {\n      var newObj = Object.assign({}, obj);\n      if (newObj.hasOwnProperty('type')) {\n        newObj.col_type = newObj.type;\n      }\n      return newObj;\n    });\n    return newclslist;\n  },\n  preLoad: function (func) {\n    let myfunc = null\n    if (func != undefined && func.constructor == Function) {\n      myfunc = func\n    }\n    $.extend({\n      dataConvert: this.dataConvert,\n      msm: Methods.MultiSelectMode,\n      func: myfunc,\n    })\n  },\n  small: function (str, color,h) {\n    h=h==undefined?true:h;\n    return (h?'““””':'')+'<small><font color=\"' + (color || '') + '\">' + str + '</font></small>';\n  },\n  声明: function () {\n    d.push({\n      title: this.small('以上数据来源于网络，如您喜欢，请支持官方！', '#871F78'),\n      desc: this.small('此规则仅限学习交流使用，请于导入后24小时内删除，任何组织或个人不得以任何方式方法传播此规则的整体或部分！', '#F20C00'),\n      url: 'hiker://empty',\n      col_type: 'text_center_1'\n    });\n  },\n  substr: function (str, maxLength) {\n    let len = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str.charCodeAt(i) > 255) {\n        len += 2;\n      } else {\n        len++;\n      }\n      if (len > maxLength) {\n        return str.slice(0, i) + '...';\n      }\n    }\n    return str;\n  },\n  setDesc: function (desc, num) {\n    var custom = this.getPreset();\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\n    if (desc.replace(/(<br>|\\s+)/g, '').length == 0) {\n      return\n    }\n    var info = storage0.getMyVar('er_info', '{}')\n    if (info['desc'] != undefined) {\n      info['desc'] = info['desc'] + ' 简介:' + desc;\n      storage0.putMyVar('er_info', info);\n    }\n\n    const mark = 'desc';\n    num = typeof (num) == 'undefined' ? 100 : num\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\n    desc = desc.replace(/'/g, \"&#39;\");\n    desc = desc.replace(/\\r\\n/g, \"<br>\");\n\n\n    let sdesc = this.substr(desc, num);\n\n    var colors = {\n      show: custom.简介展开,\n      hide: custom.简介收起\n    }\n\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\n      var show = storage0.getItem(m, '0');\n      var title = findItem('desc').title;\n      var re = /(<\\/small><br>.*?>).+/g;\n      var exp = '展开:';\n      var ret = '收起:';\n      if (show == '1') {\n        updateItem('desc', {\n          title: title\n            .replace(ret, exp)\n            .replace(re, '$1' + sdc + '</small>')\n            .replace(/(<\\/small><br>\\<font color=\").*?(\">)/, '$1' + cs.hide + '$2')\n\n        })\n        storage0.setItem(m, '0');\n      } else {\n        updateItem('desc', {\n          title: title\n            .replace(exp, ret)\n            .replace(re, '$1' + dc + '</small>')\n            .replace(/(<\\/small><br>\\<font color=\").*?(\">)/, '$1' + cs.show + '$2')\n        })\n        storage0.setItem(m, '1');\n      }\n      return `hiker://empty`\n    }, desc, sdesc, mark, colors)\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\n    d.push({\n      title: '' + '<b><font color=\"#098AC1\">∷剧情简介\t</font></b>' + \"<small><a style='text-decoration: none;' href='\" + lazy + \"'>\" + sc + '</a></small><br><font color=\"' + cs + '\">' + `${dc}` + '</small>',\n      col_type: 'rich_text',\n      extra: {\n        id: 'desc',\n        lineSpacing: 6,\n        textSize: 15,\n        lineVisible: true,\n      }\n    })\n  },\n  setDesc2: function (desc, num) {\n    var custom = this.getPreset();\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\n    if (desc.replace(/(<br>|\\s+)/g, '').length == 0) {\n      return\n    }\n    var info = storage0.getMyVar('er_info', '{}')\n    if (info['desc'] != undefined) {\n      info['desc'] = info['desc'] + ' 简介:' + desc;\n      storage0.putMyVar('er_info', info);\n    }\n\n    const mark = 'desc';\n    num = typeof (num) == 'undefined' ? 100 : num\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\n    desc = desc.replace(/'/g, \"&#39;\");\n    desc = desc.replace(/\\r\\n/g, \"<br>\");\n\n    let sdesc = this.substr(desc, num);\n\n    var colors = {\n      show: custom.简介展开,\n      hide: custom.简介收起\n    }\n    d.push({\n      title: '剧情简介<span style=\"color:#ff0000;\"><b><small>' + (storage0.getItem(mark, '0')=='0'?'展开':'收起') + '</small></b></span>:',\n      col_type: 'avatar',\n      img: 'https://hikerfans.com/tubiao/system/75.png',\n      url: $('#noLoading#').lazyRule((mark,dc, sdc,cs) => {\n        var ds = storage0.getItem(mark, '0');\n        var title = findItem('dshow').title;\n        var dtitle = findItem('dcontent').title;\n        if (ds == '0') {\n          storage0.setItem(mark, '1')\n          updateItem('dcontent', {\n            title: dtitle.replace(/\\>.*?\\</,'>'+dc+'<')\n            .replace(/(color=\").*?(\")/,'$1'+cs.show+'$2')\n          });\n          updateItem('dshow', {\n            title: title.replace('展开', '收起')                        \n          });\n\n\n        } else {\n          storage0.setItem(mark, '0')\n          updateItem('dcontent', {\n            title: dtitle.replace(/\\>.*?\\</,'>'+sdc+'<')\n            .replace(/(color=\").*?(\")/,'$1'+cs.hide+'$2')\n          });\n          updateItem('dshow', {\n            title: title.replace('收起', '展开')                        \n          });\n        }\n        return 'hiker://empty'\n      },mark, desc, sdesc,colors),\n      extra: {\n        id: 'dshow',\n      }\n    })\n    var sc=storage0.getItem(mark, '0') == '0' ? sdesc.fontcolor(colors.hide) : desc.fontcolor(colors.show);\n    d.push({\n      title:sc,\n      col_type: 'rich_text',\n      extra: {\n        id: 'dcontent',\n        lineSpacing: 6,\n        textSize: 15,\n        lineVisible: true,\n      }\n    })\n  },\n  strConvert:function(arr, sp) {\n      sp = sp != undefined ? sp : '/';\n      var reg = new RegExp(sp);\n\n      return arr.map(x => {\n        str = x;\n        if (reg.test(str)) {\n          str = str.split(sp).map((val, index) => (index === 0 ? '' : '') + val).slice(0, 5).join(' ').replace(/ $/, '');\n        }\n        return str\n      })\n  },\n  setContent: function (obj) {\n    //log(obj)\n    var custom = this.getPreset();\n    var num = obj.num != undefined ? obj.num : 100;\n    var contents = obj.main;\n    if (contents.constructor == String) {\n      contents = contents.split('\\n');\n    }\n    var sortOrder = obj.sort ? obj.sort : [];\n    var filterlist = obj.filist ? obj.filist : [];\n    var img = obj.img;\n    var texts = contents.map(x => {\n      if (x.includes('href')) {\n        var list = pdfa(x, 'body&&a').map(k => pdfh(k, 'Text')).slice(0, 5).join(' ');\n        if (list == '') {\n          return pdfh(x, 'Text');\n        } else {\n          return pdfh(x, ':matchText&&Text') + list;\n        }\n      }\n      return pdfh(x, 'Text');\n    });\n    var array = texts.sort((a, b) => {\n      const indexA = sortOrder.indexOf(a.substr(0, 2));\n      const indexB = sortOrder.indexOf(b.substr(0, 2));\n      return indexA - indexB;\n    })\n    var regex = new RegExp('(' + sortOrder.join('|') + ')');\n    array = array.filter(function (item) {\n      return regex.test(item);\n    });\n\n    var fireg = new RegExp('(' + filterlist.join('|') + ')');\n    if (filterlist.length > 0) {\n      array = array.filter(function (item) {\n        return !fireg.test(item);\n      });\n    }\n    //log(array)\n\n    //array = sortOrder.length==0?array:this.strConvert(array);\n    array = this.strConvert(array, obj.sp);\n\n    if (array.length > 6) {\n      array = array.slice(0, 6);\n    }\n\n    var titles = [];\n    var descs = [];\n\n    switch (array.length) {\n      case 2:\n        titles = array[0];\n        descs = array[1];\n        break;\n      case 3:\n        titles = array.slice(0, 1);\n        descs = array.slice(1);\n        break;\n      case 4:\n      case 5:\n        titles = array.slice(0, 2);\n        descs = array.slice(2);\n        break;\n      case 6:\n      default:\n        titles = array.slice(0, 3);\n        descs = array.slice(3);\n        break;\n    }\n    storage0.putMyVar('er_info', {\n      desc: descs.join('\\n'),\n      img: img,\n    })\n    d.push({\n      title: '<b>'+titles[0].fontcolor(custom.标题颜色)+'</b>'+this.small( '\\n' + titles.slice(1, 3).join('\\n'), custom.描述上),\n      desc: this.small(descs.join('\\n'), custom.描述下),\n      pic_url: img + '@Referer=',\n      url: MY_URL,\n      col_type: 'movie_1_vertical_pic_blur',\n      extra: {\n        id: \"detailid\",\n        gradient: obj.渐变 ? obj.渐变 : false,\n      }\n    })\n    if (obj.desc != undefined) {\n      this.setDesc(obj.desc, num);\n    }\n  },\n  setCustom: function (obj, img,colors) {\n    var array = [];\n    if (obj.constructor == Array) {\n      array = obj;\n    }\n    var titles = [];\n    var descs = [];\n    if('titles' in obj){\n      titles=obj.titles;\n    }\n    if('descs' in obj){\n      descs=obj.descs;\n    }\n    \n    if(titles.length==0&&descs.length==0){\n    array = this.strConvert(array);\n    switch (array.length) {\n      case 2:\n        titles = array[0];\n        descs = array[1];\n        break;\n      case 3:\n        titles = array.slice(0, 1);\n        descs = array.slice(1);\n        break;\n      case 4:\n      case 5:\n        titles = array.slice(0, 2);\n        descs = array.slice(2);\n        break;\n      case 6:\n        titles = array.slice(0, 3);\n        descs = array.slice(3);\n        break;\n      }\n    }\n    \n    \n    storage0.putMyVar('er_info', {\n      desc: descs.join('\\n'),\n      img: img,\n    })\n    if (colors != undefined) {\n      var color_list=[];\n\n      for (var key in colors) {\n      var range = key.split('-');\n      var start = parseInt(range[0]);\n      var end = range[1] ? parseInt(range[1]) : start;\n      for (var i = start; i <= end; i++) {\n        color_list[i-1] = colors[key];\n        }\n      }\n\n      \n      if(color_list!=titles.length+descs.length){\n        const fillCount = (titles.length+descs.length) - color_list.length; // 需要补齐的个数\n        const filledArr = Array(fillCount).fill({}); // 生成填充数组\n        color_list=color_list.concat(filledArr);\n      }\n  \n      var midIndex = Math.floor(color_list.length / 2); \n      var firstHalf = color_list.slice(0, midIndex);\n      var secondHalf = color_list.slice(midIndex);\n           \n      function textArray(style,textArray) {\n        var list=[];\n        style.forEach((x, i) => {\n        var left = [];\n        var right = [];\n        var str = textArray[i];\n        Object.keys(x).forEach(k => {\n            switch (k) {\n                case 'color':\n                    left.push('<font color=\"' + x[k] + '\">');\n                    right.push('</font>');\n                    break;\n                default:\n                    left.push(`<${k}>`);\n                    right.push(`</${k}>`);\n                break;\n                }\n              });\n             list[i] = left.join('') + str + right.join('');\n          });\n        return list;\n      }\n      titles=textArray(firstHalf,titles);\n      descs=textArray(secondHalf,descs);\n      \n      d.push({\n        title:'““””'+titles[0]+'\\n'+titles.slice(1,3).join('\\n'),\n        desc:'““””'+descs.join('\\n'),\n        img:img+'@Referer='+img,\n        url:MY_URL,\n        col_type:'movie_1_vertical_pic_blur',\n        extra:{\n          id:\"detailid\",\n        }\n      })\n      \n    } else {\n      d.push({\n        title: titles[0] + '\\n' + this.small(titles.slice(1, 3).join('\\n')),\n        desc: this.small(descs.join('\\n')),\n        pic_url: img + '@Referer=',\n        url: MY_URL,\n        col_type: 'movie_1_vertical_pic_blur',\n        extra:{\n          id: \"detailid\",\n        }\n      })\n  }\n  },\n  isColor: function (text) {\n    const regex = /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$|^([a-z]+)$/i;\n    return regex.test(text);\n  },\n  getPreset: function (custom) {\n    if (typeof customs == 'object' && !custom) {\n      custom = customs;\n    } else {\n      custom = custom ? custom : {}\n    }\n    custom.正序颜色 = (custom.正序颜色 && this.isColor(custom.正序颜色)) ? custom.正序颜色 : '#1AAD19';\n    custom.逆序颜色 = (custom.逆序颜色 && this.isColor(custom.逆序颜色)) ? custom.逆序颜色 : '#FF0000';\n    custom.图标 = custom.图标 ? custom.图标 : 'https://i2.100024.xyz/2023/06/10/h4z627.webp';\n    custom.线路选中 = custom.线路选中 ? custom.线路选中 : '#008B8B';\n    custom.线路样式 = custom.线路样式 ? custom.线路样式 : 'scroll_button';\n    custom.分割样式 = custom.分割样式 ? custom.分割样式 : 'blank_block';\n    custom.简介展开 = custom.简介展开 ? custom.简介展开 : 'black';\n    custom.简介收起 = custom.简介收起 ? custom.简介收起 : 'grey';\n    Object.assign({}, customs, custom);\n    //log(custom)\n    return custom;\n  },\n  createPList: function (tabs, vari, shsort, custom, parse) {\n    vari = \"er_\" + vari;\n    let stabs = tabs;\n    tabs = tabs.map(x => x.title!=undefined?x.title:x);\n    var info = { parse: parse, mark: shsort };\n    if (stabs.some(x => x.hasOwnProperty('url'))) {\n      info['urls'] = stabs.map(x => x.url);\n    }\n\n    for (var i = 0; i < tabs.length; i++) {\n      var url = $('#noLoading#').lazyRule((vari, shsort, i, linec, info) => {\n\n        var lists = storage0.getMyVar(shsort + '_list', '[]');\n\n        if (getMyVar(vari + 'fold', '1') == '0') {\n          var btn = findItem(shsort + '_button');\n          var folds = ['<font color=\"#D3D3D3\">☷', '<font color=\"#FFA500\">☰'];\n          var plist = storage0.getMyVar('er_playlists', '{}');\n\n          var col = plist[shsort].col_type;\n          var cls = plist[shsort].cls;\n          var pic = plist[shsort].pic;\n          var extra = plist[shsort].extra;\n          //log(extra)\n          updateItem(btn.extra.id, {\n            title: btn.title.replace(folds[0], folds[1]),\n          })\n\n          putMyVar(vari + 'fold', '1');\n          //return 'toast://展开才能操作';\n        } else {\n          var plist = storage0.getMyVar('er_playlists', '{}');\n\n          var col = plist[shsort].col_type;\n          var cls = plist[shsort].cls;\n          var pic = plist[shsort].pic;\n          var extra = plist[shsort].extra;\n          //log(extra)\n        }\n        putMyVar(vari, i);\n\n        var xlist = lists[i];\n        if ($.func != undefined && $.func.constructor == Function) {\n          deleteItemByCls(shsort);\n          addItemAfter(shsort + '_line', {\n            col_type: 'pic_1',\n            img: 'https://img.nickyam.com/file/fe41a7a1744a3a8194df2.gif',\n            url: 'toast://loading',\n            extra: {\n              cls: shsort\n            }\n          })\n          xlist = $.func(i, info);\n          storage0.putMyVar(shsort + '_list', xlist);\n        }\n        var plays = xlist.map(x => {\n          return {\n            title: x.title,\n            url: x.url,\n            col_type: col,\n            pic: pic,\n            extra: Object.assign({}, extra, {\n              id: x.url.replace(/@lazyRule[\\s\\S]+/g, ''),\n              cls: cls,\n            })\n          }\n        })\n        if (getMyVar(shsort + '_sort') == '1') {\n          plays.reverse();\n        }\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\n        if (pcfg['单推']) {\n          updateItem(shsort + '_push', {\n            title: pcfg['obj']['单推'][0]\n          })\n          pcfg['单推'] = false;\n        }\n        if (pcfg['选推']) {\n          updateItem(shsort + '_pushs', {\n            title: pcfg['obj']['选推'][0]\n          })\n          pcfg['选推'] = false;\n        }\n        storage0.putMyVar(shsort + '_pushcfg', pcfg);\n        deleteItemByCls(shsort);\n        addItemAfter(shsort + '_line', plays);\n\n        var tabx = findItemsByCls(shsort + '_tab');\n        tabx.forEach((x, ii) => {\n          var title = x.title;\n          if (i == ii) {\n            updateItem(x.extra.id, {\n              title: title.replace(/#(\\w+)?/g, linec),\n            })\n          } else {\n            updateItem(x.extra.id, {\n              title: title.replace(/#(\\w+)?/g, '#'),\n            })\n          }\n        })\n        return 'toast://切换成功！';\n      }, vari, shsort, i, custom.线路选中, info)\n      d.push({\n        title: '““””' + (getMyVar(vari, '0') == i ? tabs[i].fontcolor(custom.线路选中) : tabs[i].fontcolor('#')),\n        url: url,\n        col_type: custom.线路样式,\n        extra: {\n          cls: shsort + '_tab',\n          id: shsort + '_tab_' + i,\n        }\n      })\n    }\n    d.push({\n      col_type: custom.分割样式,\n      extra: {\n        id: shsort + '_line',\n      }\n    })\n  },\n  pushTab: function (vari, shsort) {\n    addListener('onRefresh', $.toString((shsort) => {\n      clearMyVar(shsort + '_pushcfg');\n      clearMyVar(shsort + '_duoselect');\n    }, shsort))\n    var pobj = {\n      '单推': ['⦿单推', '<b>⦿单推</b>'.fontcolor('#00FA9A')],\n      '选推': ['☑选推', '<b>☑选推</b>'.fontcolor('#4682B4')],\n    }\n\n    d.push({\n      title: '⌘',\n      col_type: 'scroll_button',\n      url: 'hiker://empty',\n      extra: {\n        cls: shsort + '_pushtab',\n      }\n    }, {\n      title: pobj['单推'][0],\n      col_type: 'scroll_button',\n      url: $('#noLoading#').lazyRule((shsort, pobj, vari) => {\n        if (getMyVar(vari + 'fold', '1') == '0') {\n          return 'toast://展开才能操作';\n        }\n\n        var titles = pobj['单推'];\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\n        pcfg['obj'] = pobj;\n        var 单推 = pcfg['单推'] ? pcfg['单推'] : false;\n\n        if (单推) {\n          updateItem(shsort + '_push', {\n            title: titles[0],\n          })\n          pcfg['单推'] = false;\n          pcfg['playlist'].map((x) => {\n            updateItem(x.extra.id, {\n              url: x.url,\n            })\n          })\n        } else {\n          updateItem(shsort + '_push', {\n            title: '““””' + titles[1],\n          })\n          updateItem(shsort + '_pushs', {\n            title: pobj['选推'][0],\n          })\n          pcfg['单推'] = true;\n          pcfg['选推'] = false;\n          var playlist = findItemsByCls(shsort);\n          pcfg['playlist'] = playlist;\n          findItemsByCls(shsort).map(x => {\n            var dpush = {\n              name: getPageTitle(),\n              url: x.title + '$' + x.extra.id\n            }\n            updateItem(x.extra.id, {\n              url: $('').lazyRule((dpush) => {\n                return 'hiker://page/push?rule=XYQ推送&pushurl=' + encodeURIComponent(JSON.stringify(dpush));\n              }, dpush)\n            })\n          })\n        }\n        storage0.putMyVar(shsort + '_pushcfg', pcfg);\n        return 'toast://' + (!单推 ? '单推开启' : '单推关闭');\n      }, shsort, pobj, vari),\n      extra: {\n        id: shsort + '_push',\n        cls: shsort + '_pushtab',\n      }\n    }, {\n      title: pobj['选推'][0],\n      col_type: 'scroll_button',\n      url: $('#noLoading#').lazyRule((shsort, pobj, vari) => {\n        if (getMyVar(vari + 'fold', '1') == '0') {\n          return 'toast://展开才能操作';\n        }\n        var titles = pobj['选推'];\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\n        pcfg['obj'] = pobj;\n        var 选推 = pcfg['选推'] ? pcfg['选推'] : false;\n        if (选推) {\n          updateItem(shsort + '_pushs', {\n            title: titles[0],\n          })\n          pcfg['选推'] = false;\n          pcfg['playlist'].map((x) => {\n            updateItem(x.extra.id, {\n              title: x.title,\n              url: x.url,\n            })\n          })\n          updateItem(shsort + '_pushto', {\n            title: '推送本页=>TVBox',\n          });\n          clearMyVar(shsort + '_duoselect');\n        } else {\n          updateItem(shsort + '_pushs', {\n            title: '““””' + titles[1],\n          })\n          pcfg['选推'] = true;\n          pcfg['单推'] = false;\n          var playlist = findItemsByCls(shsort);\n          pcfg['playlist'] = playlist;\n          let Ids = playlist.map(it => it.extra.id);\n          Ids.forEach(x => {\n            var title = findItem(x).title;\n            updateItem(x, {\n              url: $.msm(title, x, shsort),\n            });\n          });\n          updateItem(shsort + '_push', {\n            title: pobj['单推'][0],\n          })\n          updateItem(shsort + '_pushto', {\n            title: '推送选中=>TVBox',\n          });\n        }\n        storage0.putMyVar(shsort + '_pushcfg', pcfg);\n        return 'toast://' + (!选推 ? '选推开启' : '选推关闭');\n      }, shsort, pobj, vari),\n      extra: {\n        id: shsort + '_pushs',\n        cls: shsort + '_pushtab'\n      }\n    }, {\n      title: \"推送本页=>TVBox\",\n      col_type: 'scroll_button',\n      url: $('#noLoading#').lazyRule((shsort, vari) => {\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\n        var 单推 = pcfg['单推'] ? pcfg['单推'] : false;\n        var 选推 = pcfg['选推'] ? pcfg['选推'] : false;\n        if (!单推 && !选推) {\n          var tabs = storage0.getMyVar(shsort + '_tabs', '[]');\n          try {\n            var pls = storage0.getMyVar(shsort + '_list', '[]').map(li => {\n              return li.map(item => item.title + '$' + item.url.replace(/@lazyRule[\\s\\S]+/g, '')).join('#')\n            }).join('$$$');\n          } catch (e) {\n            var pls = storage0.getMyVar(shsort + \"_list\", '[]').map(x => x.title + \"$\" + x.url.replace(/@lazyRule[\\s\\S]+/g, '')).join(\"#\");\n            var tabs = [tabs[getMyVar(vari, '0')]];\n          }\n          //log(pls)\n          //log(tabs)\n        }\n        if (选推) {\n          var pls = storage0.getMyVar(shsort + \"_duoselect\", '[]').map(x => x.title + \"$\" + x.url).join(\"#\");\n          if (pls.length == 0) {\n            return 'toast://选择为空';\n          }\n          var tabs = ['播放列表'];\n        }\n\n        var info = storage0.getMyVar('er_info', '{}');\n        var desc = info['desc'];\n        var 推送 = {\n          \"name\": getPageTitle(),\n          \"content\": desc || '',\n          \"pic\": info['img'] || '',\n          \"from\": tabs.join('$$$'),\n          \"url\": pls,\n        }\n        //log(推送)\n        return \"hiker://page/push?rule=XYQ推送&pushurl=\" + encodeURIComponent(JSON.stringify(推送))\n      }, shsort, vari),\n      extra: {\n        id: shsort + '_pushto',\n        cls: shsort + '_pushtab'\n      }\n    }, {\n      col_type: 'blank_block',\n      extra: {\n        cls: shsort + '_pushtab',\n      }\n    })\n  },\n  setLongclick: function (shsort, custom) {\n    return [{\n      title: '样式🎨',\n      js: $.toString((shsort) => {\n        let all_cols = [''].concat(getColTypes());\n        all_cols = all_cols.filter(x =>\n          /(text_|flex).*/.test(x) && x != 'text_icon');\n        //log(all_cols)\n        let cls = storage0.getMyVar('er_playlists', '{}') ||\n          '';\n        if (cls[shsort] != '') {\n          col = cls[shsort].col_type;\n        }\n        let 按钮样式 = all_cols.map((it) => {\n          return it === col ? '➡️' + it : it;\n        });\n        let tips = '请选择选集按钮样式';\n        return $(按钮样式, 2, tips).select((shsort, cls) => {\n          input = input.replace(/➡️/g, '');\n          /*storage0.setItem('按钮样式', input);*/\n          let oldIds = (findItemsByCls(shsort) || []).map(it => it.extra.id); //老元素ids\n          oldIds.forEach(x => {\n            updateItem(x, {\n              col_type: input\n            });\n          });\n          return 'toast://已切换选集按钮样式为:' + input;\n        }, shsort, cls);\n      }, shsort, custom)\n    }]\n  },\n  setTabs: function (tabs, vari, shsort, parse) {\n    let custom = parse.自定义;\n    let stabs = tabs;\n    tabs = tabs.map(x => x.title!=undefined?x.title:x);\n\n    custom = this.getPreset(custom);\n\n    shsort = shsort ? shsort : 'shsort';\n    var title = (getMyVar(shsort + '_sort', '0') == '1') ? '<b><span style=\"color: ' + custom.逆序颜色 + '\">逆序</span></b>' : '<b><span style=\"color: ' + custom.正序颜色 + '\">正序</span></b>'\n    \n    d.push({\n      title: vari + ':' + title,\n      desc: '共' + String(tabs.length).fontcolor('#4682B4') + '条线路',\n      url: $('#noLoading#').lazyRule((shsort, vari, custom) => {\n        let conf = getMyVar(shsort + '_sort', '0');\n        if (getMyVar('er_' + vari + 'fold', '1') == '0') {\n          return 'toast://展开才能操作';\n        }\n        var clslists = findItemsByCls(shsort);\n        var newclslist = $.dataConvert(clslists);\n\n        var titles = [`${custom.正序颜色}\">正序`, `${custom.逆序颜色}\">逆序`];\n\n        deleteItemByCls(shsort);\n        newclslist.reverse();\n        addItemAfter(shsort + '_line', newclslist);\n\n        var obj = findItem(shsort + '_avatar')\n\n        if (conf == '1') {\n          updateItem(shsort + '_avatar', {\n            title: obj.title.replace(titles[1], titles[0]),\n          })\n          putMyVar(shsort + '_sort', '0');\n        } else {\n          updateItem(shsort + '_avatar', {\n            title: obj.title.replace(titles[0], titles[1]),\n          })\n          putMyVar(shsort + '_sort', '1');\n        }\n        return 'toast://切换排序成功';\n      }, shsort, vari, custom),\n      col_type: 'avatar',\n      img: custom.图标,\n      extra: {\n        id: shsort + '_avatar',\n        longClick: this.setLongclick(shsort),\n      }\n    })\n    var 折叠 = '““””<b>' + '☷'.fontcolor(\"#D3D3D3\");\n    var 展开 = '““””<b>' + '☰'.fontcolor(\"#FFA500\");\n    var foldname = 'er_' + vari + 'fold';\n    var fold = getMyVar(foldname, '1');\n    if (typeof (parse['推送']) != 'undefined' && parse['推送'])\n      this.pushTab('er_' + vari, shsort);\n\n    d.push({\n      title: fold === '0' ? 折叠 : 展开,\n      col_type: custom.线路样式,\n      url: $('#noLoading#').lazyRule((foldname, shsort) => {\n        var fold = getMyVar(foldname, '1');\n        var obj = findItem(shsort + '_line');\n        var btn = findItem(shsort + '_button');\n        var folds = ['<font color=\"#D3D3D3\">☷', '<font color=\"#FFA500\">☰'];\n\n        if (fold == '0') {\n          putMyVar(foldname, '1');\n          var cs = storage0.getMyVar(shsort + '_cls');\n          addItemAfter(obj.extra.id, cs);\n          updateItem(btn.extra.id, {\n            title: btn.title.replace(folds[0], folds[1]),\n          })\n        }\n        if (fold == '1') {\n          putMyVar(foldname, '0');\n          var pcls = findItemsByCls(shsort);\n          var cx = $.dataConvert(pcls);\n          storage0.putMyVar(shsort + '_cls', cx);\n          deleteItemByCls(shsort);\n          updateItem(btn.extra.id, {\n            title: btn.title.replace(folds[1], folds[0]),\n          })\n        }\n\n        return 'toast://' + (fold === '1' ? '收起' : '展开');\n      }, foldname, shsort),\n      extra: {\n        id: shsort + '_button',\n      }\n    })\n    this.createPList(stabs, vari, shsort, custom, parse);\n  },\n  setTabs2: function (tabs, vari, shsort, parse, exp) {\n    let custom = parse.自定义;\n    let stabs = tabs;\n    tabs = tabs.map(x => x.title!=undefined?x.title:x);\n    custom = this.getPreset(custom);\n    shsort = shsort ? shsort : 'shsort';\n    var title = (getMyVar(shsort + '_sort', '0') == '1') ? '<b><span style=\"color:' + custom.逆序颜色 + '\">逆序</span></b>' : '<b><span style=\"color:' + custom.正序颜色 + '\">正序</span></b>'\n\n    var 折叠 = '<b>折叠' + '☷'.fontcolor(\"#D3D3D3\");\n    var 展开 = '<b>展开' + '☰'.fontcolor(\"#FFA500\");\n    var foldname = 'er_' + vari + 'fold';\n    var fold = getMyVar(foldname, '1');\n\n    var url = $('#noLoading#').lazyRule((foldname, shsort, push) => {\n      var pl = storage0.getMyVar('er_playlists', '{}');\n      if (Object.keys(pl).length == 1) {\n        return 'hiker://empty'\n      }\n\n      var fold = getMyVar(foldname, '1');\n      var obj = findItem(shsort + '_avatar')\n      if (fold == '1') {\n        var bcls = findItem(shsort + '_button');\n        var tcls = findItemsByCls(shsort + '_tab');\n        var lcls = findItem(shsort + '_line');\n\n        var pcls = findItemsByCls(shsort);\n        var cs = [bcls].concat(tcls, [lcls], pcls);\n\n        if (push) {\n          var pcls = findItemsByCls(shsort + '_pushtab');\n          cs = pcls.concat(cs);\n        }\n\n        var cx = $.dataConvert(cs);\n        storage0.putMyVar(shsort + '_cls', cx);\n        if (push) {\n          deleteItemByCls(shsort + '_pushtab');\n        }\n        deleteItem(bcls.extra.id);\n        deleteItemByCls(shsort + '_tab');\n        deleteItem(shsort + '_line');\n        deleteItemByCls(shsort);\n\n        updateItem(obj.extra.id, {\n          desc: obj.desc.replace('展开<font color=\"#FFA500\">☰', '折叠<font color=\"#D3D3D3\">☷'),\n        })\n      }\n      if (fold == '0') {\n        var cs = storage0.getMyVar(shsort + '_cls');\n        addItemAfter(shsort + '_avatar', cs);\n        updateItem(obj.extra.id, {\n          desc: obj.desc.replace('折叠<font color=\"#D3D3D3\">☷', '展开<font color=\"#FFA500\">☰'),\n        })\n      }\n      putMyVar(foldname, fold === '1' ? '0' : '1');\n      return 'toast://' + (fold === '1' ? '收起' : '展开');\n    }, foldname, shsort, (parse['推送'] ? true : false));\n    var desc = (fold === '0' ? 折叠 : 展开) + '\\t';\n\n    if (exp.length == 1) {\n      url = 'hiker://empty';\n      desc = '';\n    }\n    d.push({\n      title: vari + ':\\t\\t' + '共' + String(tabs.length).fontcolor('#4682B4') + '条线路',\n      desc: desc,\n      col_type: 'avatar',\n      img: custom.图标,\n      url: url,\n      extra: {\n        id: shsort + '_avatar',\n        longClick: this.setLongclick(shsort),\n      }\n    })\n    if (typeof (parse['推送']) != 'undefined' && parse['推送'])\n      this.pushTab('er_' + vari, shsort);\n\n    if (fold == '0') {\n      return\n    }\n\n    d.push({\n      title: '““””' + title,\n      url: $('#noLoading#').lazyRule((vari, shsort, custom) => {\n        let conf = getMyVar(shsort + '_sort', '0');\n        var clslists = findItemsByCls(shsort);\n        var newclslist = $.dataConvert(clslists);\n        deleteItemByCls(shsort);\n        newclslist.reverse();\n        addItemAfter(shsort + '_line', newclslist);\n\n        var obj = findItem(shsort + '_button')\n        var titles = [`${custom.正序颜色}\">正序`, `${custom.逆序颜色}\">逆序`];\n\n        if (conf == '1') {\n          updateItem(shsort + '_button', {\n            title: obj.title.replace(titles[1], titles[0]),\n          })\n          putMyVar(shsort + '_sort', '0');\n        } else {\n          updateItem(shsort + '_button', {\n            title: obj.title.replace(titles[0], titles[1]),\n          })\n          putMyVar(shsort + '_sort', '1');\n        }\n        //refreshPage()\n        return 'toast://切换排序成功'\n      }, vari, shsort, custom),\n      col_type: custom.线路样式,\n      extra: {\n        id: shsort + '_button',\n      }\n    })\n    this.createPList(stabs, vari, shsort, custom, parse);\n  },\n  setLists: function (lists, index, shsort, parse) {\n    //log(lists)\n    shsort = shsort ? shsort : 'shsort';\n    storage0.putMyVar(shsort + '_list', lists);\n\n    parse = parse ? parse : {};\n    var 样式 = parse.样式 ? parse.样式 : '';\n    var 图标 = parse.图标 ? parse.图标 : 'https://hikerfans.com/tubiao/movie/13.svg';\n    var ajax = parse.动态数据 ? parse.动态数据 : false;\n\n    if (ajax) {\n      var list = lists;\n      if (getMyVar(shsort + '_sort') == '1' && lists.length > 0) {\n        list = lists.reverse();\n      }\n    } else {\n      var list = lists[index];\n      if (getMyVar(shsort + '_sort') == '1' && lists.length > 0) {\n        list = lists[index].reverse();\n      }\n    }\n\n\n\n    if (样式 == '') {\n      样式 = list.length > 3 ? 'text_4' : 'text_2'\n    }\n\n    var extra = '';\n\n    if (parse.extra != undefined) {\n      extra = parse.extra\n    }\n\n    if (list.length > 0) {\n      var plist = storage0.getMyVar('er_playlists', '{}');\n      if (!plist.hasOwnProperty(shsort)) {\n        plist[shsort] = {};\n      }\n      plist[shsort]['cls'] = shsort;\n      plist[shsort]['col_type'] = 样式;\n      plist[shsort]['pic'] = 图标;\n      plist[shsort]['extra'] = extra;\n      storage0.putMyVar('er_playlists', plist);\n    }\n\n\n\n    for (var j in list) {\n\n      let lt = {\n        title: list[j].title,\n        url: list[j].url,\n        col_type: 样式,\n        pic: 图标,\n        extra: {\n          id: list[j].url.replace(/@lazyRule[\\s\\S]+/g, ''),\n          cls: shsort,\n        }\n      };\n      lt['extra'] = Object.assign({}, lt['extra'], extra);\n      d.push(lt);\n    }\n  },\n  evalRe: function (input, 函数) {\n    let result = input;\n    result = eval('input' + 函数);\n    return result;\n  },\n  getTabs: function (parse) {\n    var tabs = [];\n    var arts = [];\n    if (typeof parse.线路 == 'object') {\n      arts = parse.线路;\n    }\n    if (arts.length == 0) {\n      arts = pdfa(html, parse.线路);\n    }\n    var 线路名 = parse.线路名称;\n    var 线路链接 = parse.线路链接 ? parse.线路链接 : '';\n    var 替换函数 = '';\n    if (parse.线路名称.includes('@@')) {\n      线路名 = parse.线路名称.split('@@')[0];\n      替换函数 = parse.线路名称.split('@@')[1];\n    }\n    for (var i in arts) {\n      let linename = '';\n      if (线路名 == '') {\n        linename = arts[i];\n      } else {\n        linename = pdfh(arts[i], 线路名);\n      }\n      if (替换函数 != '') {\n        linename = this.evalRe(linename, 替换函数);\n      }\n      tabs.push({ title: linename });\n      if (线路链接 != '') {\n        tabs[i]['url'] = pd(arts[i], 线路链接);\n      }\n    }\n    //log(tabs);\n    return tabs;\n  },\n  getLists: function (parse, shsort, h) {\n    html = h || html;\n    shsort = shsort ? shsort : 'shsort';\n    var lists = [];\n    var conts = [];\n    if (typeof parse.选集 == 'object') {\n      conts = parse.选集;\n    }\n    if (conts.length == 0) {\n      try {\n        conts = pdfa(html, parse.选集);\n      } catch {\n        toast('选集定位有误')\n      }\n    }\n\n    let 替换函数 = '';\n    var 选集名称 = parse.选集名称 ? parse.选集名称 : 'a&&Text';\n    if (选集名称.includes('@@')) {\n      选集名称 = parse.选集名称.split('@@')[0];\n      替换函数 = parse.选集名称.split('@@')[1];\n    }\n\n    var 选集链接 = parse.选集链接 ? parse.选集链接 : 'a&&href';\n    var 解析 = parse.解析 ? parse.解析 : '';\n    var temp = [];\n\n    for (var i in conts) {\n      if (parse.选集列表 != undefined) {\n        if (parse.选集列表 == 'object') {\n          lists.push(conts[i].map(x => {\n            return {\n              title: x.title,\n              url: x.url + 解析,\n            }\n          }))\n        } else {\n          lists.push(pdfa(conts[i], parse.选集列表).map(x => {\n            return {\n              title: pdfh(x, 选集名称),\n              url: pd(x, 选集链接) + 解析,\n            }\n          }))\n        }\n      } else {\n        var url = pd(conts[i], 选集链接);\n        if (!选集链接.includes('href')) {\n          url = pdfh(conts[i], 选集链接);\n        }\n        let title = pdfh(conts[i], 选集名称);\n        title = 替换函数 != '' ? this.evalRe(title, 替换函数) : title;\n        temp.push({\n          title: title,\n          url: url + 解析,\n        })\n      }\n    }\n    let 倒序 = parse.倒序 ? parse.倒序 : false;\n    var results = lists.length ? lists : [temp];\n    if (倒序) {\n      results = results.map(x => x.reverse());\n    }\n    var plist = storage0.getMyVar('er_playlists', '{}');\n    if (results.some(x => x.length > 0)) {\n      if (!plist.hasOwnProperty(shsort)) {\n        plist[shsort] = {};\n      }\n      plist[shsort]['length'] = results.length;\n    };\n    storage0.putMyVar('er_playlists', plist);\n    return results;\n  },\n  getPlayers: function (parse, mode, func) {\n    //log(mode)\n    var play = 'er_playlist_';\n    this.preLoad(func);\n    this.close(parse.map(x => x.类型), parse.length);\n    mode = mode ? mode : 1;\n\n    let pe = [1];\n    try {\n      pe = parse.map(x => pdfa(html, x.线路).length).filter(y => y > 0);\n    } catch { }\n\n\n    parse.forEach((item, i) => {\n      var tabs = [{ title: '主线' }];\n      if (item.线路 != undefined) {\n        tabs = this.getTabs(item);\n      }\n      putMyVar(play + i + '_tabs', tabs.map(x => x.title));\n\n      if (item.动态数据) {\n        if (mode == 1) {\n          this.setTabs(tabs, item.类型, play + i, item);\n        } else {\n          this.setTabs2(tabs, item.类型, play + i, item, pe);\n        }\n        putMyVar('er_html', html);\n        putMyVar('er_url', MY_URL);\n        var info = { parse: item, mark: play + i, url: MY_URL };\n        if (tabs.some(x => x.url)) {\n          info['urls'] = tabs.map(x => x.url);\n        }\n\n        var lists = func(getMyVar('er_' + item.类型, '0'), info);\n      } else {\n        var lists = this.getLists(item, play + i);\n\n        if (lists.some(x => x.length > 0)) {\n          if (mode == 1) {\n            this.setTabs(tabs, item.类型, play + i, item);\n          } else {\n            this.setTabs2(tabs, item.类型, play + i, item, pe);\n          }\n        }\n      }\n      if (getMyVar('er_' + item.类型 + 'fold', '1') == '1') {\n        this.setLists(lists, getMyVar('er_' + item.类型, '0'), play + i, item);\n      }\n      d.push({\n        col_type: 'blank_block'\n      })\n    })\n  }\n}\n\n\nlet Methods = {\n  //多选模块\n  MultiSelectMode: function (name, id, shsort) {\n    return $('#noLoading#').lazyRule((datatitle, dataurl, shsort) => {\n      function unique(arr) {\n        const res = new Map()\n        return arr.filter((a) => !res.has(a.url) && res.set(a.url, 1))\n      }\n      let duoselect = storage0.getMyVar(shsort + \"_duoselect\") ? storage0.getMyVar(shsort + \"_duoselect\") : [];\n      if (duoselect.findIndex(x => x.url === dataurl) == -1) {\n        duoselect.push({\n          title: datatitle,\n          url: dataurl\n        })\n        duoselect = unique(duoselect)\n        updateItem(dataurl, {\n          title: `““””<span style=\"color:#FF5733\">` + datatitle,\n        });\n      } else {\n        function removeByValue(arr, val) {\n          for (var i = 0; i < arr.length; i++) {\n            if (arr[i]['url'] == val) {\n              arr.splice(i, 1);\n              break;\n            }\n          }\n        }\n        removeByValue(duoselect, dataurl)\n        updateItem(dataurl, {\n          title: datatitle\n        });\n      }\n      storage0.putMyVar(shsort + \"_duoselect\", duoselect);\n      return \"hiker://empty\"\n    }, name, id, shsort)\n  },\n}\n\n\n$.exports = {\n  Erji: Erji,\n}"},{"col_type":"movie_3","name":"ec-casc-list","path":"ec-casc","rule":"js:\n/*\n短视模板封装\nver 20231113 1.0\n*/\n\nvar getRangeColors = function() {       \n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \n}\neval(JSON.parse(request('hiker://page/yi?rule=α')).rule);\n\nvar _debug = false;\nif (typeof debug != 'undefined' && typeof debug == 'boolean') {\n    _debug = debug;\n}\n\nvar _开启搜索 = true;\nif (typeof 开启搜索 != 'undefined' && typeof 开启搜索 == 'boolean') {\n    _开启搜索 = 开启搜索;\n}\n\nvar _动态 = true;\nif (typeof 动态数据 != 'undefined' && typeof 动态数据 == 'boolean') {\n    _动态 = 动态数据;\n}\n\nvar _列表 = \"\";\nif (typeof 列表 != 'undefined') {\n    _列表 = 列表;\n}\n\nfunction moban_php(host, durl, 定位信息, options) {\n    var sourcename = MY_URL;\n    let 状态 = MY_RULE.url\n    MY_URL = durl;\n\n    var option = {\n        url: \"/index.php/api/vod\",\n    }\n    if (options != undefined) {\n        Object.keys(options).forEach(k => {\n            option[k] = options[k];\n        })\n    }\n\n    let true_url = getTruelink(MY_RULE.url, MY_URL, page);\n\n    if (option.hasOwnProperty('true_url')) {\n        true_url = option.true_url;\n    }\n\n    //log(true_url)\n    var html = fetch(true_url)\n    if (!option.hasOwnProperty('type')) {\n        option['type'] = pdfh(html, '#dataList&&data-type');\n    }\n\n    const 清除键 = ['dt_class', 'dt_area', 'dt_year', 'dt_lang', 'dt_letter', 'dt_time', 'dt_version', 'dt_state'];\n    const dc = dynamicClass({\n        分类颜色: getRangeColors()\n    });\n    dc.开启搜索(_开启搜索).开启折叠(true).清除(清除键).页码(page).界面(d).源码(html).状态(状态).创建动态分类(定位信息)\n\n    try {\n        if (pdfa(html, _列表).length != 0) {\n            return html;\n        }\n    } catch {}\n\n    if (!_动态) {\n        return html;\n    }\n\n    var type = option.type;\n\n    time = '' + Math.ceil(new Date().getTime() / 1000);\n    var key = evalPrivateJS('ZMNKQE5w4HUpWH6GG0ruk+vFxGRxkgJWuahpB85warDDaR3wy9NDjNapsZkYZZhV');\n\n    //log(option)\n\n    var result = post(host + option.url, {\n        headers: {\n            Referer: MY_URL,\n        },\n        body: {\n            type: type,\n            page: page,\n            time: time,\n            key: key,\n            class: getMyVar('dt_class', ''),\n            area: getMyVar('dt_area', ''),\n            year: getMyVar('dt_year', ''),\n            lang: getMyVar('dt_lang', ''),\n            letter: getMyVar('dt_letter', ''),\n            state: getMyVar('dt_state', ''),\n            version: getMyVar('dt_version', ''),\n            by: getMyVar('dt_time', ''),\n        }\n    })\n\n    var list = [];\n    try {\n        list = JSON.parse(result);\n    } catch {}\n\n    return list\n}\n\nvar option, 定位;\nif (typeof options != 'undefined') {\n    option = options;\n}\n\nvar 定位 = [{\n    大类定位: '.ec-casc-list&&ul,0:1',\n    //小类: 'body&&a'\n}, {\n    一级定位: 'body&&.nav-swiper:not(:has(:matches(频道))):has(li:nth-child(n+3))',\n    小类: 'body&&li:not(:matches(分类资源|分类不代表))',\n    //标题: 'a&&Text',\n    链接: '@js:' + $.toString((t) => {\n        var url = pdfh(input, 'a&&href');\n        let type = pdfh(input, 'li&&data-type');\n        let value = pdfh(input, 'li&&data-val');\n        if (value == '' && url != \"javascript:\") {\n            if (url.startsWith('javascript')) {\n                return pd(input, 'a&&href');\n            }\n            if (url.startsWith('/')) {\n                url = getHome(t) + url;\n            }\n            return url;\n        }\n        return {\n            type: type,\n            value: value\n        };\n    }, true_url)\n}, {\n    一级定位: '.site-tabs',\n    链接: '@js:' + $.toString((t) => {\n        var url = pdfh(input, 'a&&href');\n        let type = 'time';\n        let value = pdfh(input, 'a&&data-type');\n        if (value == '' && url != \"javascript:\") {\n            if (url.startsWith('javascript')) {\n                return pd(input, 'a&&href');\n            }\n            if (url.startsWith('/')) {\n                url = getHome(t) + url;\n            }\n            return url;\n        }\n        return {\n            type: type,\n            value: value\n        };\n    }, true_url),\n    //增加:['<a data-type=\"\">全部</a>'],\n    //补充:[],\n}]\n\nif (typeof 定位信息 != 'undefined') {\n    定位 = 定位信息;\n}\n\nif (typeof 大类定位 != 'undefined') {\n    定位[0]['大类定位'] = 大类定位;\n}\n\nif (typeof 拼接分类 != 'undefined') {\n    定位[1]['一级定位'] = 拼接分类;\n}\n\nif (_debug) {\n    log('定位信息');\n    log(定位);\n    log('true_url')\n    log(true_url);\n    log('options')\n    log(option)\n}\n\nvar result = moban_php(getHome(true_url), true_url, 定位, option);"},{"col_type":"movie_3","name":"一级封装","path":"yi","rule":"js:\n/*\nby α(zetalpha)\n一级封装\n动态分类 列表创建 自动下一页\nver 20231017 1.0\n*/\n\n//随机颜色\nvar getRangeColors = function() {\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\n}\n\n//动态分类\nfunction dynamicClass(options) {\n    const obj = {\n        //默认值\n        layout: \"undefined\",\n        html: \"empty\",\n        page: 0,\n        分类颜色: \"#FA7298\",\n        折叠: \"““””<b>\" + \"∧\".fontcolor(\"#1aad19\") + \"</b>\",\n        展开: \"““””<b>\" + \"∨\".fontcolor(\"#FF0000\") + \"</b>\",\n        open: true,\n        state: MY_RULE.url,\n        search: false,\n        clears: [],\n        clearall: [\"yi_firstpage\"],\n        debug: false,\n\n        预设(param) {\n            if (param == undefined) {\n                param = [];\n            }\n            Object.keys(param).forEach((property) => {\n                // 对每个属性名执行操作\n                const value = param[property]; // 获取属性值\n                // 在这里执行您的操作\n                this[property] = value;\n                if (this.debug) {\n                    console.log(property + \":\" + value);\n                }\n            });\n        },\n        evalJSRule(item,\n            jsRule) {\n            let rule = jsRule.replace(\"@js:\",\n                \"\");\n            rule = rule.trim();\n            //log($.stringify(rule))\n            let input = item;\n            if (rule.startsWith(\"(\")) {\n                eval(\"result = \" + rule);\n            } else {\n                /**\n                 * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\n                 */\n                eval(\"result = \" + \"(() => {\" + rule + \"})()\");\n            }\n            return result || \"\";\n        },\n        getTitle(src, category) {\n            let title = \"\";\n            let titleRule = category || \"a&&Text\";\n            if (titleRule.startsWith(\"@js:\")) {\n                title = this.evalJSRule(src, titleRule);\n            } else {\n                title = parseDomForHtml(src, titleRule);\n            }\n            return title || \"\";\n        },\n        getUrl(src, category) {\n            let url = \"\";\n            let urlRule = category.链接 || \"a&&href\";\n            if (urlRule.startsWith(\"@js:\")) {\n                url = this.evalJSRule(src, urlRule);\n            } else {\n                url = pd(src, urlRule);\n            }\n            if (typeof category.链接处理 == \"function\") {\n                url = category.链接处理(url);\n            }\n            return url || \"\";\n        },\n        isNull(param) {\n            if (param == null) {\n                return this;\n            }\n            return false;\n        },\n        isBoolean(variable) {\n            if (typeof variable !== \"boolean\") {\n                throw new Error(\"开启折叠请传入布尔值\");\n            }\n        },\n        清除(list) {\n            if (this.isNull(list)) {\n                return this;\n            }\n            if (list.constructor == String) {\n                throw new Error(\"清除报错:请传列表\");\n            }\n            this.clears = list;\n            return this;\n        },\n        全清(list) {\n            if (this.isNull(list)) {\n                return this;\n            }\n            var c = this.clearall;\n            list = c.concat(list);\n            this.clearall = list;\n            return this;\n        },\n        源码(input) {\n            this.html = input;\n            return this;\n        },\n        界面(input) {\n            this.layout = input;\n            return this;\n        },\n        页码(input) {\n            this.page = input;\n            return this;\n        },\n        状态(input) {\n            this.state = input;\n            return this;\n        },\n        开启搜索(input) {\n            if (input == undefined) {\n                input = true;\n            }\n            this.search = input;\n            return this;\n        },\n        开启折叠(input) {\n            if (input == undefined) {\n                input = true;\n            }\n            this.isBoolean(input);\n            this.open = input;\n            return this;\n        },\n        setTitle(k, i, t) {\n            return k == i ? \"““””\" + t.fontcolor(this.分类颜色) : t;\n        },\n        action(obj) {\n            return [{\n                title: \"清除状态\",\n                js: $.toString((obj) => {\n                    log(obj);\n                    clearMyVar(obj.state);\n                    clearMyVar(\"head.cate\");\n                    clearMyVar('cate_button');\n                    obj.all.forEach((item) => {\n                        clearMyVar(item);\n                    });\n                    obj.cl.forEach((item) => {\n                        clearMyVar(item);\n                    });\n                    refreshPage();\n                }, obj),\n            }, ];\n        },\n        checkParam() {\n            var obj = {};\n            if (this.page == 0 && typeof page == \"undefined\") {\n                throw new Error(\"请传入页码\");\n            } else {\n                if (typeof page == \"undefined\") {\n                    obj[\"页码\"] = this.page;\n                } else {\n                    obj[\"页码\"] = page;\n                }\n            }\n            if (this.html == \"empty\" && typeof html == \"undefined\") {\n                throw new Error(\"请传入源码\");\n            } else {\n                if (typeof html == \"undefined\") {\n                    obj[\"源码\"] = this.html;\n                } else {\n                    obj[\"源码\"] = html;\n                }\n            }\n            if (this.layout == \"undefined\" && typeof d == \"undefined\") {\n                throw new Error(\"请传入界面\");\n            } else {\n                if (typeof d == \"undefined\") {\n                    obj[\"界面\"] = this.layout;\n                } else {\n                    obj[\"界面\"] = d;\n                }\n            }\n            return obj;\n        },\n        创建动态分类(ruleObj) {\n            let items = [];\n            let cates = [];\n            if (ruleObj == undefined) {\n                ruleObj = [];\n            }\n            //初始化变量开始\n            const param = this.checkParam();\n            const page = param.页码;\n            const html = param.源码;\n            const d = param.界面;\n            const 状态 = this.state;\n            const search = this.search;\n            const empty = \"hiker://empty\";\n            const 折叠状态 = this.open;\n            var 展开 = this.展开;\n            var 折叠 = this.折叠;\n            var 全清 = this.clearall;\n            var 清除 = this.clears;\n            //初始化变量结束\n            let init_cate = new Array(20).fill(\"0\");\n            const fold = getMyVar(MY_RULE.group, \"0\");\n            const cate_temp = JSON.parse(\n                getMyVar(\"head.cate\", JSON.stringify(init_cate))\n            );\n            if (search && page == 1) {\n                items.push({\n                    title: \"\",\n                    url: \"'hiker://search?rule=\" + MY_RULE.title + \"&s='+input\",\n                    desc: \"搜索关键词\",\n                    col_type: \"input\",\n                    extra: {\n                        defaultValue: getMyVar(\"keyword\", \"\"),\n                        onChange: $.toString(() => {\n                            putMyVar(\"keyword\", input);\n                        }),\n                    },\n                });\n            }\n            const categories = [];\n            ruleObj.forEach((x) => {\n                var list = [];\n                //log(x)\n                if (x.json != undefined) {\n                    x.json.map(k => {\n                        categories.push(JSON.stringify(k).replace(/^\\[|\\]$/g, ''))\n                    })\n                    //categories.push(x.json)\n                }\n                if (x.一级定位) {\n                    if (x.一级定位.startsWith(\"@js:\")) {\n                        list = this.evalJSRule(html, x.一级定位);\n                    } else {\n                        list = pdfa(html, x.一级定位);\n                    }\n                }\n                if (x.大类定位) {\n                    if (x.大类定位.startsWith(\"@js:\")) {\n                        list = this.evalJSRule(html, x.大类定位);\n                    } else {\n                        list = [pdfa(html, x.大类定位).join('\\n')];\n                    }\n                }\n                //--额外处理--\n                if (('增加' in x)) {\n                    if (x.增加.constructor == String) {\n                        x.增加 = eval(x.增加);\n                    }\n                    slist = x.增加.concat(slist);\n                }\n                if (('补充' in x)) {\n                    if (x.补充.constructor == String) {\n                        x.补充 = eval(x.补充);\n                    }\n                    slist = slist.concat(x.补充);\n                }\n                //--额外处理--\n                var 一级 = list.map((s) => {\n                    var slist = [];\n                    if (!(\"小类\" in x)) {\n                        x.小类 = \"body&&a:not(:matches(首页)):not(a:not([href]))\";\n                    }\n                    if (x.小类.startsWith(\"@js:\")) {\n                        slist = this.evalJSRule(s, x.小类);\n                    } else {\n                        slist = pdfa(s, x.小类);\n                    }\n                    var 定位 = slist.map((item) => {\n                        var title = this.getTitle(item, x.标题);\n                        var url = this.getUrl(item, x);\n                        var obj = {\n                            title: title,\n                            url: url\n                        };\n                        return JSON.stringify(obj);\n                    });\n                    return 定位;\n                });\n                //log(一级)\n                //log(一级.length)\n                if (一级.length == 1) {\n                    categories.push(一级.join(\"\\n\"));\n                } else {\n                    一级.forEach((item) => {\n                        categories.push(item.join(\",\"));\n                    });\n                }\n                //log(categories)\n            });\n            if (折叠状态) {\n                if (page == 1) {\n                    items.push({\n                        title: fold === \"1\" ? 折叠 : 展开,\n                        url: $(\"#noLoading#\").lazyRule(\n                            (title, fold, u, all, exps) => {\n                                var fold = getMyVar(MY_RULE.group, fold);\n\n                                var [展开, 折叠] = exps;\n\n                                if (fold == 1) {\n                                    var cx = findItemsByCls(title + 'cate_button');\n                                    storage0.putMyVar('cate_button', cx);\n                                    deleteItemByCls(title + 'cate_button');\n\n                                } else {\n                                    var cx = storage0.getMyVar('cate_button', []).map(x => {\n                                        x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\n                                        return x;\n                                    });\n                                    addItemAfter(title + 'cate_line', cx)\n                                }\n\n                                /*all.forEach((item) => {\n                                  clearMyVar(item);\n                                });*/\n                                updateItem(title + 'cate_exp', {\n                                    title: fold == 1 ? 展开 : 折叠,\n                                })\n\n                                putMyVar(MY_RULE.group, fold === \"1\" ? \"0\" : \"1\");\n\n                                //refreshPage(false);\n                                return \"hiker://empty\";\n                            },\n                            MY_RULE.title,\n                            fold,\n                            状态,\n                            全清, [展开,\n                                折叠\n                            ],\n                        ),\n                        col_type: \"scroll_button\",\n                        extra: {\n                            id: MY_RULE.title + 'cate_exp',\n                            longClick: this.action({\n                                state: 状态,\n                                all: 全清,\n                                cl: 清除,\n                            }),\n                        },\n                    });\n                }\n            }\n            if (page == 1) {\n                categories.forEach((category, index) => {\n                    //log(category)\n                    let sub_categories = [];\n                    /*if (小类定位.includes(\";\")) {\n                      sub_categories = pdfa(category, 小类定位.split(\";\")[0]);\n                      if (sub_categories.length == 0) {\n                        sub_categories = pdfa(category, 小类定位.split(\";\")[1]);\n                      }\n                    } else {*/\n                    //log(index)\n                    sub_categories = JSON.parse(`[${category}]`);\n                    //log(sub_categories)\n                    // sub_categories = pdfa(category, 小类定位);\n                    //}\n                    if (index === 0) {\n                        //大类\n                        sub_categories.forEach((item, key) => {\n\n                            //let title = pdfh(item, _大类标题);\n                            let title = item.title;\n\n                            if (typeof 排除 != \"undefined\" && 排除 != \"\") {\n                                title = title.replace(newRegExp(排除, \"g\"), \"\");\n                            }\n                            let json = ''\n                            json = item.url;\n\n                            let params = {\n                                cate_temp: cate_temp,\n                                key: key,\n                                page: page,\n                                clears: 清除,\n                                json: json,\n                                state: 状态,\n                                allclears: 全清,\n                            };\n\n                            //let url = pd(item, _大类链接);\n                            let url = item.url;\n                            /*if (大类处理) {\n                              url = 一级分类处理(url);\n                            }*/\n                            //log(url)\n                            items.push({\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\n                                col_type: \"scroll_button\",\n                                url: $(\"hiker://empty#noLoading#\").lazyRule((params) => {\n                                        let new_cate = [];\n                                        params.clears.forEach((item) => {\n                                            clearMyVar(item);\n                                        });\n                                        params.allclears.forEach((item) => {\n                                            clearMyVar(item);\n                                        });\n                                        clearMyVar('cate_button');\n\n                                        params.cate_temp.forEach((cate, index) => {\n                                            new_cate.push(index === 0 ? params.key.toString() : \"0\");\n                                        });\n                                        putMyVar(\"head.cate\", JSON.stringify(new_cate));\n                                        if (params.json.constructor === Object) {\n                                            putMyVar(\"dt_\" + params.json.type, params.json.value);\n                                        } else {\n                                            putMyVar(params.state, params.json);\n                                        }\n                                        refreshPage(true);\n                                        return \"hiker://empty\";\n                                    },\n                                    params),\n                            });\n                        });\n                        items.push({\n                            col_type: \"blank_block\",\n                            extra: {\n                                id: MY_RULE.title + 'cate_line',\n                            }\n                        });\n                    } else {\n                        //小类\n                        sub_categories.forEach((item, key) => {\n                            var extrapos = false;\n                            /*if (item.includes('type=\"@extra\"')) {\n                              extrapos = true;\n                              //log('附加定位')\n                            }*/\n\n                            if (extrapos) {\n                                var title = pdfh(item, \"a&&Text\");\n                                if (typeof 排除 != \"undefined\" && 排除 != \"\") {\n                                    title = title.replace(new RegExp(排除, \"g\"), \"\");\n                                }\n                                var json = {\n                                    type: pdfh(item, \"a&&state\"),\n                                    value: pdfh(item, \"a&&value\"),\n                                };\n                            } else {\n                                //var title = pdfh(item, 分类标题);\n                                var title = item.title;\n                                if (typeof 排除 != \"undefined\" && 排除 != \"\") {\n                                    title = title.replace(new RegExp(排除, \"g\"), \"\");\n                                }\n\n                                var json = \"\";\n                                /*switch (true) {\n                                  case 分类链接.includes(\"@@@\"):\n                                    json = {\n                                      type: pdfh(item, 分类链接.split(\"@@@\")[0]),\n                                      value: pdfh(item, 分类链接.split(\"@@@\")[1]),\n                                    };\n                                    break;\n                                  case 分类链接.includes(\"@@\"):\n                                    json = {\n                                      type: 分类链接.split(\"@@\")[0],\n                                      value: pdfh(item, 分类链接.split(\"@@\")[1]),\n                                    };\n                                    break;\n                                  default:\n                                    json = item.url;\n                                    // json = pd(item, 分类链接);\n                                    break;\n                                }*/\n                                json = item.url;\n                                /*var json=分类链接.includes('@@@')?{\n                                      type:pdfh(item,分类链接.split('@@@')[0]),\n                                      value:pdfh(item,分类链接.split('@@@')[1]),\n                                  }:pd(item,分类链接);\n                                  json=分类链接.includes('@@')?{\n                                      type:分类链接.split('@@')[0],\n                                      value:pdfh(item,分类链接.split('@@')[1]),\n                                  }:pd(item,分类链接);*/\n                            }\n\n                            let params = {\n                                cate_temp: cate_temp,\n                                index: index,\n                                key: key,\n                                page: page,\n                                json: json,\n                                state: 状态,\n                                allclears: 全清,\n                            };\n                            cates.push({\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\n                                url: $(\"hiker://empty\" + \"#noLoading#\").lazyRule((params) => {\n                                        params.allclears.forEach((item) => {\n                                            clearMyVar(item);\n                                        });\n                                        clearMyVar('cate_button');\n\n                                        params.cate_temp[params.index] = params.key.toString();\n                                        putMyVar(\"head.cate\", JSON.stringify(params.cate_temp));\n                                        if (params.json.constructor === Object) {\n                                            putMyVar(\"dt_\" + params.json.type, params.json.value);\n                                        } else {\n                                            putMyVar(params.state, params.json);\n                                        }\n                                        refreshPage();\n                                        return \"hiker://empty\";\n                                    },\n                                    params),\n                                col_type: \"scroll_button\",\n                                extra: {\n                                    cls: MY_RULE.title + 'cate_button',\n                                }\n                            });\n                        });\n                        cates.push({\n                            col_type: \"blank_block\",\n                            extra: {\n                                cls: MY_RULE.title + 'cate_button',\n                            }\n                        });\n                    }\n                });\n            }\n            if (fold === \"1\" || 折叠状态 == false) {\n                items = items.concat(cates);\n            }\n            if (fold === \"0\") {\n                storage0.putMyVar('cate_button', cates)\n            }\n            if (typeof setPreResult != 'undefined') {\n                items = d.concat(items);\n                //清空继承数组\n                d.length = 0;\n                setPreResult(items);\n            } else {\n                items.forEach(item => {\n                    d.push(item);\n                })\n            }\n        },\n    };\n    obj.预设(options);\n    return obj;\n}\n\nvar 状态 =\n    typeof 状态标记 != \"undefined\" && 状态标记 != \"\" ? 状态标记 : MY_RULE.url;\n\nlet dt_debug = false;\n\naddListener(\n    \"onClose\",\n    $.toString(() => {})\n);\n\nvar Create = {\n    nextPage: function() {\n        var result = false;\n        try {\n            var next = eval(下一页);\n            //log('n:'+next)\n            if (next == \"\") {\n                throw new Error('下一页链接为空')\n            }\n            result = true;\n            if (true_url == next) {\n                result = false;\n            }\n        } catch (e) {\n            //log(\"可能不存在下一页或者下一页定位有问题\");\n            log(\"错误信息:\" + e.message);\n        }\n        if ((next == \"\" || next == undefined) && page == 1) {\n            next = true_url;\n        } else {\n            //result=false;\n            next = getMyVar(状态);\n        }\n        //log('l'+true_url)\n        //log('n'+next)\n        if (page != 1) {\n            if (true_url == next && !result) {\n                result = false;\n            } else {\n                result = true;\n            }\n        }\n        return result;\n        //putMyVar(状态, next);\n    },\n    getBackImage: function(imgurl) {\n        var result = imgurl;\n        try {\n            result = /url(?:\\s+)?\\((.*?)\\)/g\n                .exec(imgurl)[1]\n                .replace(/('|\"|&quot;)/gm, \"\");\n        } catch {}\n        return result;\n    },\n    httpHandle: function(input) {\n        if (input.startsWith(\"http\")) {\n            return input;\n        } else if (input.startsWith(\"//\")) {\n            return \"https:\" + input;\n        } else if (input.startsWith(\"/\")) {\n            return MY_HOME + input;\n        }\n    },\n    imgHandle: function(item, rule) {\n        var img = \"\";\n        if (rule.img.startsWith(\"pd\")) {\n            img = eval(rule.img);\n        } else if (rule.backimg) {\n            img = pdfh(item, rule.img);\n            img = this.getBackImage(img);\n            img = this.httpHandle(img);\n        } else {\n            img = pdfh(item, rule.img);\n            if (!img.startsWith(\"http\")) {\n                img = pd(item, rule.img);\n                img = this.httpHandle(img);\n            }\n        }\n        return img + rule.ref;\n    },\n    urlHandle: function(item, rule) {\n        var href = \"\";\n        if (rule.url.startsWith(\"pd\")) {\n            href = eval(rule.url);\n        } else {\n            href = pd(item, rule.url);\n        }\n        href = rule.imt ? href + \"#immersiveTheme#\" : href;\n        return href;\n    },\n    setContent: function(item, input) {\n        let output = \"\";\n        if (input == undefined) {\n            return output;\n        }\n        if (input.startsWith(\"pd\")) {\n            output = eval(input);\n        } else {\n            output = pdfh(item, input);\n        }\n        return output;\n    },\n    refresh: function() {\n        addListener(\n            \"onRefresh\",\n            $.toString((u) => {\n                clearMyVar(\"yilist\");\n                //var p = storage0.getMyVar('spage', '');\n                //putMyVar(u, p);\n            }, 状态)\n        );\n    },\n    getBooleanValue: function(value, defaultValue) {\n        return value !== undefined ? Boolean(value) : (defaultValue !== undefined ? defaultValue : true);\n    },\n    debuglog: function(i, item, rule, obj) {\n        log('----------' + (i + 1) + ':调试开始----------');\n        if (item.constructor == Object) {\n            item = JSON.stringify(item);\n        }\n        log('item内容:\\r\\n' + item + '\\r\\n' +\n            `\\n\\ttitle定位:  ${rule.title}  ---> 结果:  ${obj.title}` +\n            `\\n\\tdesc定位:  ${rule.desc}  ---> 结果:  ${obj.desc}` +\n            `\\n\\timg定位:  ${rule.img}  ---> 结果:  ${obj.img}` +\n            (rule.content != undefined ? `\\n\\tcontent定位:  ${rule.content}  ---> 结果:  ${obj.content}` : '') +\n            `\\n\\turl定位:  ${rule.url}  ---> 结果:  ${obj.url}`\n        );\n        log('----------' + (i + 1) + ':调试结束----------');\n    },\n    jsonList: function(arr, json, rule) {\n        if (json.constructor != Object) {\n            try {\n                json = JSON.parse(json);\n            } catch {}\n        }\n        if (json[rule.list] == undefined) {\n            arr.push({\n                title: '““””<font color=\"grey\"><small>无内容</small></font>',\n                url: \"hiker://empty\",\n                col_type: \"text_center_1\",\n                extra: {},\n            });\n            return;\n        }\n        var debug = this.getBooleanValue(rule.debug, false);\n        var empty = this.getBooleanValue(rule.empty);\n        if (debug) {\n            log('定位列表:' + rule.list);\n        }\n        json[rule.list].forEach((item, i) => {\n            var title = eval(rule.title);\n            var desc = eval(rule.desc);\n            var content = eval(rule.content);\n            var img = eval(rule.img) + rule.ref;\n            var href = eval(rule.url);\n            var url = rule.imt ? href + \"#immersiveTheme#\" : href;\n            var lazy = rule.lazy ? rule.lazy : \"\";\n\n            var dd = {\n                title: title,\n                desc: desc,\n                content: content,\n                pic_url: img,\n                url: (empty ? \"hiker://empty##\" : '') + url,\n                col_type: rule.col_type,\n                extra: {\n                    img: img,\n                },\n            };\n\n            if (debug) {\n                var rx = {\n                    title,\n                    desc,\n                    img,\n                    content,\n                    url\n                };\n                this.debuglog(i, item, rule, rx);\n            }\n\n            if (lazy != \"\") {\n                dd[\"url\"] = href + lazy;\n            }\n            arr.push(dd);\n        });\n    },\n    ruleList: function(arr, html, rule) {\n        var list = pdfa(html,\n            rule.list);\n        var debug = this.getBooleanValue(rule.debug,\n            false);\n        var empty = this.getBooleanValue(rule.empty);\n        if (debug) {\n            log('定位列表:' + rule.list);\n        }\n        list.forEach((item, i) => {\n            var title = this.setContent(item, rule.title);\n            var desc = this.setContent(item, rule.desc);\n            var img = this.imgHandle(item, rule);\n            var url = this.urlHandle(item, rule);\n            var content = this.setContent(item, rule.content);\n\n            if (debug) {\n                var rx = {\n                    title,\n                    desc,\n                    img,\n                    content,\n                    url\n                };\n                this.debuglog(i, item, rule, rx);\n            }\n\n            var lazy = rule.lazy ? rule.lazy : \"\";\n            var dd = {\n                title: title,\n                desc: desc,\n                pic_url: img,\n                url: (empty ? \"hiker://empty##\" : '') + url,\n                content: content,\n                col_type: rule.col_type,\n                extra: {\n                    img: img,\n                },\n            };\n            if (lazy != \"\") {\n                dd[\"url\"] = url + lazy;\n            }\n            arr.push(dd);\n        });\n    },\n    List: function(arr, html, rule, param) {\n        param = param ? param : {};\n        var auto = param.auto ? param.auto : false;\n        var show = param.show ? param.show : false;\n        if (page == 1) {\n            //this.spage.set(true_url);\n        }\n        this.refresh();\n        var debug = this.getBooleanValue(rule.debug, false);\n        var empty = this.getBooleanValue(rule.empty);\n        var list = pdfa(html, rule.list);\n        if (debug) {\n            log('定位列表:' + rule.list);\n        }\n        //log(this.nextPage())\n        if ((storage0.getMyVar('yi_isnext', 't') == 't' && list.length > 0) || page == 1) {\n            list.forEach((item, i) => {\n                deleteItem(\"pagenum\");\n                deleteItem(\"pageline\");\n                var id = \"\";\n                var cls = \"\";\n                var title = this.setContent(item, rule.title);\n                var desc = this.setContent(item, rule.desc);\n                var img = this.imgHandle(item, rule);\n                var url = this.urlHandle(item, rule);\n                var content = this.setContent(item, rule.content);\n\n                if (debug) {\n                    var rx = {\n                        title,\n                        desc,\n                        img,\n                        content,\n                        url\n                    };\n                    this.debuglog(i, item, rule, rx);\n                }\n\n                if (i == list.length - 1) {\n                    id = \"lastid_\" + page;\n                    cls = \"lastmark\";\n                }\n                d.push({\n                    title: title,\n                    desc: desc,\n                    pic_url: img,\n                    url: (empty ? \"hiker://empty##\" : '') + url,\n                    content: content,\n                    col_type: rule.col_type,\n                    extra: {\n                        img: img,\n                        id: id,\n                        cls: cls,\n                    },\n                });\n                if (i == list.length - 1 && show) {\n                    d.push({\n                        col_type: \"line\",\n                        extra: {\n                            id: \"pageline\",\n                        },\n                    });\n\n                    d.push({\n                        title: \"““””<small>加载中...</small>\",\n                        url: \"hiker://empty\",\n                        col_type: \"text_center_1\",\n                        extra: {\n                            id: \"pagenum\",\n                        },\n                    });\n                }\n            });\n        } else {\n            updateItem(\"pagenum\", {\n                title: '““””<font color=\"grey\"><small>到底了</small></font>',\n                url: \"hiker://empty\",\n                col_type: \"text_center_1\",\n                extra: {\n                    id: \"last\",\n                },\n            });\n        }\n        if (list.length == 0 && page == 1) {\n            d.push({\n                col_type: \"line\",\n            });\n            d.push({\n                title: '““””<font color=\"grey\"><small>无内容</small></font>',\n                url: \"hiker://empty\",\n                col_type: \"text_center_1\",\n                extra: {},\n            });\n        }\n        if (this.nextPage()) {\n            //log('t');\n            storage0.putMyVar('yi_isnext', 't');\n        } else {\n            //log('f');\n            storage0.putMyVar('yi_isnext', 'f');\n        }\n        if (auto) {\n            //createNextPage();\n            autoPage();\n        }\n    },\n};\n\nvar extMethod = {\n    ToParams: function() {\n        var json = arguments[0];\n        return Object.keys(json)\n            .map((key) => key + \"=\" + json[key])\n            .join(\"&\");\n    },\n    urlParse: function(u) {\n        var dict = {};\n        dict.Source = u;\n        let params = (url) => {\n            let queryParams = {};\n            let reg = /([^?=&]+)=([^?=&]+)/g;\n            url.replace(reg, function() {\n                queryParams[arguments[1]] = arguments[2];\n            });\n            return queryParams;\n        };\n        var javaUrl = JavaImporter(java.net.URL);\n        with(javaUrl) {\n            var url = new URL(u);\n            dict.Protocol = url.getProtocol();\n            dict.Host = url.getHost();\n            dict.Port = url.getPort();\n            dict.File = url.getFile();\n            dict.Path = url.getPath();\n            dict.Ref = url.getRef();\n            dict.Hosts = `${dict.Protocol}://${url.getHost()}`;\n        }\n        dict.Params = params(u);\n        return dict;\n    },\n    isEqual: function(x, y) {\n        const ok = Object.keys,\n            tx = typeof x,\n            ty = typeof y;\n        return x && y && tx === \"object\" && tx === ty ?\n            ok(x).length === ok(y).length &&\n            ok(x).every((key) => this.isEqual(x[key], y[key])) : x === y;\n    },\n    findDifferentIndex: function(str1, str2) {\n        const diffChars = [];\n        for (let i = 0; i < str2.length; i++) {\n            if (str1[i] !== str2[i]) {\n                diffChars.push({\n                    index: i,\n                    s1: str1[i],\n                    s2: str2[i],\n                });\n            }\n        }\n        return diffChars;\n    },\n    replaceCharAt: function(str, index, replacement) {\n        if (index < 0 || index >= str.length) {\n            return str;\n        }\n        //log(index)\n        const arr = str.split(\"\");\n        arr[index] = replacement;\n        return arr.join(\"\");\n    },\n    getObjectKeysDiff: function(obj1, obj2) {\n        const differentKeys = [];\n        for (let key in obj1) {\n            if (!obj2.hasOwnProperty(key) || obj1[key] !== obj2[key]) {\n                differentKeys.push(key);\n            }\n        }\n        for (let key in obj2) {\n            if (!obj1.hasOwnProperty(key)) {\n                differentKeys.push(key);\n            }\n        }\n        return differentKeys;\n    },\n    getNextUrl: function(source, target, params) {\n        var u1 = this.urlParse(source);\n        var u2 = this.urlParse(target);\n        var pa = undefined;\n        if (typeof params == \"object\") {\n            pa = params.hasOwnProperty(\"特征\") ? params.特征 : undefined;\n        }\n        var nexturl = source;\n        var ca = Object.keys(u2.Params).length == 0 ? \"\" : \"?\";\n        if (pa != undefined) {\n            var rs = String(u2.Path).replace(new RegExp(pa), \"$1fypage\");\n            nexturl = u2.Hosts + rs + ca + this.ToParams(u2.Params);\n        } else {\n            if (this.isEqual(u1.Params, u2.Params)) {\n                if (dt_debug) {\n                    log(u1.Path);\n                    log(u2.Path);\n                }\n                var df = this.findDifferentIndex(String(u1.Path), String(u2.Path));\n                if (dt_debug) {\n                    log(df);\n                }\n                if (df.length == 1) {\n                    var re = df[0].index;\n                } else {\n                    var f = df.filter((x) => /\\d+/.test(x.s2));\n                    var re = f[0].index;\n                }\n                var eq = this.replaceCharAt(String(u2.Path), re, \"fypage\");\n                nexturl = u2.Hosts + eq + ca + this.ToParams(u2.Params);\n            } else {\n                var ep = this.getObjectKeysDiff(u1.Params, u2.Params)\n                if (ep.length == 1) {\n                    u1.Params[ep[0]] = 'fypage'\n                } else {\n                    log(ep);\n                }\n                var eq = String(u1.Path).replace(/\\d+/, \"fypage\");\n                nexturl = u1.Hosts + eq + ca + this.ToParams(u1.Params);\n            }\n        }\n        //log('next:'+nexturl)\n        return nexturl;\n    },\n};\n\nfunction getTruelink(mark, url, page) {\n    var p = getMyVar(mark, url).replace(\"fypage\", page);\n    if (page == 1) {\n        return getMyVar(\"yi_firstpage\", p);\n    } else if (p != \"\") {\n        return p;\n    } else {\n        return url;\n    }\n}\n//构建\nfunction createNextPage() {\n    let startnum = 1;\n    var obj = arguments[0];\n    if (true_url != getMyVar(\"yi_pageurl\", \"\")) {\n        clearMyVar(\"yi_pageurl\");\n    }\n    if (page == startnum && getMyVar(\"yi_pageurl\") == \"\") {\n        putMyVar(\"yi_firstpage\", true_url);\n        try {\n            var next = eval(下一页);\n            //log(\"next\");\n            //log(next);\n        } catch {\n            log(\"可能不存在下一页或者下一页定位有问题\");\n            next = \"\";\n        }\n        if (next != \"\") {\n            var nxurl = extMethod.getNextUrl(true_url, next, obj);\n            //log(\"nxurl:\" + nxurl);\n            putMyVar(状态, nxurl);\n            putMyVar(\"yi_pageurl\", nxurl);\n        }\n    }\n}\n\nfunction autoPage() {\n    if (page == 1) {\n        putMyVar(\"yi_firstpage\", true_url);\n    }\n    try {\n        var next = eval(下一页);\n        //log(\"next\");\n        //log('next:'+next);\n    } catch {\n        log(\"可能不存在下一页或者下一页定位有问题\");\n        next = \"\";\n    }\n    if (next != \"\") {\n        putMyVar(状态, next);\n    }\n}"},{"col_type":"movie_3","name":"环境封装","path":"repair","rule":"js:\n/*\n2023-10-15 by α\n*/\n\nvar document = {};\nvar window = {\n    location: {\n        reload: function() {\n            return;\n        }\n    }\n};\n\n// 定义一个对象用于存储 cookie 名称和值的键值对\nvar cookies = {};\nObject.defineProperty(document, 'cookie', {\n    enumerable: true,\n    configurable: true,\n    get: function() {\n        return Object.entries(cookies).map(([key, value]) => `${key}=${value}`).join('; ');\n    },\n    set: function(value) {\n        var list = [];\n        if (value.includes(';')) {\n            list = value.split(';');\n        } else {\n            list = [value];\n        }\n        list.forEach(x => {\n            var index = x.indexOf(\"=\");\n            var key = x.substring(0, index).trim();\n            var value = x.substring(index + 1);\n            cookies[key] = value;\n        })\n    }\n});\n\nfunction guard(url, headobj) {\n    var head = headobj ? headobj : {};\n    head['headers'] = head['headers'] ? head['headers'] : {};\n    head['headers']['Cookie'] = getCookie(url);\n    //log(head)\n    var html = fetch(url, head);\n    if (html.includes('_guard/auto.js')) {\n        document[\"cookie\"] = getCookie(url);\n        eval(fetch(getHome(url) + '/_guard/auto.js'))\n        head['headers']['Cookie'] = document[\"cookie\"];\n        html = fetch(url, head);\n    }\n    //log(document[\"cookie\"])\n    return html;\n}"},{"col_type":"movie_3","name":"设置","path":"setting","rule":"js:\neval(fetch('file:///storage/emulated/0/Download/web/setui.js'))"},{"col_type":"movie_3","name":"默认参数","path":"def","rule":"js:\nvar onfile = true;\nlet def = {};\nif (onfile) {\n    eval(fetch('file:///storage/emulated/0/Download/web/def.js'))\n} else {\n    def = {\n        style: '1',\n        每页数量: 30,\n        分页阈值: 30,\n    }\n}\n\n"},{"col_type":"movie_3","name":"动态分类改","path":"dtfl","rule":"js:\n/*\nVer 2023-10-28 1.0\n备注：不要用海阔代码格式化 内容会出错\n必须参数：\n分类颜色 大类定位 \n小类定位 分类标题 分类链接\nhtml =>源码 page =>页码\n可选参数：\n拼接分类 折叠标记 展开标记 排除\n大类链接 大类标题 清除键 开启折叠\n附加定位\n说明：\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\n魔改:α\n*/\n\nlet empty = \"hiker://empty\";\nlet categories = [];\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\n    categories = [pdfa(html, 大类定位).join('\\n')];\n    if (拼接分类.includes(';')) {\n        拼接分类 = 拼接分类.split(';');\n    }\n    if (拼接分类.constructor == Array) {\n        拼接分类.forEach(item => {\n            categories = categories.concat(pdfa(html, item));\n        })\n    } else {\n        categories = [pdfa(html, 大类定位).join('\\n')].concat(pdfa(html, 拼接分类));\n    }\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\n        附加定位.forEach(x => {\n            var 一级 = pdfa(html, x.一级定位).map(s => {\n                var 定位 = pdfa(s, x.小类).map(q => {\n                    var title = pdfh(q, x.标题);\n                    var url = 'a'\n                    if (x.链接.includes('@@')) {\n                        state = x.链接.split('@@')[0]\n                        value = pdfh(q, x.链接.split('@@')[1]);\n                        if (x.转换 == true) {\n                            return `<li data-type=\"${state}\" data-val=\"${value}\"><a href=\"\">${title}</a></li>`\n                        } else {\n                            return `<a type=\"@extra\" state=\"${state}\" value=\"${value}\">${title}</a>`;\n                        }\n                    } else {\n                        href = pd(q, x.链接);\n                        return `<a href=\"${href}\">${title}</a>`;\n                    }\n                });\n                return 定位;\n            });\n            categories.push(一级.join('\\n'));\n        });\n    }\n} else {\n    categories = [pdfa(html, 大类定位).join('\\n')];\n}\n\nlet items = [];\nlet cates = [];\nlet init_cate = new Array(20).fill(\"0\");\nconst fold = getMyVar(MY_RULE.group, \"0\");\nconst cate_temp = JSON.parse(getMyVar(\"head.cate\", JSON.stringify(init_cate)));\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\"#FF0000\");\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\"#1aad19\");\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\n全清.unshift('yi_firstpage');\n\n\nif (parseInt(page) === 1) {\n    if (搜索) {\n        d.push({\n            title: \"\",\n            url: \"'hiker://search?rule=\" + MY_RULE.title + \"&s='+input\",\n            desc: \"搜索关键词\",\n            col_type: \"input\",\n            extra: {\n                defaultValue: getMyVar('keyword', ''),\n                onChange: $.toString(() => {\n                    putMyVar('keyword', input);\n                })\n            }\n        })\n    }\n    if (折叠状态) {\n        if (page == 1) {\n            items.push({\n                title: fold === '1' ? 折叠 : 展开,\n                url: $(\"#noLoading#\").lazyRule((title, fold, u, all, exps) => {\n                    var fold = getMyVar(MY_RULE.group, fold);\n                    var [展开, 折叠] = exps;\n                    if (fold == 1) {\n                        var cx = findItemsByCls(title + 'cate_button');\n                        storage0.putMyVar('cate_button', cx);\n                        deleteItemByCls(title + 'cate_button');\n                    } else {\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\n                            return x;\n                        });\n                        addItemAfter(title + 'cate_line', cx)\n                    }\n                    /*all.forEach((item) => {\n                      clearMyVar(item);\n                    });*/\n                    updateItem(title + 'cate_exp', {\n                        title: fold == 1 ? 展开 : 折叠,\n                    })\n                    putMyVar(MY_RULE.group, fold === \"1\" ? \"0\" : \"1\");\n                    return \"hiker://empty\";\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\n                col_type: 'scroll_button',\n                extra: {\n                    id: MY_RULE.title + 'cate_exp',\n                    longClick: [{\n                        title: '清除状态',\n                        js: $.toString((x, all, cl) => {\n                            clearMyVar(x);\n                            clearMyVar('head.cate');\n                            all.forEach((item) => {\n                                clearMyVar(item)\n                            })\n                            cl.forEach((item) => {\n                                clearMyVar(item)\n                            })\n                            refreshPage();\n                        }, 状态, 全清, 清除)\n                    }]\n                }\n            })\n        }\n    }\n    let setTitle = (k, i, t) => {\n        return k == i ? \"““””\" + t.fontcolor(分类颜色) : t\n    }\n    categories.forEach((category, index) => {\n        let sub_categories = [];\n        if (小类定位.includes(';')) {\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\n            if (sub_categories.length == 0) {\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\n            }\n        } else {\n            sub_categories = pdfa(category, 小类定位);\n        }\n        if (index === 0) {\n            sub_categories.forEach((item, key) => {\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\n\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\n\n                let title = pdfh(item, _大类标题);\n                if (typeof (排除) != 'undefined' && 排除 != '') {\n                    title = title.replace(new RegExp(排除, \"g\"), \"\");\n                }\n                let params = {\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\n                }\n\n                let url = pd(item, _大类链接);\n                if (大类处理) {\n                    //log(一级分类处理)\n                    //log($.stringify(一级分类处理))\n                    let input = url;\n                    eval(\"result = \" + 一级分类处理);\n                    //log(result)\n                    url = result;\n                }\n                items.push({\n                    title: setTitle(key.toString(), cate_temp[index], title),\n                    col_type: 'scroll_button',\n                    url: $(url + '#noLoading#').lazyRule((params) => {\n                        let new_cate = [];\n                        params.clears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n                        params.allclears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n\n                        params.cate_temp.forEach((cate, index) => {\n                            new_cate.push(index === 0 ? params.key.toString() : \"0\")\n                        })\n                        putMyVar(\"head.cate\", JSON.stringify(new_cate));\n                        putMyVar(params.state, input);\n                        refreshPage(true);\n                        return \"hiker://empty\";\n                    }, params)\n                });\n            });\n            items.push({\n                col_type: \"blank_block\",\n                extra: {\n                    id: MY_RULE.title + 'cate_line',\n                }\n            })\n        } else {\n            sub_categories.forEach((item, key) => {\n                var extrapos = false;\n                if (item.includes('type=\"@extra\"')) {\n                    extrapos = true;\n                    //log('附加定位')\n                }\n\n                if (extrapos) {\n                    var title = pdfh(item, 'a&&Text');\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\n                        title = title.replace(new RegExp(排除, \"g\"), \"\");\n                    }\n                    var json = {\n                        type: pdfh(item, 'a&&state'),\n                        value: pdfh(item, 'a&&value'),\n                    }\n                } else {\n\n                    var title = pdfh(item, 分类标题);\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\n                        title = title.replace(new RegExp(排除, \"g\"), \"\");\n                    }\n\n                    var json = '';\n                    switch (true) {\n                        case 分类链接.includes('@@@'):\n                            json = {\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\n                            }\n                            break;\n                        case 分类链接.includes('@@'):\n                            json = {\n                                type: 分类链接.split('@@')[0],\n                                value: pdfh(item, 分类链接.split('@@')[1]),\n                            }\n                            break;\n                        default:\n                            json = pd(item, 分类链接);\n                            break;\n                    }\n                    /*var json=分类链接.includes('@@@')?{\n                         type:pdfh(item,分类链接.split('@@@')[0]),\n                         value:pdfh(item,分类链接.split('@@@')[1]),\n                     }:pd(item,分类链接);\n                     \n                     json=分类链接.includes('@@')?{\n                         type:分类链接.split('@@')[0],\n                         value:pdfh(item,分类链接.split('@@')[1]),\n                     }:pd(item,分类链接);*/\n\n                }\n\n                let params = {\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\n                }\n                cates.push({\n                    title: setTitle(key.toString(), cate_temp[index], title),\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\n                        params.allclears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n                        params.cate_temp[params.index] = params.key.toString();\n                        putMyVar(\"head.cate\", JSON.stringify(params.cate_temp));\n                        if (params.json.constructor === Object) {\n                            putMyVar('dt_' + params.json.type, params.json.value);\n                        } else {\n                            putMyVar(params.state, params.json);\n                        }\n                        refreshPage(true);\n                        return \"hiker://empty\";\n                    }, params),\n                    col_type: 'scroll_button',\n                    extra: {\n                        cls: MY_RULE.title + 'cate_button',\n                    }\n                });\n            });\n            cates.push({\n                col_type: \"blank_block\",\n                extra: {\n                    cls: MY_RULE.title + 'cate_button',\n                }\n            });\n        }\n    })\n}\n\n\nif (fold === \"1\" || 折叠状态 == false) {\n    items = items.concat(cates);\n}\nif (fold === \"0\") {\n    storage0.putMyVar('cate_button', cates)\n}\nif (typeof setPreResult != 'undefined') {\n    items = d.concat(items);\n    //清空继承数组\n    d.length = 0;\n    setPreResult(items);\n} else {\n    items.forEach(item => {\n        d.push(item);\n    })\n}\n"}],"title":"α","author":"zetalpha","version":2023111301,"type":"other","url":"hiker://empty##","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d=[];\nd.push({\n    title:'封装一些方法',\n    col_type:'text_1',\n    url:'hiker://empty'\n})\n\n\nsetResult(d)","searchFind":"","search_url":"","group":"④工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"二级\",\"path\":\"er\",\"rule\":\"js:\\n/*ver 20230930 2.0\\n */\\nconst customs = {};\\n\\n//预设\\nfunction customData(custom) {\\n  Object.keys(custom).forEach((k) => {\\n    customs[k] = custom[k];\\n  })\\n}\\n\\n\\nlet Erji = {\\n  通免: $('').lazyRule(() => {\\n    try {\\n      var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\\n      var url = html.url\\n      if (html.encrypt == '1') {\\n        url = unescape(url);\\n      } else if (html.encrypt == '2') {\\n        url = unescape(base64Decode(url));\\n      }\\n      if (/m3u8|mp4/.test(url)) {\\n        return url\\n      } else {\\n        return \\\"video://\\\" + input\\n      }\\n    } catch (e) {\\n      return \\\"video://\\\" + input\\n    }\\n  }),\\n  evalJSRule: function (item, jsRule) {\\n    let rule = jsRule.replace(\\\"@js:\\\", \\\"\\\");\\n    rule = rule.trim();\\n    //log($.stringify(rule))\\n    let input = item;\\n    if (rule.startsWith(\\\"(\\\")) {\\n      eval(\\\"result = \\\" + rule);\\n    } else {\\n      /**\\n      * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\\n      */\\n      eval(\\\"result = \\\" + \\\"(() => {\\\" + rule + \\\"})()\\\");\\n    }\\n    return result || \\\"\\\";\\n  },\\n  updataRule: function (rule, headers) {\\n    headers = headers != undefined ? headers : {};\\n    setLastChapterRule('js:' + $.toString((url, rule, headers) => {\\n      var html = fetch(url, headers);\\n      setResult(eval(rule))\\n    }, MY_URL, rule, headers))\\n  },\\n  updataFun: function (method, params) {\\n    var methodArgs = this.getArgs(method);\\n    var args = methodArgs.map(function(arg) {\\n      return params[arg];\\n    });\\n    //method.apply(null, args);\\n    setLastChapterRule('js:' + $.toString((method,args) => {\\n      method.apply(null, args);\\n    }, method,args))\\n  },\\n  updata:function(args1,args2){\\n      if(args1.constructor==Function){\\n        return this.updataFun(args1,args2);\\n      }else{\\n        return this.updataRule(args1,args2);\\n      }\\n  },\\n  getArgs:function(func){\\n    var args = func.toString().match(/function\\\\s.*?\\\\(([^)]*)\\\\)/)[1];\\n    return args.split(\\\",\\\").map(function (arg) {\\n      return arg.replace(/\\\\/\\\\*.*\\\\*\\\\//, \\\"\\\").trim();\\n    }).filter(function (args) {\\n      return args;\\n    });\\n  },\\n  maxList: (arr) => { \\n    return arr.reduce((acc, curr) => (curr.length > acc.length ? curr : acc), []) \\n  },\\n  close: function (list, sorts) {\\n    addListener('onClose', $.toString((list, sorts) => {\\n      list.map(x => {\\n        clearMyVar('er_' + x + 'fold');\\n        clearMyVar('er_' + x);\\n      })\\n      for (let i = 0; i < sorts; i++) {\\n        clearMyVar('playlist_' + i);\\n      }\\n      clearMyVar('er_playlists');\\n    }, list, sorts))\\n  },\\n  dataConvert: function (data) {\\n    var newclslist = data.map(function (obj) {\\n      var newObj = Object.assign({}, obj);\\n      if (newObj.hasOwnProperty('type')) {\\n        newObj.col_type = newObj.type;\\n      }\\n      return newObj;\\n    });\\n    return newclslist;\\n  },\\n  preLoad: function (func) {\\n    let myfunc = null\\n    if (func != undefined && func.constructor == Function) {\\n      myfunc = func\\n    }\\n    $.extend({\\n      dataConvert: this.dataConvert,\\n      msm: Methods.MultiSelectMode,\\n      func: myfunc,\\n    })\\n  },\\n  small: function (str, color,h) {\\n    h=h==undefined?true:h;\\n    return (h?'““””':'')+'<small><font color=\\\"' + (color || '') + '\\\">' + str + '</font></small>';\\n  },\\n  声明: function () {\\n    d.push({\\n      title: this.small('以上数据来源于网络，如您喜欢，请支持官方！', '#871F78'),\\n      desc: this.small('此规则仅限学习交流使用，请于导入后24小时内删除，任何组织或个人不得以任何方式方法传播此规则的整体或部分！', '#F20C00'),\\n      url: 'hiker://empty',\\n      col_type: 'text_center_1'\\n    });\\n  },\\n  substr: function (str, maxLength) {\\n    let len = 0;\\n    for (let i = 0; i < str.length; i++) {\\n      if (str.charCodeAt(i) > 255) {\\n        len += 2;\\n      } else {\\n        len++;\\n      }\\n      if (len > maxLength) {\\n        return str.slice(0, i) + '...';\\n      }\\n    }\\n    return str;\\n  },\\n  setDesc: function (desc, num) {\\n    var custom = this.getPreset();\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\n    if (desc.replace(/(<br>|\\\\s+)/g, '').length == 0) {\\n      return\\n    }\\n    var info = storage0.getMyVar('er_info', '{}')\\n    if (info['desc'] != undefined) {\\n      info['desc'] = info['desc'] + ' 简介:' + desc;\\n      storage0.putMyVar('er_info', info);\\n    }\\n\\n    const mark = 'desc';\\n    num = typeof (num) == 'undefined' ? 100 : num\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\n    desc = desc.replace(/'/g, \\\"&#39;\\\");\\n    desc = desc.replace(/\\\\r\\\\n/g, \\\"<br>\\\");\\n\\n\\n    let sdesc = this.substr(desc, num);\\n\\n    var colors = {\\n      show: custom.简介展开,\\n      hide: custom.简介收起\\n    }\\n\\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\\n      var show = storage0.getItem(m, '0');\\n      var title = findItem('desc').title;\\n      var re = /(<\\\\/small><br>.*?>).+/g;\\n      var exp = '展开:';\\n      var ret = '收起:';\\n      if (show == '1') {\\n        updateItem('desc', {\\n          title: title\\n            .replace(ret, exp)\\n            .replace(re, '$1' + sdc + '</small>')\\n            .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.hide + '$2')\\n\\n        })\\n        storage0.setItem(m, '0');\\n      } else {\\n        updateItem('desc', {\\n          title: title\\n            .replace(exp, ret)\\n            .replace(re, '$1' + dc + '</small>')\\n            .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.show + '$2')\\n        })\\n        storage0.setItem(m, '1');\\n      }\\n      return `hiker://empty`\\n    }, desc, sdesc, mark, colors)\\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\\n    d.push({\\n      title: '' + '<b><font color=\\\"#098AC1\\\">∷剧情简介\\t</font></b>' + \\\"<small><a style='text-decoration: none;' href='\\\" + lazy + \\\"'>\\\" + sc + '</a></small><br><font color=\\\"' + cs + '\\\">' + `${dc}` + '</small>',\\n      col_type: 'rich_text',\\n      extra: {\\n        id: 'desc',\\n        lineSpacing: 6,\\n        textSize: 15,\\n        lineVisible: true,\\n      }\\n    })\\n  },\\n  setDesc2: function (desc, num) {\\n    var custom = this.getPreset();\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\n    if (desc.replace(/(<br>|\\\\s+)/g, '').length == 0) {\\n      return\\n    }\\n    var info = storage0.getMyVar('er_info', '{}')\\n    if (info['desc'] != undefined) {\\n      info['desc'] = info['desc'] + ' 简介:' + desc;\\n      storage0.putMyVar('er_info', info);\\n    }\\n\\n    const mark = 'desc';\\n    num = typeof (num) == 'undefined' ? 100 : num\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\n    desc = desc.replace(/'/g, \\\"&#39;\\\");\\n    desc = desc.replace(/\\\\r\\\\n/g, \\\"<br>\\\");\\n\\n    let sdesc = this.substr(desc, num);\\n\\n    var colors = {\\n      show: custom.简介展开,\\n      hide: custom.简介收起\\n    }\\n    d.push({\\n      title: '剧情简介<span style=\\\"color:#ff0000;\\\"><b><small>' + (storage0.getItem(mark, '0')=='0'?'展开':'收起') + '</small></b></span>:',\\n      col_type: 'avatar',\\n      img: 'https://hikerfans.com/tubiao/system/75.png',\\n      url: $('#noLoading#').lazyRule((mark,dc, sdc,cs) => {\\n        var ds = storage0.getItem(mark, '0');\\n        var title = findItem('dshow').title;\\n        var dtitle = findItem('dcontent').title;\\n        if (ds == '0') {\\n          storage0.setItem(mark, '1')\\n          updateItem('dcontent', {\\n            title: dtitle.replace(/\\\\>.*?\\\\</,'>'+dc+'<')\\n            .replace(/(color=\\\").*?(\\\")/,'$1'+cs.show+'$2')\\n          });\\n          updateItem('dshow', {\\n            title: title.replace('展开', '收起')                        \\n          });\\n\\n\\n        } else {\\n          storage0.setItem(mark, '0')\\n          updateItem('dcontent', {\\n            title: dtitle.replace(/\\\\>.*?\\\\</,'>'+sdc+'<')\\n            .replace(/(color=\\\").*?(\\\")/,'$1'+cs.hide+'$2')\\n          });\\n          updateItem('dshow', {\\n            title: title.replace('收起', '展开')                        \\n          });\\n        }\\n        return 'hiker://empty'\\n      },mark, desc, sdesc,colors),\\n      extra: {\\n        id: 'dshow',\\n      }\\n    })\\n    var sc=storage0.getItem(mark, '0') == '0' ? sdesc.fontcolor(colors.hide) : desc.fontcolor(colors.show);\\n    d.push({\\n      title:sc,\\n      col_type: 'rich_text',\\n      extra: {\\n        id: 'dcontent',\\n        lineSpacing: 6,\\n        textSize: 15,\\n        lineVisible: true,\\n      }\\n    })\\n  },\\n  strConvert:function(arr, sp) {\\n      sp = sp != undefined ? sp : '/';\\n      var reg = new RegExp(sp);\\n\\n      return arr.map(x => {\\n        str = x;\\n        if (reg.test(str)) {\\n          str = str.split(sp).map((val, index) => (index === 0 ? '' : '') + val).slice(0, 5).join(' ').replace(/ $/, '');\\n        }\\n        return str\\n      })\\n  },\\n  setContent: function (obj) {\\n    //log(obj)\\n    var custom = this.getPreset();\\n    var num = obj.num != undefined ? obj.num : 100;\\n    var contents = obj.main;\\n    if (contents.constructor == String) {\\n      contents = contents.split('\\\\n');\\n    }\\n    var sortOrder = obj.sort ? obj.sort : [];\\n    var filterlist = obj.filist ? obj.filist : [];\\n    var img = obj.img;\\n    var texts = contents.map(x => {\\n      if (x.includes('href')) {\\n        var list = pdfa(x, 'body&&a').map(k => pdfh(k, 'Text')).slice(0, 5).join(' ');\\n        if (list == '') {\\n          return pdfh(x, 'Text');\\n        } else {\\n          return pdfh(x, ':matchText&&Text') + list;\\n        }\\n      }\\n      return pdfh(x, 'Text');\\n    });\\n    var array = texts.sort((a, b) => {\\n      const indexA = sortOrder.indexOf(a.substr(0, 2));\\n      const indexB = sortOrder.indexOf(b.substr(0, 2));\\n      return indexA - indexB;\\n    })\\n    var regex = new RegExp('(' + sortOrder.join('|') + ')');\\n    array = array.filter(function (item) {\\n      return regex.test(item);\\n    });\\n\\n    var fireg = new RegExp('(' + filterlist.join('|') + ')');\\n    if (filterlist.length > 0) {\\n      array = array.filter(function (item) {\\n        return !fireg.test(item);\\n      });\\n    }\\n    //log(array)\\n\\n    //array = sortOrder.length==0?array:this.strConvert(array);\\n    array = this.strConvert(array, obj.sp);\\n\\n    if (array.length > 6) {\\n      array = array.slice(0, 6);\\n    }\\n\\n    var titles = [];\\n    var descs = [];\\n\\n    switch (array.length) {\\n      case 2:\\n        titles = array[0];\\n        descs = array[1];\\n        break;\\n      case 3:\\n        titles = array.slice(0, 1);\\n        descs = array.slice(1);\\n        break;\\n      case 4:\\n      case 5:\\n        titles = array.slice(0, 2);\\n        descs = array.slice(2);\\n        break;\\n      case 6:\\n      default:\\n        titles = array.slice(0, 3);\\n        descs = array.slice(3);\\n        break;\\n    }\\n    storage0.putMyVar('er_info', {\\n      desc: descs.join('\\\\n'),\\n      img: img,\\n    })\\n    d.push({\\n      title: '<b>'+titles[0].fontcolor(custom.标题颜色)+'</b>'+this.small( '\\\\n' + titles.slice(1, 3).join('\\\\n'), custom.描述上),\\n      desc: this.small(descs.join('\\\\n'), custom.描述下),\\n      pic_url: img + '@Referer=',\\n      url: MY_URL,\\n      col_type: 'movie_1_vertical_pic_blur',\\n      extra: {\\n        id: \\\"detailid\\\",\\n        gradient: obj.渐变 ? obj.渐变 : false,\\n      }\\n    })\\n    if (obj.desc != undefined) {\\n      this.setDesc(obj.desc, num);\\n    }\\n  },\\n  setCustom: function (obj, img,colors) {\\n    var array = [];\\n    if (obj.constructor == Array) {\\n      array = obj;\\n    }\\n    var titles = [];\\n    var descs = [];\\n    if('titles' in obj){\\n      titles=obj.titles;\\n    }\\n    if('descs' in obj){\\n      descs=obj.descs;\\n    }\\n    \\n    if(titles.length==0&&descs.length==0){\\n    array = this.strConvert(array);\\n    switch (array.length) {\\n      case 2:\\n        titles = array[0];\\n        descs = array[1];\\n        break;\\n      case 3:\\n        titles = array.slice(0, 1);\\n        descs = array.slice(1);\\n        break;\\n      case 4:\\n      case 5:\\n        titles = array.slice(0, 2);\\n        descs = array.slice(2);\\n        break;\\n      case 6:\\n        titles = array.slice(0, 3);\\n        descs = array.slice(3);\\n        break;\\n      }\\n    }\\n    \\n    \\n    storage0.putMyVar('er_info', {\\n      desc: descs.join('\\\\n'),\\n      img: img,\\n    })\\n    if (colors != undefined) {\\n      var color_list=[];\\n\\n      for (var key in colors) {\\n      var range = key.split('-');\\n      var start = parseInt(range[0]);\\n      var end = range[1] ? parseInt(range[1]) : start;\\n      for (var i = start; i <= end; i++) {\\n        color_list[i-1] = colors[key];\\n        }\\n      }\\n\\n      \\n      if(color_list!=titles.length+descs.length){\\n        const fillCount = (titles.length+descs.length) - color_list.length; // 需要补齐的个数\\n        const filledArr = Array(fillCount).fill({}); // 生成填充数组\\n        color_list=color_list.concat(filledArr);\\n      }\\n  \\n      var midIndex = Math.floor(color_list.length / 2); \\n      var firstHalf = color_list.slice(0, midIndex);\\n      var secondHalf = color_list.slice(midIndex);\\n           \\n      function textArray(style,textArray) {\\n        var list=[];\\n        style.forEach((x, i) => {\\n        var left = [];\\n        var right = [];\\n        var str = textArray[i];\\n        Object.keys(x).forEach(k => {\\n            switch (k) {\\n                case 'color':\\n                    left.push('<font color=\\\"' + x[k] + '\\\">');\\n                    right.push('</font>');\\n                    break;\\n                default:\\n                    left.push(`<${k}>`);\\n                    right.push(`</${k}>`);\\n                break;\\n                }\\n              });\\n             list[i] = left.join('') + str + right.join('');\\n          });\\n        return list;\\n      }\\n      titles=textArray(firstHalf,titles);\\n      descs=textArray(secondHalf,descs);\\n      \\n      d.push({\\n        title:'““””'+titles[0]+'\\\\n'+titles.slice(1,3).join('\\\\n'),\\n        desc:'““””'+descs.join('\\\\n'),\\n        img:img+'@Referer='+img,\\n        url:MY_URL,\\n        col_type:'movie_1_vertical_pic_blur',\\n        extra:{\\n          id:\\\"detailid\\\",\\n        }\\n      })\\n      \\n    } else {\\n      d.push({\\n        title: titles[0] + '\\\\n' + this.small(titles.slice(1, 3).join('\\\\n')),\\n        desc: this.small(descs.join('\\\\n')),\\n        pic_url: img + '@Referer=',\\n        url: MY_URL,\\n        col_type: 'movie_1_vertical_pic_blur',\\n        extra:{\\n          id: \\\"detailid\\\",\\n        }\\n      })\\n  }\\n  },\\n  isColor: function (text) {\\n    const regex = /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$|^([a-z]+)$/i;\\n    return regex.test(text);\\n  },\\n  getPreset: function (custom) {\\n    if (typeof customs == 'object' && !custom) {\\n      custom = customs;\\n    } else {\\n      custom = custom ? custom : {}\\n    }\\n    custom.正序颜色 = (custom.正序颜色 && this.isColor(custom.正序颜色)) ? custom.正序颜色 : '#1AAD19';\\n    custom.逆序颜色 = (custom.逆序颜色 && this.isColor(custom.逆序颜色)) ? custom.逆序颜色 : '#FF0000';\\n    custom.图标 = custom.图标 ? custom.图标 : 'https://i2.100024.xyz/2023/06/10/h4z627.webp';\\n    custom.线路选中 = custom.线路选中 ? custom.线路选中 : '#008B8B';\\n    custom.线路样式 = custom.线路样式 ? custom.线路样式 : 'scroll_button';\\n    custom.分割样式 = custom.分割样式 ? custom.分割样式 : 'blank_block';\\n    custom.简介展开 = custom.简介展开 ? custom.简介展开 : 'black';\\n    custom.简介收起 = custom.简介收起 ? custom.简介收起 : 'grey';\\n    Object.assign({}, customs, custom);\\n    //log(custom)\\n    return custom;\\n  },\\n  createPList: function (tabs, vari, shsort, custom, parse) {\\n    vari = \\\"er_\\\" + vari;\\n    let stabs = tabs;\\n    tabs = tabs.map(x => x.title!=undefined?x.title:x);\\n    var info = { parse: parse, mark: shsort };\\n    if (stabs.some(x => x.hasOwnProperty('url'))) {\\n      info['urls'] = stabs.map(x => x.url);\\n    }\\n\\n    for (var i = 0; i < tabs.length; i++) {\\n      var url = $('#noLoading#').lazyRule((vari, shsort, i, linec, info) => {\\n\\n        var lists = storage0.getMyVar(shsort + '_list', '[]');\\n\\n        if (getMyVar(vari + 'fold', '1') == '0') {\\n          var btn = findItem(shsort + '_button');\\n          var folds = ['<font color=\\\"#D3D3D3\\\">☷', '<font color=\\\"#FFA500\\\">☰'];\\n          var plist = storage0.getMyVar('er_playlists', '{}');\\n\\n          var col = plist[shsort].col_type;\\n          var cls = plist[shsort].cls;\\n          var pic = plist[shsort].pic;\\n          var extra = plist[shsort].extra;\\n          //log(extra)\\n          updateItem(btn.extra.id, {\\n            title: btn.title.replace(folds[0], folds[1]),\\n          })\\n\\n          putMyVar(vari + 'fold', '1');\\n          //return 'toast://展开才能操作';\\n        } else {\\n          var plist = storage0.getMyVar('er_playlists', '{}');\\n\\n          var col = plist[shsort].col_type;\\n          var cls = plist[shsort].cls;\\n          var pic = plist[shsort].pic;\\n          var extra = plist[shsort].extra;\\n          //log(extra)\\n        }\\n        putMyVar(vari, i);\\n\\n        var xlist = lists[i];\\n        if ($.func != undefined && $.func.constructor == Function) {\\n          deleteItemByCls(shsort);\\n          addItemAfter(shsort + '_line', {\\n            col_type: 'pic_1',\\n            img: 'https://img.nickyam.com/file/fe41a7a1744a3a8194df2.gif',\\n            url: 'toast://loading',\\n            extra: {\\n              cls: shsort\\n            }\\n          })\\n          xlist = $.func(i, info);\\n          storage0.putMyVar(shsort + '_list', xlist);\\n        }\\n        var plays = xlist.map(x => {\\n          return {\\n            title: x.title,\\n            url: x.url,\\n            col_type: col,\\n            pic: pic,\\n            extra: Object.assign({}, extra, {\\n              id: x.url.replace(/@lazyRule[\\\\s\\\\S]+/g, ''),\\n              cls: cls,\\n            })\\n          }\\n        })\\n        if (getMyVar(shsort + '_sort') == '1') {\\n          plays.reverse();\\n        }\\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\\n        if (pcfg['单推']) {\\n          updateItem(shsort + '_push', {\\n            title: pcfg['obj']['单推'][0]\\n          })\\n          pcfg['单推'] = false;\\n        }\\n        if (pcfg['选推']) {\\n          updateItem(shsort + '_pushs', {\\n            title: pcfg['obj']['选推'][0]\\n          })\\n          pcfg['选推'] = false;\\n        }\\n        storage0.putMyVar(shsort + '_pushcfg', pcfg);\\n        deleteItemByCls(shsort);\\n        addItemAfter(shsort + '_line', plays);\\n\\n        var tabx = findItemsByCls(shsort + '_tab');\\n        tabx.forEach((x, ii) => {\\n          var title = x.title;\\n          if (i == ii) {\\n            updateItem(x.extra.id, {\\n              title: title.replace(/#(\\\\w+)?/g, linec),\\n            })\\n          } else {\\n            updateItem(x.extra.id, {\\n              title: title.replace(/#(\\\\w+)?/g, '#'),\\n            })\\n          }\\n        })\\n        return 'toast://切换成功！';\\n      }, vari, shsort, i, custom.线路选中, info)\\n      d.push({\\n        title: '““””' + (getMyVar(vari, '0') == i ? tabs[i].fontcolor(custom.线路选中) : tabs[i].fontcolor('#')),\\n        url: url,\\n        col_type: custom.线路样式,\\n        extra: {\\n          cls: shsort + '_tab',\\n          id: shsort + '_tab_' + i,\\n        }\\n      })\\n    }\\n    d.push({\\n      col_type: custom.分割样式,\\n      extra: {\\n        id: shsort + '_line',\\n      }\\n    })\\n  },\\n  pushTab: function (vari, shsort) {\\n    addListener('onRefresh', $.toString((shsort) => {\\n      clearMyVar(shsort + '_pushcfg');\\n      clearMyVar(shsort + '_duoselect');\\n    }, shsort))\\n    var pobj = {\\n      '单推': ['⦿单推', '<b>⦿单推</b>'.fontcolor('#00FA9A')],\\n      '选推': ['☑选推', '<b>☑选推</b>'.fontcolor('#4682B4')],\\n    }\\n\\n    d.push({\\n      title: '⌘',\\n      col_type: 'scroll_button',\\n      url: 'hiker://empty',\\n      extra: {\\n        cls: shsort + '_pushtab',\\n      }\\n    }, {\\n      title: pobj['单推'][0],\\n      col_type: 'scroll_button',\\n      url: $('#noLoading#').lazyRule((shsort, pobj, vari) => {\\n        if (getMyVar(vari + 'fold', '1') == '0') {\\n          return 'toast://展开才能操作';\\n        }\\n\\n        var titles = pobj['单推'];\\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\\n        pcfg['obj'] = pobj;\\n        var 单推 = pcfg['单推'] ? pcfg['单推'] : false;\\n\\n        if (单推) {\\n          updateItem(shsort + '_push', {\\n            title: titles[0],\\n          })\\n          pcfg['单推'] = false;\\n          pcfg['playlist'].map((x) => {\\n            updateItem(x.extra.id, {\\n              url: x.url,\\n            })\\n          })\\n        } else {\\n          updateItem(shsort + '_push', {\\n            title: '““””' + titles[1],\\n          })\\n          updateItem(shsort + '_pushs', {\\n            title: pobj['选推'][0],\\n          })\\n          pcfg['单推'] = true;\\n          pcfg['选推'] = false;\\n          var playlist = findItemsByCls(shsort);\\n          pcfg['playlist'] = playlist;\\n          findItemsByCls(shsort).map(x => {\\n            var dpush = {\\n              name: getPageTitle(),\\n              url: x.title + '$' + x.extra.id\\n            }\\n            updateItem(x.extra.id, {\\n              url: $('').lazyRule((dpush) => {\\n                return 'hiker://page/push?rule=XYQ推送&pushurl=' + encodeURIComponent(JSON.stringify(dpush));\\n              }, dpush)\\n            })\\n          })\\n        }\\n        storage0.putMyVar(shsort + '_pushcfg', pcfg);\\n        return 'toast://' + (!单推 ? '单推开启' : '单推关闭');\\n      }, shsort, pobj, vari),\\n      extra: {\\n        id: shsort + '_push',\\n        cls: shsort + '_pushtab',\\n      }\\n    }, {\\n      title: pobj['选推'][0],\\n      col_type: 'scroll_button',\\n      url: $('#noLoading#').lazyRule((shsort, pobj, vari) => {\\n        if (getMyVar(vari + 'fold', '1') == '0') {\\n          return 'toast://展开才能操作';\\n        }\\n        var titles = pobj['选推'];\\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\\n        pcfg['obj'] = pobj;\\n        var 选推 = pcfg['选推'] ? pcfg['选推'] : false;\\n        if (选推) {\\n          updateItem(shsort + '_pushs', {\\n            title: titles[0],\\n          })\\n          pcfg['选推'] = false;\\n          pcfg['playlist'].map((x) => {\\n            updateItem(x.extra.id, {\\n              title: x.title,\\n              url: x.url,\\n            })\\n          })\\n          updateItem(shsort + '_pushto', {\\n            title: '推送本页=>TVBox',\\n          });\\n          clearMyVar(shsort + '_duoselect');\\n        } else {\\n          updateItem(shsort + '_pushs', {\\n            title: '““””' + titles[1],\\n          })\\n          pcfg['选推'] = true;\\n          pcfg['单推'] = false;\\n          var playlist = findItemsByCls(shsort);\\n          pcfg['playlist'] = playlist;\\n          let Ids = playlist.map(it => it.extra.id);\\n          Ids.forEach(x => {\\n            var title = findItem(x).title;\\n            updateItem(x, {\\n              url: $.msm(title, x, shsort),\\n            });\\n          });\\n          updateItem(shsort + '_push', {\\n            title: pobj['单推'][0],\\n          })\\n          updateItem(shsort + '_pushto', {\\n            title: '推送选中=>TVBox',\\n          });\\n        }\\n        storage0.putMyVar(shsort + '_pushcfg', pcfg);\\n        return 'toast://' + (!选推 ? '选推开启' : '选推关闭');\\n      }, shsort, pobj, vari),\\n      extra: {\\n        id: shsort + '_pushs',\\n        cls: shsort + '_pushtab'\\n      }\\n    }, {\\n      title: \\\"推送本页=>TVBox\\\",\\n      col_type: 'scroll_button',\\n      url: $('#noLoading#').lazyRule((shsort, vari) => {\\n        var pcfg = storage0.getMyVar(shsort + '_pushcfg', '{}');\\n        var 单推 = pcfg['单推'] ? pcfg['单推'] : false;\\n        var 选推 = pcfg['选推'] ? pcfg['选推'] : false;\\n        if (!单推 && !选推) {\\n          var tabs = storage0.getMyVar(shsort + '_tabs', '[]');\\n          try {\\n            var pls = storage0.getMyVar(shsort + '_list', '[]').map(li => {\\n              return li.map(item => item.title + '$' + item.url.replace(/@lazyRule[\\\\s\\\\S]+/g, '')).join('#')\\n            }).join('$$$');\\n          } catch (e) {\\n            var pls = storage0.getMyVar(shsort + \\\"_list\\\", '[]').map(x => x.title + \\\"$\\\" + x.url.replace(/@lazyRule[\\\\s\\\\S]+/g, '')).join(\\\"#\\\");\\n            var tabs = [tabs[getMyVar(vari, '0')]];\\n          }\\n          //log(pls)\\n          //log(tabs)\\n        }\\n        if (选推) {\\n          var pls = storage0.getMyVar(shsort + \\\"_duoselect\\\", '[]').map(x => x.title + \\\"$\\\" + x.url).join(\\\"#\\\");\\n          if (pls.length == 0) {\\n            return 'toast://选择为空';\\n          }\\n          var tabs = ['播放列表'];\\n        }\\n\\n        var info = storage0.getMyVar('er_info', '{}');\\n        var desc = info['desc'];\\n        var 推送 = {\\n          \\\"name\\\": getPageTitle(),\\n          \\\"content\\\": desc || '',\\n          \\\"pic\\\": info['img'] || '',\\n          \\\"from\\\": tabs.join('$$$'),\\n          \\\"url\\\": pls,\\n        }\\n        //log(推送)\\n        return \\\"hiker://page/push?rule=XYQ推送&pushurl=\\\" + encodeURIComponent(JSON.stringify(推送))\\n      }, shsort, vari),\\n      extra: {\\n        id: shsort + '_pushto',\\n        cls: shsort + '_pushtab'\\n      }\\n    }, {\\n      col_type: 'blank_block',\\n      extra: {\\n        cls: shsort + '_pushtab',\\n      }\\n    })\\n  },\\n  setLongclick: function (shsort, custom) {\\n    return [{\\n      title: '样式🎨',\\n      js: $.toString((shsort) => {\\n        let all_cols = [''].concat(getColTypes());\\n        all_cols = all_cols.filter(x =>\\n          /(text_|flex).*/.test(x) && x != 'text_icon');\\n        //log(all_cols)\\n        let cls = storage0.getMyVar('er_playlists', '{}') ||\\n          '';\\n        if (cls[shsort] != '') {\\n          col = cls[shsort].col_type;\\n        }\\n        let 按钮样式 = all_cols.map((it) => {\\n          return it === col ? '➡️' + it : it;\\n        });\\n        let tips = '请选择选集按钮样式';\\n        return $(按钮样式, 2, tips).select((shsort, cls) => {\\n          input = input.replace(/➡️/g, '');\\n          /*storage0.setItem('按钮样式', input);*/\\n          let oldIds = (findItemsByCls(shsort) || []).map(it => it.extra.id); //老元素ids\\n          oldIds.forEach(x => {\\n            updateItem(x, {\\n              col_type: input\\n            });\\n          });\\n          return 'toast://已切换选集按钮样式为:' + input;\\n        }, shsort, cls);\\n      }, shsort, custom)\\n    }]\\n  },\\n  setTabs: function (tabs, vari, shsort, parse) {\\n    let custom = parse.自定义;\\n    let stabs = tabs;\\n    tabs = tabs.map(x => x.title!=undefined?x.title:x);\\n\\n    custom = this.getPreset(custom);\\n\\n    shsort = shsort ? shsort : 'shsort';\\n    var title = (getMyVar(shsort + '_sort', '0') == '1') ? '<b><span style=\\\"color: ' + custom.逆序颜色 + '\\\">逆序</span></b>' : '<b><span style=\\\"color: ' + custom.正序颜色 + '\\\">正序</span></b>'\\n    \\n    d.push({\\n      title: vari + ':' + title,\\n      desc: '共' + String(tabs.length).fontcolor('#4682B4') + '条线路',\\n      url: $('#noLoading#').lazyRule((shsort, vari, custom) => {\\n        let conf = getMyVar(shsort + '_sort', '0');\\n        if (getMyVar('er_' + vari + 'fold', '1') == '0') {\\n          return 'toast://展开才能操作';\\n        }\\n        var clslists = findItemsByCls(shsort);\\n        var newclslist = $.dataConvert(clslists);\\n\\n        var titles = [`${custom.正序颜色}\\\">正序`, `${custom.逆序颜色}\\\">逆序`];\\n\\n        deleteItemByCls(shsort);\\n        newclslist.reverse();\\n        addItemAfter(shsort + '_line', newclslist);\\n\\n        var obj = findItem(shsort + '_avatar')\\n\\n        if (conf == '1') {\\n          updateItem(shsort + '_avatar', {\\n            title: obj.title.replace(titles[1], titles[0]),\\n          })\\n          putMyVar(shsort + '_sort', '0');\\n        } else {\\n          updateItem(shsort + '_avatar', {\\n            title: obj.title.replace(titles[0], titles[1]),\\n          })\\n          putMyVar(shsort + '_sort', '1');\\n        }\\n        return 'toast://切换排序成功';\\n      }, shsort, vari, custom),\\n      col_type: 'avatar',\\n      img: custom.图标,\\n      extra: {\\n        id: shsort + '_avatar',\\n        longClick: this.setLongclick(shsort),\\n      }\\n    })\\n    var 折叠 = '““””<b>' + '☷'.fontcolor(\\\"#D3D3D3\\\");\\n    var 展开 = '““””<b>' + '☰'.fontcolor(\\\"#FFA500\\\");\\n    var foldname = 'er_' + vari + 'fold';\\n    var fold = getMyVar(foldname, '1');\\n    if (typeof (parse['推送']) != 'undefined' && parse['推送'])\\n      this.pushTab('er_' + vari, shsort);\\n\\n    d.push({\\n      title: fold === '0' ? 折叠 : 展开,\\n      col_type: custom.线路样式,\\n      url: $('#noLoading#').lazyRule((foldname, shsort) => {\\n        var fold = getMyVar(foldname, '1');\\n        var obj = findItem(shsort + '_line');\\n        var btn = findItem(shsort + '_button');\\n        var folds = ['<font color=\\\"#D3D3D3\\\">☷', '<font color=\\\"#FFA500\\\">☰'];\\n\\n        if (fold == '0') {\\n          putMyVar(foldname, '1');\\n          var cs = storage0.getMyVar(shsort + '_cls');\\n          addItemAfter(obj.extra.id, cs);\\n          updateItem(btn.extra.id, {\\n            title: btn.title.replace(folds[0], folds[1]),\\n          })\\n        }\\n        if (fold == '1') {\\n          putMyVar(foldname, '0');\\n          var pcls = findItemsByCls(shsort);\\n          var cx = $.dataConvert(pcls);\\n          storage0.putMyVar(shsort + '_cls', cx);\\n          deleteItemByCls(shsort);\\n          updateItem(btn.extra.id, {\\n            title: btn.title.replace(folds[1], folds[0]),\\n          })\\n        }\\n\\n        return 'toast://' + (fold === '1' ? '收起' : '展开');\\n      }, foldname, shsort),\\n      extra: {\\n        id: shsort + '_button',\\n      }\\n    })\\n    this.createPList(stabs, vari, shsort, custom, parse);\\n  },\\n  setTabs2: function (tabs, vari, shsort, parse, exp) {\\n    let custom = parse.自定义;\\n    let stabs = tabs;\\n    tabs = tabs.map(x => x.title!=undefined?x.title:x);\\n    custom = this.getPreset(custom);\\n    shsort = shsort ? shsort : 'shsort';\\n    var title = (getMyVar(shsort + '_sort', '0') == '1') ? '<b><span style=\\\"color:' + custom.逆序颜色 + '\\\">逆序</span></b>' : '<b><span style=\\\"color:' + custom.正序颜色 + '\\\">正序</span></b>'\\n\\n    var 折叠 = '<b>折叠' + '☷'.fontcolor(\\\"#D3D3D3\\\");\\n    var 展开 = '<b>展开' + '☰'.fontcolor(\\\"#FFA500\\\");\\n    var foldname = 'er_' + vari + 'fold';\\n    var fold = getMyVar(foldname, '1');\\n\\n    var url = $('#noLoading#').lazyRule((foldname, shsort, push) => {\\n      var pl = storage0.getMyVar('er_playlists', '{}');\\n      if (Object.keys(pl).length == 1) {\\n        return 'hiker://empty'\\n      }\\n\\n      var fold = getMyVar(foldname, '1');\\n      var obj = findItem(shsort + '_avatar')\\n      if (fold == '1') {\\n        var bcls = findItem(shsort + '_button');\\n        var tcls = findItemsByCls(shsort + '_tab');\\n        var lcls = findItem(shsort + '_line');\\n\\n        var pcls = findItemsByCls(shsort);\\n        var cs = [bcls].concat(tcls, [lcls], pcls);\\n\\n        if (push) {\\n          var pcls = findItemsByCls(shsort + '_pushtab');\\n          cs = pcls.concat(cs);\\n        }\\n\\n        var cx = $.dataConvert(cs);\\n        storage0.putMyVar(shsort + '_cls', cx);\\n        if (push) {\\n          deleteItemByCls(shsort + '_pushtab');\\n        }\\n        deleteItem(bcls.extra.id);\\n        deleteItemByCls(shsort + '_tab');\\n        deleteItem(shsort + '_line');\\n        deleteItemByCls(shsort);\\n\\n        updateItem(obj.extra.id, {\\n          desc: obj.desc.replace('展开<font color=\\\"#FFA500\\\">☰', '折叠<font color=\\\"#D3D3D3\\\">☷'),\\n        })\\n      }\\n      if (fold == '0') {\\n        var cs = storage0.getMyVar(shsort + '_cls');\\n        addItemAfter(shsort + '_avatar', cs);\\n        updateItem(obj.extra.id, {\\n          desc: obj.desc.replace('折叠<font color=\\\"#D3D3D3\\\">☷', '展开<font color=\\\"#FFA500\\\">☰'),\\n        })\\n      }\\n      putMyVar(foldname, fold === '1' ? '0' : '1');\\n      return 'toast://' + (fold === '1' ? '收起' : '展开');\\n    }, foldname, shsort, (parse['推送'] ? true : false));\\n    var desc = (fold === '0' ? 折叠 : 展开) + '\\\\t';\\n\\n    if (exp.length == 1) {\\n      url = 'hiker://empty';\\n      desc = '';\\n    }\\n    d.push({\\n      title: vari + ':\\\\t\\\\t' + '共' + String(tabs.length).fontcolor('#4682B4') + '条线路',\\n      desc: desc,\\n      col_type: 'avatar',\\n      img: custom.图标,\\n      url: url,\\n      extra: {\\n        id: shsort + '_avatar',\\n        longClick: this.setLongclick(shsort),\\n      }\\n    })\\n    if (typeof (parse['推送']) != 'undefined' && parse['推送'])\\n      this.pushTab('er_' + vari, shsort);\\n\\n    if (fold == '0') {\\n      return\\n    }\\n\\n    d.push({\\n      title: '““””' + title,\\n      url: $('#noLoading#').lazyRule((vari, shsort, custom) => {\\n        let conf = getMyVar(shsort + '_sort', '0');\\n        var clslists = findItemsByCls(shsort);\\n        var newclslist = $.dataConvert(clslists);\\n        deleteItemByCls(shsort);\\n        newclslist.reverse();\\n        addItemAfter(shsort + '_line', newclslist);\\n\\n        var obj = findItem(shsort + '_button')\\n        var titles = [`${custom.正序颜色}\\\">正序`, `${custom.逆序颜色}\\\">逆序`];\\n\\n        if (conf == '1') {\\n          updateItem(shsort + '_button', {\\n            title: obj.title.replace(titles[1], titles[0]),\\n          })\\n          putMyVar(shsort + '_sort', '0');\\n        } else {\\n          updateItem(shsort + '_button', {\\n            title: obj.title.replace(titles[0], titles[1]),\\n          })\\n          putMyVar(shsort + '_sort', '1');\\n        }\\n        //refreshPage()\\n        return 'toast://切换排序成功'\\n      }, vari, shsort, custom),\\n      col_type: custom.线路样式,\\n      extra: {\\n        id: shsort + '_button',\\n      }\\n    })\\n    this.createPList(stabs, vari, shsort, custom, parse);\\n  },\\n  setLists: function (lists, index, shsort, parse) {\\n    //log(lists)\\n    shsort = shsort ? shsort : 'shsort';\\n    storage0.putMyVar(shsort + '_list', lists);\\n\\n    parse = parse ? parse : {};\\n    var 样式 = parse.样式 ? parse.样式 : '';\\n    var 图标 = parse.图标 ? parse.图标 : 'https://hikerfans.com/tubiao/movie/13.svg';\\n    var ajax = parse.动态数据 ? parse.动态数据 : false;\\n\\n    if (ajax) {\\n      var list = lists;\\n      if (getMyVar(shsort + '_sort') == '1' && lists.length > 0) {\\n        list = lists.reverse();\\n      }\\n    } else {\\n      var list = lists[index];\\n      if (getMyVar(shsort + '_sort') == '1' && lists.length > 0) {\\n        list = lists[index].reverse();\\n      }\\n    }\\n\\n\\n\\n    if (样式 == '') {\\n      样式 = list.length > 3 ? 'text_4' : 'text_2'\\n    }\\n\\n    var extra = '';\\n\\n    if (parse.extra != undefined) {\\n      extra = parse.extra\\n    }\\n\\n    if (list.length > 0) {\\n      var plist = storage0.getMyVar('er_playlists', '{}');\\n      if (!plist.hasOwnProperty(shsort)) {\\n        plist[shsort] = {};\\n      }\\n      plist[shsort]['cls'] = shsort;\\n      plist[shsort]['col_type'] = 样式;\\n      plist[shsort]['pic'] = 图标;\\n      plist[shsort]['extra'] = extra;\\n      storage0.putMyVar('er_playlists', plist);\\n    }\\n\\n\\n\\n    for (var j in list) {\\n\\n      let lt = {\\n        title: list[j].title,\\n        url: list[j].url,\\n        col_type: 样式,\\n        pic: 图标,\\n        extra: {\\n          id: list[j].url.replace(/@lazyRule[\\\\s\\\\S]+/g, ''),\\n          cls: shsort,\\n        }\\n      };\\n      lt['extra'] = Object.assign({}, lt['extra'], extra);\\n      d.push(lt);\\n    }\\n  },\\n  evalRe: function (input, 函数) {\\n    let result = input;\\n    result = eval('input' + 函数);\\n    return result;\\n  },\\n  getTabs: function (parse) {\\n    var tabs = [];\\n    var arts = [];\\n    if (typeof parse.线路 == 'object') {\\n      arts = parse.线路;\\n    }\\n    if (arts.length == 0) {\\n      arts = pdfa(html, parse.线路);\\n    }\\n    var 线路名 = parse.线路名称;\\n    var 线路链接 = parse.线路链接 ? parse.线路链接 : '';\\n    var 替换函数 = '';\\n    if (parse.线路名称.includes('@@')) {\\n      线路名 = parse.线路名称.split('@@')[0];\\n      替换函数 = parse.线路名称.split('@@')[1];\\n    }\\n    for (var i in arts) {\\n      let linename = '';\\n      if (线路名 == '') {\\n        linename = arts[i];\\n      } else {\\n        linename = pdfh(arts[i], 线路名);\\n      }\\n      if (替换函数 != '') {\\n        linename = this.evalRe(linename, 替换函数);\\n      }\\n      tabs.push({ title: linename });\\n      if (线路链接 != '') {\\n        tabs[i]['url'] = pd(arts[i], 线路链接);\\n      }\\n    }\\n    //log(tabs);\\n    return tabs;\\n  },\\n  getLists: function (parse, shsort, h) {\\n    html = h || html;\\n    shsort = shsort ? shsort : 'shsort';\\n    var lists = [];\\n    var conts = [];\\n    if (typeof parse.选集 == 'object') {\\n      conts = parse.选集;\\n    }\\n    if (conts.length == 0) {\\n      try {\\n        conts = pdfa(html, parse.选集);\\n      } catch {\\n        toast('选集定位有误')\\n      }\\n    }\\n\\n    let 替换函数 = '';\\n    var 选集名称 = parse.选集名称 ? parse.选集名称 : 'a&&Text';\\n    if (选集名称.includes('@@')) {\\n      选集名称 = parse.选集名称.split('@@')[0];\\n      替换函数 = parse.选集名称.split('@@')[1];\\n    }\\n\\n    var 选集链接 = parse.选集链接 ? parse.选集链接 : 'a&&href';\\n    var 解析 = parse.解析 ? parse.解析 : '';\\n    var temp = [];\\n\\n    for (var i in conts) {\\n      if (parse.选集列表 != undefined) {\\n        if (parse.选集列表 == 'object') {\\n          lists.push(conts[i].map(x => {\\n            return {\\n              title: x.title,\\n              url: x.url + 解析,\\n            }\\n          }))\\n        } else {\\n          lists.push(pdfa(conts[i], parse.选集列表).map(x => {\\n            return {\\n              title: pdfh(x, 选集名称),\\n              url: pd(x, 选集链接) + 解析,\\n            }\\n          }))\\n        }\\n      } else {\\n        var url = pd(conts[i], 选集链接);\\n        if (!选集链接.includes('href')) {\\n          url = pdfh(conts[i], 选集链接);\\n        }\\n        let title = pdfh(conts[i], 选集名称);\\n        title = 替换函数 != '' ? this.evalRe(title, 替换函数) : title;\\n        temp.push({\\n          title: title,\\n          url: url + 解析,\\n        })\\n      }\\n    }\\n    let 倒序 = parse.倒序 ? parse.倒序 : false;\\n    var results = lists.length ? lists : [temp];\\n    if (倒序) {\\n      results = results.map(x => x.reverse());\\n    }\\n    var plist = storage0.getMyVar('er_playlists', '{}');\\n    if (results.some(x => x.length > 0)) {\\n      if (!plist.hasOwnProperty(shsort)) {\\n        plist[shsort] = {};\\n      }\\n      plist[shsort]['length'] = results.length;\\n    };\\n    storage0.putMyVar('er_playlists', plist);\\n    return results;\\n  },\\n  getPlayers: function (parse, mode, func) {\\n    //log(mode)\\n    var play = 'er_playlist_';\\n    this.preLoad(func);\\n    this.close(parse.map(x => x.类型), parse.length);\\n    mode = mode ? mode : 1;\\n\\n    let pe = [1];\\n    try {\\n      pe = parse.map(x => pdfa(html, x.线路).length).filter(y => y > 0);\\n    } catch { }\\n\\n\\n    parse.forEach((item, i) => {\\n      var tabs = [{ title: '主线' }];\\n      if (item.线路 != undefined) {\\n        tabs = this.getTabs(item);\\n      }\\n      putMyVar(play + i + '_tabs', tabs.map(x => x.title));\\n\\n      if (item.动态数据) {\\n        if (mode == 1) {\\n          this.setTabs(tabs, item.类型, play + i, item);\\n        } else {\\n          this.setTabs2(tabs, item.类型, play + i, item, pe);\\n        }\\n        putMyVar('er_html', html);\\n        putMyVar('er_url', MY_URL);\\n        var info = { parse: item, mark: play + i, url: MY_URL };\\n        if (tabs.some(x => x.url)) {\\n          info['urls'] = tabs.map(x => x.url);\\n        }\\n\\n        var lists = func(getMyVar('er_' + item.类型, '0'), info);\\n      } else {\\n        var lists = this.getLists(item, play + i);\\n\\n        if (lists.some(x => x.length > 0)) {\\n          if (mode == 1) {\\n            this.setTabs(tabs, item.类型, play + i, item);\\n          } else {\\n            this.setTabs2(tabs, item.类型, play + i, item, pe);\\n          }\\n        }\\n      }\\n      if (getMyVar('er_' + item.类型 + 'fold', '1') == '1') {\\n        this.setLists(lists, getMyVar('er_' + item.类型, '0'), play + i, item);\\n      }\\n      d.push({\\n        col_type: 'blank_block'\\n      })\\n    })\\n  }\\n}\\n\\n\\nlet Methods = {\\n  //多选模块\\n  MultiSelectMode: function (name, id, shsort) {\\n    return $('#noLoading#').lazyRule((datatitle, dataurl, shsort) => {\\n      function unique(arr) {\\n        const res = new Map()\\n        return arr.filter((a) => !res.has(a.url) && res.set(a.url, 1))\\n      }\\n      let duoselect = storage0.getMyVar(shsort + \\\"_duoselect\\\") ? storage0.getMyVar(shsort + \\\"_duoselect\\\") : [];\\n      if (duoselect.findIndex(x => x.url === dataurl) == -1) {\\n        duoselect.push({\\n          title: datatitle,\\n          url: dataurl\\n        })\\n        duoselect = unique(duoselect)\\n        updateItem(dataurl, {\\n          title: `““””<span style=\\\"color:#FF5733\\\">` + datatitle,\\n        });\\n      } else {\\n        function removeByValue(arr, val) {\\n          for (var i = 0; i < arr.length; i++) {\\n            if (arr[i]['url'] == val) {\\n              arr.splice(i, 1);\\n              break;\\n            }\\n          }\\n        }\\n        removeByValue(duoselect, dataurl)\\n        updateItem(dataurl, {\\n          title: datatitle\\n        });\\n      }\\n      storage0.putMyVar(shsort + \\\"_duoselect\\\", duoselect);\\n      return \\\"hiker://empty\\\"\\n    }, name, id, shsort)\\n  },\\n}\\n\\n\\n$.exports = {\\n  Erji: Erji,\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"ec-casc-list\",\"path\":\"ec-casc\",\"rule\":\"js:\\n/*\\n短视模板封装\\nver 20231113 1.0\\n*/\\n\\nvar getRangeColors = function() {       \\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \\n}\\neval(JSON.parse(request('hiker://page/yi?rule=α')).rule);\\n\\nvar _debug = false;\\nif (typeof debug != 'undefined' && typeof debug == 'boolean') {\\n    _debug = debug;\\n}\\n\\nvar _开启搜索 = true;\\nif (typeof 开启搜索 != 'undefined' && typeof 开启搜索 == 'boolean') {\\n    _开启搜索 = 开启搜索;\\n}\\n\\nvar _动态 = true;\\nif (typeof 动态数据 != 'undefined' && typeof 动态数据 == 'boolean') {\\n    _动态 = 动态数据;\\n}\\n\\nvar _列表 = \\\"\\\";\\nif (typeof 列表 != 'undefined') {\\n    _列表 = 列表;\\n}\\n\\nfunction moban_php(host, durl, 定位信息, options) {\\n    var sourcename = MY_URL;\\n    let 状态 = MY_RULE.url\\n    MY_URL = durl;\\n\\n    var option = {\\n        url: \\\"/index.php/api/vod\\\",\\n    }\\n    if (options != undefined) {\\n        Object.keys(options).forEach(k => {\\n            option[k] = options[k];\\n        })\\n    }\\n\\n    let true_url = getTruelink(MY_RULE.url, MY_URL, page);\\n\\n    if (option.hasOwnProperty('true_url')) {\\n        true_url = option.true_url;\\n    }\\n\\n    //log(true_url)\\n    var html = fetch(true_url)\\n    if (!option.hasOwnProperty('type')) {\\n        option['type'] = pdfh(html, '#dataList&&data-type');\\n    }\\n\\n    const 清除键 = ['dt_class', 'dt_area', 'dt_year', 'dt_lang', 'dt_letter', 'dt_time', 'dt_version', 'dt_state'];\\n    const dc = dynamicClass({\\n        分类颜色: getRangeColors()\\n    });\\n    dc.开启搜索(_开启搜索).开启折叠(true).清除(清除键).页码(page).界面(d).源码(html).状态(状态).创建动态分类(定位信息)\\n\\n    try {\\n        if (pdfa(html, _列表).length != 0) {\\n            return html;\\n        }\\n    } catch {}\\n\\n    if (!_动态) {\\n        return html;\\n    }\\n\\n    var type = option.type;\\n\\n    time = '' + Math.ceil(new Date().getTime() / 1000);\\n    var key = evalPrivateJS('ZMNKQE5w4HUpWH6GG0ruk+vFxGRxkgJWuahpB85warDDaR3wy9NDjNapsZkYZZhV');\\n\\n    //log(option)\\n\\n    var result = post(host + option.url, {\\n        headers: {\\n            Referer: MY_URL,\\n        },\\n        body: {\\n            type: type,\\n            page: page,\\n            time: time,\\n            key: key,\\n            class: getMyVar('dt_class', ''),\\n            area: getMyVar('dt_area', ''),\\n            year: getMyVar('dt_year', ''),\\n            lang: getMyVar('dt_lang', ''),\\n            letter: getMyVar('dt_letter', ''),\\n            state: getMyVar('dt_state', ''),\\n            version: getMyVar('dt_version', ''),\\n            by: getMyVar('dt_time', ''),\\n        }\\n    })\\n\\n    var list = [];\\n    try {\\n        list = JSON.parse(result);\\n    } catch {}\\n\\n    return list\\n}\\n\\nvar option, 定位;\\nif (typeof options != 'undefined') {\\n    option = options;\\n}\\n\\nvar 定位 = [{\\n    大类定位: '.ec-casc-list&&ul,0:1',\\n    //小类: 'body&&a'\\n}, {\\n    一级定位: 'body&&.nav-swiper:not(:has(:matches(频道))):has(li:nth-child(n+3))',\\n    小类: 'body&&li:not(:matches(分类资源|分类不代表))',\\n    //标题: 'a&&Text',\\n    链接: '@js:' + $.toString((t) => {\\n        var url = pdfh(input, 'a&&href');\\n        let type = pdfh(input, 'li&&data-type');\\n        let value = pdfh(input, 'li&&data-val');\\n        if (value == '' && url != \\\"javascript:\\\") {\\n            if (url.startsWith('javascript')) {\\n                return pd(input, 'a&&href');\\n            }\\n            if (url.startsWith('/')) {\\n                url = getHome(t) + url;\\n            }\\n            return url;\\n        }\\n        return {\\n            type: type,\\n            value: value\\n        };\\n    }, true_url)\\n}, {\\n    一级定位: '.site-tabs',\\n    链接: '@js:' + $.toString((t) => {\\n        var url = pdfh(input, 'a&&href');\\n        let type = 'time';\\n        let value = pdfh(input, 'a&&data-type');\\n        if (value == '' && url != \\\"javascript:\\\") {\\n            if (url.startsWith('javascript')) {\\n                return pd(input, 'a&&href');\\n            }\\n            if (url.startsWith('/')) {\\n                url = getHome(t) + url;\\n            }\\n            return url;\\n        }\\n        return {\\n            type: type,\\n            value: value\\n        };\\n    }, true_url),\\n    //增加:['<a data-type=\\\"\\\">全部</a>'],\\n    //补充:[],\\n}]\\n\\nif (typeof 定位信息 != 'undefined') {\\n    定位 = 定位信息;\\n}\\n\\nif (typeof 大类定位 != 'undefined') {\\n    定位[0]['大类定位'] = 大类定位;\\n}\\n\\nif (typeof 拼接分类 != 'undefined') {\\n    定位[1]['一级定位'] = 拼接分类;\\n}\\n\\nif (_debug) {\\n    log('定位信息');\\n    log(定位);\\n    log('true_url')\\n    log(true_url);\\n    log('options')\\n    log(option)\\n}\\n\\nvar result = moban_php(getHome(true_url), true_url, 定位, option);\"},{\"col_type\":\"movie_3\",\"name\":\"一级封装\",\"path\":\"yi\",\"rule\":\"js:\\n/*\\nby α(zetalpha)\\n一级封装\\n动态分类 列表创建 自动下一页\\nver 20231017 1.0\\n*/\\n\\n//随机颜色\\nvar getRangeColors = function() {\\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\\n}\\n\\n//动态分类\\nfunction dynamicClass(options) {\\n    const obj = {\\n        //默认值\\n        layout: \\\"undefined\\\",\\n        html: \\\"empty\\\",\\n        page: 0,\\n        分类颜色: \\\"#FA7298\\\",\\n        折叠: \\\"““””<b>\\\" + \\\"∧\\\".fontcolor(\\\"#1aad19\\\") + \\\"</b>\\\",\\n        展开: \\\"““””<b>\\\" + \\\"∨\\\".fontcolor(\\\"#FF0000\\\") + \\\"</b>\\\",\\n        open: true,\\n        state: MY_RULE.url,\\n        search: false,\\n        clears: [],\\n        clearall: [\\\"yi_firstpage\\\"],\\n        debug: false,\\n\\n        预设(param) {\\n            if (param == undefined) {\\n                param = [];\\n            }\\n            Object.keys(param).forEach((property) => {\\n                // 对每个属性名执行操作\\n                const value = param[property]; // 获取属性值\\n                // 在这里执行您的操作\\n                this[property] = value;\\n                if (this.debug) {\\n                    console.log(property + \\\":\\\" + value);\\n                }\\n            });\\n        },\\n        evalJSRule(item,\\n            jsRule) {\\n            let rule = jsRule.replace(\\\"@js:\\\",\\n                \\\"\\\");\\n            rule = rule.trim();\\n            //log($.stringify(rule))\\n            let input = item;\\n            if (rule.startsWith(\\\"(\\\")) {\\n                eval(\\\"result = \\\" + rule);\\n            } else {\\n                /**\\n                 * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\\n                 */\\n                eval(\\\"result = \\\" + \\\"(() => {\\\" + rule + \\\"})()\\\");\\n            }\\n            return result || \\\"\\\";\\n        },\\n        getTitle(src, category) {\\n            let title = \\\"\\\";\\n            let titleRule = category || \\\"a&&Text\\\";\\n            if (titleRule.startsWith(\\\"@js:\\\")) {\\n                title = this.evalJSRule(src, titleRule);\\n            } else {\\n                title = parseDomForHtml(src, titleRule);\\n            }\\n            return title || \\\"\\\";\\n        },\\n        getUrl(src, category) {\\n            let url = \\\"\\\";\\n            let urlRule = category.链接 || \\\"a&&href\\\";\\n            if (urlRule.startsWith(\\\"@js:\\\")) {\\n                url = this.evalJSRule(src, urlRule);\\n            } else {\\n                url = pd(src, urlRule);\\n            }\\n            if (typeof category.链接处理 == \\\"function\\\") {\\n                url = category.链接处理(url);\\n            }\\n            return url || \\\"\\\";\\n        },\\n        isNull(param) {\\n            if (param == null) {\\n                return this;\\n            }\\n            return false;\\n        },\\n        isBoolean(variable) {\\n            if (typeof variable !== \\\"boolean\\\") {\\n                throw new Error(\\\"开启折叠请传入布尔值\\\");\\n            }\\n        },\\n        清除(list) {\\n            if (this.isNull(list)) {\\n                return this;\\n            }\\n            if (list.constructor == String) {\\n                throw new Error(\\\"清除报错:请传列表\\\");\\n            }\\n            this.clears = list;\\n            return this;\\n        },\\n        全清(list) {\\n            if (this.isNull(list)) {\\n                return this;\\n            }\\n            var c = this.clearall;\\n            list = c.concat(list);\\n            this.clearall = list;\\n            return this;\\n        },\\n        源码(input) {\\n            this.html = input;\\n            return this;\\n        },\\n        界面(input) {\\n            this.layout = input;\\n            return this;\\n        },\\n        页码(input) {\\n            this.page = input;\\n            return this;\\n        },\\n        状态(input) {\\n            this.state = input;\\n            return this;\\n        },\\n        开启搜索(input) {\\n            if (input == undefined) {\\n                input = true;\\n            }\\n            this.search = input;\\n            return this;\\n        },\\n        开启折叠(input) {\\n            if (input == undefined) {\\n                input = true;\\n            }\\n            this.isBoolean(input);\\n            this.open = input;\\n            return this;\\n        },\\n        setTitle(k, i, t) {\\n            return k == i ? \\\"““””\\\" + t.fontcolor(this.分类颜色) : t;\\n        },\\n        action(obj) {\\n            return [{\\n                title: \\\"清除状态\\\",\\n                js: $.toString((obj) => {\\n                    log(obj);\\n                    clearMyVar(obj.state);\\n                    clearMyVar(\\\"head.cate\\\");\\n                    clearMyVar('cate_button');\\n                    obj.all.forEach((item) => {\\n                        clearMyVar(item);\\n                    });\\n                    obj.cl.forEach((item) => {\\n                        clearMyVar(item);\\n                    });\\n                    refreshPage();\\n                }, obj),\\n            }, ];\\n        },\\n        checkParam() {\\n            var obj = {};\\n            if (this.page == 0 && typeof page == \\\"undefined\\\") {\\n                throw new Error(\\\"请传入页码\\\");\\n            } else {\\n                if (typeof page == \\\"undefined\\\") {\\n                    obj[\\\"页码\\\"] = this.page;\\n                } else {\\n                    obj[\\\"页码\\\"] = page;\\n                }\\n            }\\n            if (this.html == \\\"empty\\\" && typeof html == \\\"undefined\\\") {\\n                throw new Error(\\\"请传入源码\\\");\\n            } else {\\n                if (typeof html == \\\"undefined\\\") {\\n                    obj[\\\"源码\\\"] = this.html;\\n                } else {\\n                    obj[\\\"源码\\\"] = html;\\n                }\\n            }\\n            if (this.layout == \\\"undefined\\\" && typeof d == \\\"undefined\\\") {\\n                throw new Error(\\\"请传入界面\\\");\\n            } else {\\n                if (typeof d == \\\"undefined\\\") {\\n                    obj[\\\"界面\\\"] = this.layout;\\n                } else {\\n                    obj[\\\"界面\\\"] = d;\\n                }\\n            }\\n            return obj;\\n        },\\n        创建动态分类(ruleObj) {\\n            let items = [];\\n            let cates = [];\\n            if (ruleObj == undefined) {\\n                ruleObj = [];\\n            }\\n            //初始化变量开始\\n            const param = this.checkParam();\\n            const page = param.页码;\\n            const html = param.源码;\\n            const d = param.界面;\\n            const 状态 = this.state;\\n            const search = this.search;\\n            const empty = \\\"hiker://empty\\\";\\n            const 折叠状态 = this.open;\\n            var 展开 = this.展开;\\n            var 折叠 = this.折叠;\\n            var 全清 = this.clearall;\\n            var 清除 = this.clears;\\n            //初始化变量结束\\n            let init_cate = new Array(20).fill(\\\"0\\\");\\n            const fold = getMyVar(MY_RULE.group, \\\"0\\\");\\n            const cate_temp = JSON.parse(\\n                getMyVar(\\\"head.cate\\\", JSON.stringify(init_cate))\\n            );\\n            if (search && page == 1) {\\n                items.push({\\n                    title: \\\"\\\",\\n                    url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n                    desc: \\\"搜索关键词\\\",\\n                    col_type: \\\"input\\\",\\n                    extra: {\\n                        defaultValue: getMyVar(\\\"keyword\\\", \\\"\\\"),\\n                        onChange: $.toString(() => {\\n                            putMyVar(\\\"keyword\\\", input);\\n                        }),\\n                    },\\n                });\\n            }\\n            const categories = [];\\n            ruleObj.forEach((x) => {\\n                var list = [];\\n                //log(x)\\n                if (x.json != undefined) {\\n                    x.json.map(k => {\\n                        categories.push(JSON.stringify(k).replace(/^\\\\[|\\\\]$/g, ''))\\n                    })\\n                    //categories.push(x.json)\\n                }\\n                if (x.一级定位) {\\n                    if (x.一级定位.startsWith(\\\"@js:\\\")) {\\n                        list = this.evalJSRule(html, x.一级定位);\\n                    } else {\\n                        list = pdfa(html, x.一级定位);\\n                    }\\n                }\\n                if (x.大类定位) {\\n                    if (x.大类定位.startsWith(\\\"@js:\\\")) {\\n                        list = this.evalJSRule(html, x.大类定位);\\n                    } else {\\n                        list = [pdfa(html, x.大类定位).join('\\\\n')];\\n                    }\\n                }\\n                //--额外处理--\\n                if (('增加' in x)) {\\n                    if (x.增加.constructor == String) {\\n                        x.增加 = eval(x.增加);\\n                    }\\n                    slist = x.增加.concat(slist);\\n                }\\n                if (('补充' in x)) {\\n                    if (x.补充.constructor == String) {\\n                        x.补充 = eval(x.补充);\\n                    }\\n                    slist = slist.concat(x.补充);\\n                }\\n                //--额外处理--\\n                var 一级 = list.map((s) => {\\n                    var slist = [];\\n                    if (!(\\\"小类\\\" in x)) {\\n                        x.小类 = \\\"body&&a:not(:matches(首页)):not(a:not([href]))\\\";\\n                    }\\n                    if (x.小类.startsWith(\\\"@js:\\\")) {\\n                        slist = this.evalJSRule(s, x.小类);\\n                    } else {\\n                        slist = pdfa(s, x.小类);\\n                    }\\n                    var 定位 = slist.map((item) => {\\n                        var title = this.getTitle(item, x.标题);\\n                        var url = this.getUrl(item, x);\\n                        var obj = {\\n                            title: title,\\n                            url: url\\n                        };\\n                        return JSON.stringify(obj);\\n                    });\\n                    return 定位;\\n                });\\n                //log(一级)\\n                //log(一级.length)\\n                if (一级.length == 1) {\\n                    categories.push(一级.join(\\\"\\\\n\\\"));\\n                } else {\\n                    一级.forEach((item) => {\\n                        categories.push(item.join(\\\",\\\"));\\n                    });\\n                }\\n                //log(categories)\\n            });\\n            if (折叠状态) {\\n                if (page == 1) {\\n                    items.push({\\n                        title: fold === \\\"1\\\" ? 折叠 : 展开,\\n                        url: $(\\\"#noLoading#\\\").lazyRule(\\n                            (title, fold, u, all, exps) => {\\n                                var fold = getMyVar(MY_RULE.group, fold);\\n\\n                                var [展开, 折叠] = exps;\\n\\n                                if (fold == 1) {\\n                                    var cx = findItemsByCls(title + 'cate_button');\\n                                    storage0.putMyVar('cate_button', cx);\\n                                    deleteItemByCls(title + 'cate_button');\\n\\n                                } else {\\n                                    var cx = storage0.getMyVar('cate_button', []).map(x => {\\n                                        x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\\n                                        return x;\\n                                    });\\n                                    addItemAfter(title + 'cate_line', cx)\\n                                }\\n\\n                                /*all.forEach((item) => {\\n                                  clearMyVar(item);\\n                                });*/\\n                                updateItem(title + 'cate_exp', {\\n                                    title: fold == 1 ? 展开 : 折叠,\\n                                })\\n\\n                                putMyVar(MY_RULE.group, fold === \\\"1\\\" ? \\\"0\\\" : \\\"1\\\");\\n\\n                                //refreshPage(false);\\n                                return \\\"hiker://empty\\\";\\n                            },\\n                            MY_RULE.title,\\n                            fold,\\n                            状态,\\n                            全清, [展开,\\n                                折叠\\n                            ],\\n                        ),\\n                        col_type: \\\"scroll_button\\\",\\n                        extra: {\\n                            id: MY_RULE.title + 'cate_exp',\\n                            longClick: this.action({\\n                                state: 状态,\\n                                all: 全清,\\n                                cl: 清除,\\n                            }),\\n                        },\\n                    });\\n                }\\n            }\\n            if (page == 1) {\\n                categories.forEach((category, index) => {\\n                    //log(category)\\n                    let sub_categories = [];\\n                    /*if (小类定位.includes(\\\";\\\")) {\\n                      sub_categories = pdfa(category, 小类定位.split(\\\";\\\")[0]);\\n                      if (sub_categories.length == 0) {\\n                        sub_categories = pdfa(category, 小类定位.split(\\\";\\\")[1]);\\n                      }\\n                    } else {*/\\n                    //log(index)\\n                    sub_categories = JSON.parse(`[${category}]`);\\n                    //log(sub_categories)\\n                    // sub_categories = pdfa(category, 小类定位);\\n                    //}\\n                    if (index === 0) {\\n                        //大类\\n                        sub_categories.forEach((item, key) => {\\n\\n                            //let title = pdfh(item, _大类标题);\\n                            let title = item.title;\\n\\n                            if (typeof 排除 != \\\"undefined\\\" && 排除 != \\\"\\\") {\\n                                title = title.replace(newRegExp(排除, \\\"g\\\"), \\\"\\\");\\n                            }\\n                            let json = ''\\n                            json = item.url;\\n\\n                            let params = {\\n                                cate_temp: cate_temp,\\n                                key: key,\\n                                page: page,\\n                                clears: 清除,\\n                                json: json,\\n                                state: 状态,\\n                                allclears: 全清,\\n                            };\\n\\n                            //let url = pd(item, _大类链接);\\n                            let url = item.url;\\n                            /*if (大类处理) {\\n                              url = 一级分类处理(url);\\n                            }*/\\n                            //log(url)\\n                            items.push({\\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\\n                                col_type: \\\"scroll_button\\\",\\n                                url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((params) => {\\n                                        let new_cate = [];\\n                                        params.clears.forEach((item) => {\\n                                            clearMyVar(item);\\n                                        });\\n                                        params.allclears.forEach((item) => {\\n                                            clearMyVar(item);\\n                                        });\\n                                        clearMyVar('cate_button');\\n\\n                                        params.cate_temp.forEach((cate, index) => {\\n                                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\");\\n                                        });\\n                                        putMyVar(\\\"head.cate\\\", JSON.stringify(new_cate));\\n                                        if (params.json.constructor === Object) {\\n                                            putMyVar(\\\"dt_\\\" + params.json.type, params.json.value);\\n                                        } else {\\n                                            putMyVar(params.state, params.json);\\n                                        }\\n                                        refreshPage(true);\\n                                        return \\\"hiker://empty\\\";\\n                                    },\\n                                    params),\\n                            });\\n                        });\\n                        items.push({\\n                            col_type: \\\"blank_block\\\",\\n                            extra: {\\n                                id: MY_RULE.title + 'cate_line',\\n                            }\\n                        });\\n                    } else {\\n                        //小类\\n                        sub_categories.forEach((item, key) => {\\n                            var extrapos = false;\\n                            /*if (item.includes('type=\\\"@extra\\\"')) {\\n                              extrapos = true;\\n                              //log('附加定位')\\n                            }*/\\n\\n                            if (extrapos) {\\n                                var title = pdfh(item, \\\"a&&Text\\\");\\n                                if (typeof 排除 != \\\"undefined\\\" && 排除 != \\\"\\\") {\\n                                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                                }\\n                                var json = {\\n                                    type: pdfh(item, \\\"a&&state\\\"),\\n                                    value: pdfh(item, \\\"a&&value\\\"),\\n                                };\\n                            } else {\\n                                //var title = pdfh(item, 分类标题);\\n                                var title = item.title;\\n                                if (typeof 排除 != \\\"undefined\\\" && 排除 != \\\"\\\") {\\n                                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                                }\\n\\n                                var json = \\\"\\\";\\n                                /*switch (true) {\\n                                  case 分类链接.includes(\\\"@@@\\\"):\\n                                    json = {\\n                                      type: pdfh(item, 分类链接.split(\\\"@@@\\\")[0]),\\n                                      value: pdfh(item, 分类链接.split(\\\"@@@\\\")[1]),\\n                                    };\\n                                    break;\\n                                  case 分类链接.includes(\\\"@@\\\"):\\n                                    json = {\\n                                      type: 分类链接.split(\\\"@@\\\")[0],\\n                                      value: pdfh(item, 分类链接.split(\\\"@@\\\")[1]),\\n                                    };\\n                                    break;\\n                                  default:\\n                                    json = item.url;\\n                                    // json = pd(item, 分类链接);\\n                                    break;\\n                                }*/\\n                                json = item.url;\\n                                /*var json=分类链接.includes('@@@')?{\\n                                      type:pdfh(item,分类链接.split('@@@')[0]),\\n                                      value:pdfh(item,分类链接.split('@@@')[1]),\\n                                  }:pd(item,分类链接);\\n                                  json=分类链接.includes('@@')?{\\n                                      type:分类链接.split('@@')[0],\\n                                      value:pdfh(item,分类链接.split('@@')[1]),\\n                                  }:pd(item,分类链接);*/\\n                            }\\n\\n                            let params = {\\n                                cate_temp: cate_temp,\\n                                index: index,\\n                                key: key,\\n                                page: page,\\n                                json: json,\\n                                state: 状态,\\n                                allclears: 全清,\\n                            };\\n                            cates.push({\\n                                title: this.setTitle(key.toString(), cate_temp[index], title),\\n                                url: $(\\\"hiker://empty\\\" + \\\"#noLoading#\\\").lazyRule((params) => {\\n                                        params.allclears.forEach((item) => {\\n                                            clearMyVar(item);\\n                                        });\\n                                        clearMyVar('cate_button');\\n\\n                                        params.cate_temp[params.index] = params.key.toString();\\n                                        putMyVar(\\\"head.cate\\\", JSON.stringify(params.cate_temp));\\n                                        if (params.json.constructor === Object) {\\n                                            putMyVar(\\\"dt_\\\" + params.json.type, params.json.value);\\n                                        } else {\\n                                            putMyVar(params.state, params.json);\\n                                        }\\n                                        refreshPage();\\n                                        return \\\"hiker://empty\\\";\\n                                    },\\n                                    params),\\n                                col_type: \\\"scroll_button\\\",\\n                                extra: {\\n                                    cls: MY_RULE.title + 'cate_button',\\n                                }\\n                            });\\n                        });\\n                        cates.push({\\n                            col_type: \\\"blank_block\\\",\\n                            extra: {\\n                                cls: MY_RULE.title + 'cate_button',\\n                            }\\n                        });\\n                    }\\n                });\\n            }\\n            if (fold === \\\"1\\\" || 折叠状态 == false) {\\n                items = items.concat(cates);\\n            }\\n            if (fold === \\\"0\\\") {\\n                storage0.putMyVar('cate_button', cates)\\n            }\\n            if (typeof setPreResult != 'undefined') {\\n                items = d.concat(items);\\n                //清空继承数组\\n                d.length = 0;\\n                setPreResult(items);\\n            } else {\\n                items.forEach(item => {\\n                    d.push(item);\\n                })\\n            }\\n        },\\n    };\\n    obj.预设(options);\\n    return obj;\\n}\\n\\nvar 状态 =\\n    typeof 状态标记 != \\\"undefined\\\" && 状态标记 != \\\"\\\" ? 状态标记 : MY_RULE.url;\\n\\nlet dt_debug = false;\\n\\naddListener(\\n    \\\"onClose\\\",\\n    $.toString(() => {})\\n);\\n\\nvar Create = {\\n    nextPage: function() {\\n        var result = false;\\n        try {\\n            var next = eval(下一页);\\n            //log('n:'+next)\\n            if (next == \\\"\\\") {\\n                throw new Error('下一页链接为空')\\n            }\\n            result = true;\\n            if (true_url == next) {\\n                result = false;\\n            }\\n        } catch (e) {\\n            //log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\n            log(\\\"错误信息:\\\" + e.message);\\n        }\\n        if ((next == \\\"\\\" || next == undefined) && page == 1) {\\n            next = true_url;\\n        } else {\\n            //result=false;\\n            next = getMyVar(状态);\\n        }\\n        //log('l'+true_url)\\n        //log('n'+next)\\n        if (page != 1) {\\n            if (true_url == next && !result) {\\n                result = false;\\n            } else {\\n                result = true;\\n            }\\n        }\\n        return result;\\n        //putMyVar(状态, next);\\n    },\\n    getBackImage: function(imgurl) {\\n        var result = imgurl;\\n        try {\\n            result = /url(?:\\\\s+)?\\\\((.*?)\\\\)/g\\n                .exec(imgurl)[1]\\n                .replace(/('|\\\"|&quot;)/gm, \\\"\\\");\\n        } catch {}\\n        return result;\\n    },\\n    httpHandle: function(input) {\\n        if (input.startsWith(\\\"http\\\")) {\\n            return input;\\n        } else if (input.startsWith(\\\"//\\\")) {\\n            return \\\"https:\\\" + input;\\n        } else if (input.startsWith(\\\"/\\\")) {\\n            return MY_HOME + input;\\n        }\\n    },\\n    imgHandle: function(item, rule) {\\n        var img = \\\"\\\";\\n        if (rule.img.startsWith(\\\"pd\\\")) {\\n            img = eval(rule.img);\\n        } else if (rule.backimg) {\\n            img = pdfh(item, rule.img);\\n            img = this.getBackImage(img);\\n            img = this.httpHandle(img);\\n        } else {\\n            img = pdfh(item, rule.img);\\n            if (!img.startsWith(\\\"http\\\")) {\\n                img = pd(item, rule.img);\\n                img = this.httpHandle(img);\\n            }\\n        }\\n        return img + rule.ref;\\n    },\\n    urlHandle: function(item, rule) {\\n        var href = \\\"\\\";\\n        if (rule.url.startsWith(\\\"pd\\\")) {\\n            href = eval(rule.url);\\n        } else {\\n            href = pd(item, rule.url);\\n        }\\n        href = rule.imt ? href + \\\"#immersiveTheme#\\\" : href;\\n        return href;\\n    },\\n    setContent: function(item, input) {\\n        let output = \\\"\\\";\\n        if (input == undefined) {\\n            return output;\\n        }\\n        if (input.startsWith(\\\"pd\\\")) {\\n            output = eval(input);\\n        } else {\\n            output = pdfh(item, input);\\n        }\\n        return output;\\n    },\\n    refresh: function() {\\n        addListener(\\n            \\\"onRefresh\\\",\\n            $.toString((u) => {\\n                clearMyVar(\\\"yilist\\\");\\n                //var p = storage0.getMyVar('spage', '');\\n                //putMyVar(u, p);\\n            }, 状态)\\n        );\\n    },\\n    getBooleanValue: function(value, defaultValue) {\\n        return value !== undefined ? Boolean(value) : (defaultValue !== undefined ? defaultValue : true);\\n    },\\n    debuglog: function(i, item, rule, obj) {\\n        log('----------' + (i + 1) + ':调试开始----------');\\n        if (item.constructor == Object) {\\n            item = JSON.stringify(item);\\n        }\\n        log('item内容:\\\\r\\\\n' + item + '\\\\r\\\\n' +\\n            `\\\\n\\\\ttitle定位:  ${rule.title}  ---> 结果:  ${obj.title}` +\\n            `\\\\n\\\\tdesc定位:  ${rule.desc}  ---> 结果:  ${obj.desc}` +\\n            `\\\\n\\\\timg定位:  ${rule.img}  ---> 结果:  ${obj.img}` +\\n            (rule.content != undefined ? `\\\\n\\\\tcontent定位:  ${rule.content}  ---> 结果:  ${obj.content}` : '') +\\n            `\\\\n\\\\turl定位:  ${rule.url}  ---> 结果:  ${obj.url}`\\n        );\\n        log('----------' + (i + 1) + ':调试结束----------');\\n    },\\n    jsonList: function(arr, json, rule) {\\n        if (json.constructor != Object) {\\n            try {\\n                json = JSON.parse(json);\\n            } catch {}\\n        }\\n        if (json[rule.list] == undefined) {\\n            arr.push({\\n                title: '““””<font color=\\\"grey\\\"><small>无内容</small></font>',\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_center_1\\\",\\n                extra: {},\\n            });\\n            return;\\n        }\\n        var debug = this.getBooleanValue(rule.debug, false);\\n        var empty = this.getBooleanValue(rule.empty);\\n        if (debug) {\\n            log('定位列表:' + rule.list);\\n        }\\n        json[rule.list].forEach((item, i) => {\\n            var title = eval(rule.title);\\n            var desc = eval(rule.desc);\\n            var content = eval(rule.content);\\n            var img = eval(rule.img) + rule.ref;\\n            var href = eval(rule.url);\\n            var url = rule.imt ? href + \\\"#immersiveTheme#\\\" : href;\\n            var lazy = rule.lazy ? rule.lazy : \\\"\\\";\\n\\n            var dd = {\\n                title: title,\\n                desc: desc,\\n                content: content,\\n                pic_url: img,\\n                url: (empty ? \\\"hiker://empty##\\\" : '') + url,\\n                col_type: rule.col_type,\\n                extra: {\\n                    img: img,\\n                },\\n            };\\n\\n            if (debug) {\\n                var rx = {\\n                    title,\\n                    desc,\\n                    img,\\n                    content,\\n                    url\\n                };\\n                this.debuglog(i, item, rule, rx);\\n            }\\n\\n            if (lazy != \\\"\\\") {\\n                dd[\\\"url\\\"] = href + lazy;\\n            }\\n            arr.push(dd);\\n        });\\n    },\\n    ruleList: function(arr, html, rule) {\\n        var list = pdfa(html,\\n            rule.list);\\n        var debug = this.getBooleanValue(rule.debug,\\n            false);\\n        var empty = this.getBooleanValue(rule.empty);\\n        if (debug) {\\n            log('定位列表:' + rule.list);\\n        }\\n        list.forEach((item, i) => {\\n            var title = this.setContent(item, rule.title);\\n            var desc = this.setContent(item, rule.desc);\\n            var img = this.imgHandle(item, rule);\\n            var url = this.urlHandle(item, rule);\\n            var content = this.setContent(item, rule.content);\\n\\n            if (debug) {\\n                var rx = {\\n                    title,\\n                    desc,\\n                    img,\\n                    content,\\n                    url\\n                };\\n                this.debuglog(i, item, rule, rx);\\n            }\\n\\n            var lazy = rule.lazy ? rule.lazy : \\\"\\\";\\n            var dd = {\\n                title: title,\\n                desc: desc,\\n                pic_url: img,\\n                url: (empty ? \\\"hiker://empty##\\\" : '') + url,\\n                content: content,\\n                col_type: rule.col_type,\\n                extra: {\\n                    img: img,\\n                },\\n            };\\n            if (lazy != \\\"\\\") {\\n                dd[\\\"url\\\"] = url + lazy;\\n            }\\n            arr.push(dd);\\n        });\\n    },\\n    List: function(arr, html, rule, param) {\\n        param = param ? param : {};\\n        var auto = param.auto ? param.auto : false;\\n        var show = param.show ? param.show : false;\\n        if (page == 1) {\\n            //this.spage.set(true_url);\\n        }\\n        this.refresh();\\n        var debug = this.getBooleanValue(rule.debug, false);\\n        var empty = this.getBooleanValue(rule.empty);\\n        var list = pdfa(html, rule.list);\\n        if (debug) {\\n            log('定位列表:' + rule.list);\\n        }\\n        //log(this.nextPage())\\n        if ((storage0.getMyVar('yi_isnext', 't') == 't' && list.length > 0) || page == 1) {\\n            list.forEach((item, i) => {\\n                deleteItem(\\\"pagenum\\\");\\n                deleteItem(\\\"pageline\\\");\\n                var id = \\\"\\\";\\n                var cls = \\\"\\\";\\n                var title = this.setContent(item, rule.title);\\n                var desc = this.setContent(item, rule.desc);\\n                var img = this.imgHandle(item, rule);\\n                var url = this.urlHandle(item, rule);\\n                var content = this.setContent(item, rule.content);\\n\\n                if (debug) {\\n                    var rx = {\\n                        title,\\n                        desc,\\n                        img,\\n                        content,\\n                        url\\n                    };\\n                    this.debuglog(i, item, rule, rx);\\n                }\\n\\n                if (i == list.length - 1) {\\n                    id = \\\"lastid_\\\" + page;\\n                    cls = \\\"lastmark\\\";\\n                }\\n                d.push({\\n                    title: title,\\n                    desc: desc,\\n                    pic_url: img,\\n                    url: (empty ? \\\"hiker://empty##\\\" : '') + url,\\n                    content: content,\\n                    col_type: rule.col_type,\\n                    extra: {\\n                        img: img,\\n                        id: id,\\n                        cls: cls,\\n                    },\\n                });\\n                if (i == list.length - 1 && show) {\\n                    d.push({\\n                        col_type: \\\"line\\\",\\n                        extra: {\\n                            id: \\\"pageline\\\",\\n                        },\\n                    });\\n\\n                    d.push({\\n                        title: \\\"““””<small>加载中...</small>\\\",\\n                        url: \\\"hiker://empty\\\",\\n                        col_type: \\\"text_center_1\\\",\\n                        extra: {\\n                            id: \\\"pagenum\\\",\\n                        },\\n                    });\\n                }\\n            });\\n        } else {\\n            updateItem(\\\"pagenum\\\", {\\n                title: '““””<font color=\\\"grey\\\"><small>到底了</small></font>',\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_center_1\\\",\\n                extra: {\\n                    id: \\\"last\\\",\\n                },\\n            });\\n        }\\n        if (list.length == 0 && page == 1) {\\n            d.push({\\n                col_type: \\\"line\\\",\\n            });\\n            d.push({\\n                title: '““””<font color=\\\"grey\\\"><small>无内容</small></font>',\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_center_1\\\",\\n                extra: {},\\n            });\\n        }\\n        if (this.nextPage()) {\\n            //log('t');\\n            storage0.putMyVar('yi_isnext', 't');\\n        } else {\\n            //log('f');\\n            storage0.putMyVar('yi_isnext', 'f');\\n        }\\n        if (auto) {\\n            //createNextPage();\\n            autoPage();\\n        }\\n    },\\n};\\n\\nvar extMethod = {\\n    ToParams: function() {\\n        var json = arguments[0];\\n        return Object.keys(json)\\n            .map((key) => key + \\\"=\\\" + json[key])\\n            .join(\\\"&\\\");\\n    },\\n    urlParse: function(u) {\\n        var dict = {};\\n        dict.Source = u;\\n        let params = (url) => {\\n            let queryParams = {};\\n            let reg = /([^?=&]+)=([^?=&]+)/g;\\n            url.replace(reg, function() {\\n                queryParams[arguments[1]] = arguments[2];\\n            });\\n            return queryParams;\\n        };\\n        var javaUrl = JavaImporter(java.net.URL);\\n        with(javaUrl) {\\n            var url = new URL(u);\\n            dict.Protocol = url.getProtocol();\\n            dict.Host = url.getHost();\\n            dict.Port = url.getPort();\\n            dict.File = url.getFile();\\n            dict.Path = url.getPath();\\n            dict.Ref = url.getRef();\\n            dict.Hosts = `${dict.Protocol}://${url.getHost()}`;\\n        }\\n        dict.Params = params(u);\\n        return dict;\\n    },\\n    isEqual: function(x, y) {\\n        const ok = Object.keys,\\n            tx = typeof x,\\n            ty = typeof y;\\n        return x && y && tx === \\\"object\\\" && tx === ty ?\\n            ok(x).length === ok(y).length &&\\n            ok(x).every((key) => this.isEqual(x[key], y[key])) : x === y;\\n    },\\n    findDifferentIndex: function(str1, str2) {\\n        const diffChars = [];\\n        for (let i = 0; i < str2.length; i++) {\\n            if (str1[i] !== str2[i]) {\\n                diffChars.push({\\n                    index: i,\\n                    s1: str1[i],\\n                    s2: str2[i],\\n                });\\n            }\\n        }\\n        return diffChars;\\n    },\\n    replaceCharAt: function(str, index, replacement) {\\n        if (index < 0 || index >= str.length) {\\n            return str;\\n        }\\n        //log(index)\\n        const arr = str.split(\\\"\\\");\\n        arr[index] = replacement;\\n        return arr.join(\\\"\\\");\\n    },\\n    getObjectKeysDiff: function(obj1, obj2) {\\n        const differentKeys = [];\\n        for (let key in obj1) {\\n            if (!obj2.hasOwnProperty(key) || obj1[key] !== obj2[key]) {\\n                differentKeys.push(key);\\n            }\\n        }\\n        for (let key in obj2) {\\n            if (!obj1.hasOwnProperty(key)) {\\n                differentKeys.push(key);\\n            }\\n        }\\n        return differentKeys;\\n    },\\n    getNextUrl: function(source, target, params) {\\n        var u1 = this.urlParse(source);\\n        var u2 = this.urlParse(target);\\n        var pa = undefined;\\n        if (typeof params == \\\"object\\\") {\\n            pa = params.hasOwnProperty(\\\"特征\\\") ? params.特征 : undefined;\\n        }\\n        var nexturl = source;\\n        var ca = Object.keys(u2.Params).length == 0 ? \\\"\\\" : \\\"?\\\";\\n        if (pa != undefined) {\\n            var rs = String(u2.Path).replace(new RegExp(pa), \\\"$1fypage\\\");\\n            nexturl = u2.Hosts + rs + ca + this.ToParams(u2.Params);\\n        } else {\\n            if (this.isEqual(u1.Params, u2.Params)) {\\n                if (dt_debug) {\\n                    log(u1.Path);\\n                    log(u2.Path);\\n                }\\n                var df = this.findDifferentIndex(String(u1.Path), String(u2.Path));\\n                if (dt_debug) {\\n                    log(df);\\n                }\\n                if (df.length == 1) {\\n                    var re = df[0].index;\\n                } else {\\n                    var f = df.filter((x) => /\\\\d+/.test(x.s2));\\n                    var re = f[0].index;\\n                }\\n                var eq = this.replaceCharAt(String(u2.Path), re, \\\"fypage\\\");\\n                nexturl = u2.Hosts + eq + ca + this.ToParams(u2.Params);\\n            } else {\\n                var ep = this.getObjectKeysDiff(u1.Params, u2.Params)\\n                if (ep.length == 1) {\\n                    u1.Params[ep[0]] = 'fypage'\\n                } else {\\n                    log(ep);\\n                }\\n                var eq = String(u1.Path).replace(/\\\\d+/, \\\"fypage\\\");\\n                nexturl = u1.Hosts + eq + ca + this.ToParams(u1.Params);\\n            }\\n        }\\n        //log('next:'+nexturl)\\n        return nexturl;\\n    },\\n};\\n\\nfunction getTruelink(mark, url, page) {\\n    var p = getMyVar(mark, url).replace(\\\"fypage\\\", page);\\n    if (page == 1) {\\n        return getMyVar(\\\"yi_firstpage\\\", p);\\n    } else if (p != \\\"\\\") {\\n        return p;\\n    } else {\\n        return url;\\n    }\\n}\\n//构建\\nfunction createNextPage() {\\n    let startnum = 1;\\n    var obj = arguments[0];\\n    if (true_url != getMyVar(\\\"yi_pageurl\\\", \\\"\\\")) {\\n        clearMyVar(\\\"yi_pageurl\\\");\\n    }\\n    if (page == startnum && getMyVar(\\\"yi_pageurl\\\") == \\\"\\\") {\\n        putMyVar(\\\"yi_firstpage\\\", true_url);\\n        try {\\n            var next = eval(下一页);\\n            //log(\\\"next\\\");\\n            //log(next);\\n        } catch {\\n            log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\n            next = \\\"\\\";\\n        }\\n        if (next != \\\"\\\") {\\n            var nxurl = extMethod.getNextUrl(true_url, next, obj);\\n            //log(\\\"nxurl:\\\" + nxurl);\\n            putMyVar(状态, nxurl);\\n            putMyVar(\\\"yi_pageurl\\\", nxurl);\\n        }\\n    }\\n}\\n\\nfunction autoPage() {\\n    if (page == 1) {\\n        putMyVar(\\\"yi_firstpage\\\", true_url);\\n    }\\n    try {\\n        var next = eval(下一页);\\n        //log(\\\"next\\\");\\n        //log('next:'+next);\\n    } catch {\\n        log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\n        next = \\\"\\\";\\n    }\\n    if (next != \\\"\\\") {\\n        putMyVar(状态, next);\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"环境封装\",\"path\":\"repair\",\"rule\":\"js:\\n/*\\n2023-10-15 by α\\n*/\\n\\nvar document = {};\\nvar window = {\\n    location: {\\n        reload: function() {\\n            return;\\n        }\\n    }\\n};\\n\\n// 定义一个对象用于存储 cookie 名称和值的键值对\\nvar cookies = {};\\nObject.defineProperty(document, 'cookie', {\\n    enumerable: true,\\n    configurable: true,\\n    get: function() {\\n        return Object.entries(cookies).map(([key, value]) => `${key}=${value}`).join('; ');\\n    },\\n    set: function(value) {\\n        var list = [];\\n        if (value.includes(';')) {\\n            list = value.split(';');\\n        } else {\\n            list = [value];\\n        }\\n        list.forEach(x => {\\n            var index = x.indexOf(\\\"=\\\");\\n            var key = x.substring(0, index).trim();\\n            var value = x.substring(index + 1);\\n            cookies[key] = value;\\n        })\\n    }\\n});\\n\\nfunction guard(url, headobj) {\\n    var head = headobj ? headobj : {};\\n    head['headers'] = head['headers'] ? head['headers'] : {};\\n    head['headers']['Cookie'] = getCookie(url);\\n    //log(head)\\n    var html = fetch(url, head);\\n    if (html.includes('_guard/auto.js')) {\\n        document[\\\"cookie\\\"] = getCookie(url);\\n        eval(fetch(getHome(url) + '/_guard/auto.js'))\\n        head['headers']['Cookie'] = document[\\\"cookie\\\"];\\n        html = fetch(url, head);\\n    }\\n    //log(document[\\\"cookie\\\"])\\n    return html;\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"设置\",\"path\":\"setting\",\"rule\":\"js:\\neval(fetch('file:///storage/emulated/0/Download/web/setui.js'))\"},{\"col_type\":\"movie_3\",\"name\":\"默认参数\",\"path\":\"def\",\"rule\":\"js:\\nvar onfile = true;\\nlet def = {};\\nif (onfile) {\\n    eval(fetch('file:///storage/emulated/0/Download/web/def.js'))\\n} else {\\n    def = {\\n        style: '1',\\n        每页数量: 30,\\n        分页阈值: 30,\\n    }\\n}\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类改\",\"path\":\"dtfl\",\"rule\":\"js:\\n/*\\nVer 2023-10-28 1.0\\n备注：不要用海阔代码格式化 内容会出错\\n必须参数：\\n分类颜色 大类定位 \\n小类定位 分类标题 分类链接\\nhtml =>源码 page =>页码\\n可选参数：\\n拼接分类 折叠标记 展开标记 排除\\n大类链接 大类标题 清除键 开启折叠\\n附加定位\\n说明：\\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\\n魔改:α\\n*/\\n\\nlet empty = \\\"hiker://empty\\\";\\nlet categories = [];\\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n    if (拼接分类.includes(';')) {\\n        拼接分类 = 拼接分类.split(';');\\n    }\\n    if (拼接分类.constructor == Array) {\\n        拼接分类.forEach(item => {\\n            categories = categories.concat(pdfa(html, item));\\n        })\\n    } else {\\n        categories = [pdfa(html, 大类定位).join('\\\\n')].concat(pdfa(html, 拼接分类));\\n    }\\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\\n        附加定位.forEach(x => {\\n            var 一级 = pdfa(html, x.一级定位).map(s => {\\n                var 定位 = pdfa(s, x.小类).map(q => {\\n                    var title = pdfh(q, x.标题);\\n                    var url = 'a'\\n                    if (x.链接.includes('@@')) {\\n                        state = x.链接.split('@@')[0]\\n                        value = pdfh(q, x.链接.split('@@')[1]);\\n                        if (x.转换 == true) {\\n                            return `<li data-type=\\\"${state}\\\" data-val=\\\"${value}\\\"><a href=\\\"\\\">${title}</a></li>`\\n                        } else {\\n                            return `<a type=\\\"@extra\\\" state=\\\"${state}\\\" value=\\\"${value}\\\">${title}</a>`;\\n                        }\\n                    } else {\\n                        href = pd(q, x.链接);\\n                        return `<a href=\\\"${href}\\\">${title}</a>`;\\n                    }\\n                });\\n                return 定位;\\n            });\\n            categories.push(一级.join('\\\\n'));\\n        });\\n    }\\n} else {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n}\\n\\nlet items = [];\\nlet cates = [];\\nlet init_cate = new Array(20).fill(\\\"0\\\");\\nconst fold = getMyVar(MY_RULE.group, \\\"0\\\");\\nconst cate_temp = JSON.parse(getMyVar(\\\"head.cate\\\", JSON.stringify(init_cate)));\\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\\\"#FF0000\\\");\\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\\\"#1aad19\\\");\\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\\n全清.unshift('yi_firstpage');\\n\\n\\nif (parseInt(page) === 1) {\\n    if (搜索) {\\n        d.push({\\n            title: \\\"\\\",\\n            url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n            desc: \\\"搜索关键词\\\",\\n            col_type: \\\"input\\\",\\n            extra: {\\n                defaultValue: getMyVar('keyword', ''),\\n                onChange: $.toString(() => {\\n                    putMyVar('keyword', input);\\n                })\\n            }\\n        })\\n    }\\n    if (折叠状态) {\\n        if (page == 1) {\\n            items.push({\\n                title: fold === '1' ? 折叠 : 展开,\\n                url: $(\\\"#noLoading#\\\").lazyRule((title, fold, u, all, exps) => {\\n                    var fold = getMyVar(MY_RULE.group, fold);\\n                    var [展开, 折叠] = exps;\\n                    if (fold == 1) {\\n                        var cx = findItemsByCls(title + 'cate_button');\\n                        storage0.putMyVar('cate_button', cx);\\n                        deleteItemByCls(title + 'cate_button');\\n                    } else {\\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\\n                            return x;\\n                        });\\n                        addItemAfter(title + 'cate_line', cx)\\n                    }\\n                    /*all.forEach((item) => {\\n                      clearMyVar(item);\\n                    });*/\\n                    updateItem(title + 'cate_exp', {\\n                        title: fold == 1 ? 展开 : 折叠,\\n                    })\\n                    putMyVar(MY_RULE.group, fold === \\\"1\\\" ? \\\"0\\\" : \\\"1\\\");\\n                    return \\\"hiker://empty\\\";\\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\\n                col_type: 'scroll_button',\\n                extra: {\\n                    id: MY_RULE.title + 'cate_exp',\\n                    longClick: [{\\n                        title: '清除状态',\\n                        js: $.toString((x, all, cl) => {\\n                            clearMyVar(x);\\n                            clearMyVar('head.cate');\\n                            all.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            cl.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            refreshPage();\\n                        }, 状态, 全清, 清除)\\n                    }]\\n                }\\n            })\\n        }\\n    }\\n    let setTitle = (k, i, t) => {\\n        return k == i ? \\\"““””\\\" + t.fontcolor(分类颜色) : t\\n    }\\n    categories.forEach((category, index) => {\\n        let sub_categories = [];\\n        if (小类定位.includes(';')) {\\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\\n            if (sub_categories.length == 0) {\\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\\n            }\\n        } else {\\n            sub_categories = pdfa(category, 小类定位);\\n        }\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\\n\\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\\n\\n                let title = pdfh(item, _大类标题);\\n                if (typeof (排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                }\\n                let params = {\\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\\n                }\\n\\n                let url = pd(item, _大类链接);\\n                if (大类处理) {\\n                    //log(一级分类处理)\\n                    //log($.stringify(一级分类处理))\\n                    let input = url;\\n                    eval(\\\"result = \\\" + 一级分类处理);\\n                    //log(result)\\n                    url = result;\\n                }\\n                items.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    col_type: 'scroll_button',\\n                    url: $(url + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = [];\\n                        params.clears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(new_cate));\\n                        putMyVar(params.state, input);\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params)\\n                });\\n            });\\n            items.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    id: MY_RULE.title + 'cate_line',\\n                }\\n            })\\n        } else {\\n            sub_categories.forEach((item, key) => {\\n                var extrapos = false;\\n                if (item.includes('type=\\\"@extra\\\"')) {\\n                    extrapos = true;\\n                    //log('附加定位')\\n                }\\n\\n                if (extrapos) {\\n                    var title = pdfh(item, 'a&&Text');\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n                    var json = {\\n                        type: pdfh(item, 'a&&state'),\\n                        value: pdfh(item, 'a&&value'),\\n                    }\\n                } else {\\n\\n                    var title = pdfh(item, 分类标题);\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n\\n                    var json = '';\\n                    switch (true) {\\n                        case 分类链接.includes('@@@'):\\n                            json = {\\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\\n                            }\\n                            break;\\n                        case 分类链接.includes('@@'):\\n                            json = {\\n                                type: 分类链接.split('@@')[0],\\n                                value: pdfh(item, 分类链接.split('@@')[1]),\\n                            }\\n                            break;\\n                        default:\\n                            json = pd(item, 分类链接);\\n                            break;\\n                    }\\n                    /*var json=分类链接.includes('@@@')?{\\n                         type:pdfh(item,分类链接.split('@@@')[0]),\\n                         value:pdfh(item,分类链接.split('@@@')[1]),\\n                     }:pd(item,分类链接);\\n                     \\n                     json=分类链接.includes('@@')?{\\n                         type:分类链接.split('@@')[0],\\n                         value:pdfh(item,分类链接.split('@@')[1]),\\n                     }:pd(item,分类链接);*/\\n\\n                }\\n\\n                let params = {\\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\\n                }\\n                cates.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.cate_temp[params.index] = params.key.toString();\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(params.cate_temp));\\n                        if (params.json.constructor === Object) {\\n                            putMyVar('dt_' + params.json.type, params.json.value);\\n                        } else {\\n                            putMyVar(params.state, params.json);\\n                        }\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params),\\n                    col_type: 'scroll_button',\\n                    extra: {\\n                        cls: MY_RULE.title + 'cate_button',\\n                    }\\n                });\\n            });\\n            cates.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    cls: MY_RULE.title + 'cate_button',\\n                }\\n            });\\n        }\\n    })\\n}\\n\\n\\nif (fold === \\\"1\\\" || 折叠状态 == false) {\\n    items = items.concat(cates);\\n}\\nif (fold === \\\"0\\\") {\\n    storage0.putMyVar('cate_button', cates)\\n}\\nif (typeof setPreResult != 'undefined') {\\n    items = d.concat(items);\\n    //清空继承数组\\n    d.length = 0;\\n    setPreResult(items);\\n} else {\\n    items.forEach(item => {\\n        d.push(item);\\n    })\\n}\\n\"}]","proxy":"","icon":""}