{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"注册表","path":"registry","rule":"js:\nconst txt_name = \"GithubRegistry\";\nconst password = \"hiker721\";\nconst host = \"txtpad.txtbin.cn\";\n\nfunction getRegistry() {\n    try {\n        let registry = post(\"https://\" + host + \"/txt/data/detail/\", {\n            body: {\n                txt_name: txt_name,\n                password: password\n            }\n        });\n        let rd = JSON.parse(registry).data;\n        registry = JSON.parse(rd.txt_content)[0].content || \"\";\n        return {\n            content: JSON.parse(registry),\n            vid: rd.v_id\n        };\n    } catch {\n        return {\n            content: []\n        };\n    }\n}\n\nfunction setRegistry(registry) {\n    try {\n        let res = post(\"https://\" + host + \"/txt/data/save/\", {\n            body: {\n                txt_name: txt_name,\n                password: password,\n                txt_content: JSON.stringify([{\n                    \"title\": \"注册表\",\n                    \"content\": JSON.stringify(registry.content)\n                }]),\n                v_id: registry.vid || \"\"\n            }\n        });\n        res = JSON.parse(res);\n        if (res.status === 1) {\n            clearMyVar(\"developer\");\n            return true;\n        }\n        return false;\n    } catch (e) {\n        log(e.toString());\n        return false\n    }\n}\n\n\nfunction getDeveloper(renovate) {\n    let developer = storage0.getMyVar(\"developer\", \"\");\n    if (!developer || renovate) {\n        developer = getRegistry().content;\n        storage0.putMyVar(\"developer\", developer);\n    }\n    return developer;\n}\n\nfunction setDevInfo(uesrName, info) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    registry.content.splice(index, 1, Object.assign(registry.content[index], info));\n    return setRegistry(registry);\n}\n\nfunction addDev(uesr) {\n    let registry = getRegistry();\n    registry.content.push(uesr);\n    return setRegistry(registry);\n}\n\nfunction deleteDev(uesrName) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    registry.content.splice(index, 1);\n    return setRegistry(registry);\n}\n\nfunction moveDev(uesrName, newIndex) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    let info = registry.content.splice(index, 1)[0];\n    registry.content.splice(newIndex, 0, info);\n    return setRegistry(registry);\n}\n$.exports = {\n    setRegistry: setRegistry,\n    getRegistry: getRegistry,\n    getDeveloper: getDeveloper,\n    setDevInfo: setDevInfo,\n    addDev: addDev,\n    deleteDev: deleteDev,\n    moveDev: moveDev\n};"},{"col_type":"movie_3","name":"GithubAPI","path":"GithubAPI","rule":"js:\nconst HOST = \"api.github.com\";\nconst basicUrl = \"https://\" + HOST;\n\nfunction getContents(repo, path, error, token) {\n    let headers = {\n        Accept: \"application/vnd.github.v3+json\",\n    };\n    let guest_token = token || getItem('guest_token', '');\n    if (guest_token) {\n        headers.Authorization = \"token \" + guest_token;\n    }\n    let res = fetch(basicUrl + \"/repos/\" + repo + \"/contents/\" + (path || \"\"), {\n        headers: headers\n    });\n    res = JSON.parse(res);\n    if (res.message && error) {\n        return error(res);\n    } else if (res.message) {\n        throw new Error(res.message);\n    }\n    return res;\n}\n\nfunction getRepoInfo(repo, token) {\n    let login = JSON.parse(fetch(basicUrl + \"/repos/\" + repo, {\n        headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            Authorization: \"token \" + token\n        }\n    }));\n    if (login.message) {\n        throw new Error(login.message);\n    }\n    return login;\n}\n\nfunction createFile(repo, token, path, content, sha) {\n    let upUrl = basicUrl + \"/repos/\" + repo + \"/contents/\" + path;\n    try {\n        if (sha === void 0) {\n            sha = getContents(repo, path, void 0, token).sha;\n        }\n    } catch (e) {\n        if (e.message != \"Not Found\") {\n            throw e;\n        }\n    }\n    const res = JSON.parse(fetch(upUrl, {\n        body: {\n            branch: 'main',\n            message: 'upload',\n            content: base64Encode(content || \"\"),\n            path: path,\n            sha: sha || \"\"\n        },\n        headers: {\n            \"Authorization\": \"token \" + token,\n            'Content-Type': 'application/json; charset=utf-8',\n        },\n        method: \"PUT\"\n    }));\n    if (res.message) {\n        throw new Error(res.message);\n    }\n    return res;\n}\n\nfunction deleteFile(repo, token, path, sha) {\n    let deleteUrl = basicUrl + \"/repos/\" + repo + \"/contents/\" + path;\n    if (!sha) {\n        sha = getContents(repo, path).sha;\n    }\n    let res = JSON.parse(fetch(deleteUrl, {\n        headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            Authorization: \"token \" + token\n        },\n        body: {\n            sha: sha,\n            message: \"删除规则\"\n        },\n        method: \"DELETE\",\n        withStatusCode: true\n    }));\n    if (res.statusCode === 200) {\n        java.lang.Thread.sleep(1650);\n        return true;\n    } else {\n        res = JSON.parse(res.body);\n        throw new Error(res.message);\n    }\n\n}\n\nfunction changeTable(repo, token, func, path) {\n    path = path || \"manifest.json\";\n    let summary = getContents(repo, path, (e) => {\n        if (e.message === \"Not Found\") {\n            return {\n                content: \"\"\n            };\n        } else {\n            throw new Error(\"摘要表获取失败\");\n        }\n    }, token);\n    let table;\n    if (summary.content) {\n        table = JSON.parse(base64Decode(summary.content));\n        if (!Array.isArray(table.rules)) {\n            table.rules = [];\n        }\n    } else {\n        table = {\n            rules: []\n        };\n    }\n    createFile(repo, token, path, JSON.stringify(func(table)), summary.sha || \"\");\n}\n$.exports = {\n    getContents: getContents,\n    getRepoInfo: getRepoInfo,\n    createFile: createFile,\n    deleteFile: deleteFile,\n    changeTable: changeTable\n}"},{"col_type":"movie_3","name":"提交规则","path":"submit","rule":"const GithubAPI = $.require(\"GithubAPI?rule=Github仓库\");\nconst dirEnum = $.require(\"directoryEnum.json?rule=Github仓库\");\n$.exports = function(repo, token, MY_RULE, config) {\n    let pass, path, isRule;\n    let content = '';\n    if (Array.isArray(MY_RULE)) {\n        path = dirEnum.SET.path + MY_RULE[0].group + dirEnum.SET.ext;\n        //pass = \"海阔视界首页合集规则【\" + MY_RULE[0].group + \"】￥home_rule_url￥\";\n        content = JSON.stringify(MY_RULE);\n    } else {\n        isRule = true;\n        path = dirEnum.RULE.path + MY_RULE.title + dirEnum.RULE.ext;\n        //pass = \"海阔视界首页频道规则【\" + MY_RULE.title + \"】￥home_rule_url￥\";\n        content = JSON.stringify(MY_RULE);\n    }\n\n    try {\n        if (isRule) {\n            GithubAPI.changeTable(repo, token, table => {\n                let newIndex = {\n                    title: MY_RULE.title,\n                    icon: MY_RULE.icon,\n                    version: MY_RULE.version,\n                    author: MY_RULE.author,\n                    type: MY_RULE.type,\n                    group: MY_RULE.group,\n                    url: MY_RULE.url\n                };\n                let index = table.rules.findIndex(it => it.title == MY_RULE.title);\n                if (index > -1) {\n                    table.rules.splice(index, 1, newIndex);\n                } else {\n                    table.rules.push(newIndex);\n                }\n                return table;\n            });\n            java.lang.Thread.sleep(350);\n        }\n        GithubAPI.createFile(repo, token, path, content);\n        return \"上传成功\";\n    } catch (e) {\n        log(e.toString());\n        return \"上传失败\";\n    }\n}"},{"col_type":"movie_3","name":"注册","path":"register","rule":"js:\nvar d = [];\naddListener(\"onClose\", $.toString(() => {\n    clearMyVar(\"ps_name\");\n    clearMyVar(\"ps_repo\");\n    clearMyVar(\"ps_token\");\n}));\n\nsetPageTitle(\"注册/登陆\");\nd.push({\n    col_type: \"input\",\n    desc: \"展示名称\",\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_name\", input);\n        }),\n        titleVisible: false\n    }\n});\nd.push({\n    col_type: \"input\",\n    desc: \"github用户名/仓库名\",\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_repo\", input);\n        }),\n        titleVisible: false,\n    }\n});\n\nd.push({\n    col_type: \"input\",\n    desc: \"token\",\n    extra: {\n        type: \"password\",\n        onChange: $.toString(() => {\n            putMyVar(\"ps_token\", input);\n        }),\n        titleVisible: false,\n    }\n});\nd.push({\n    title: \"注册/登录\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        showLoading(\"正在注册/登录...\");\n        let name = getMyVar(\"ps_name\", \"\");\n        if (name == \"\") {\n            return \"toast://用户名不能为空\"\n        }\n        let repo = getMyVar(\"ps_repo\", \"\");\n        if (repo == \"\") {\n            return \"toast://repo不能为空\"\n        }\n\n        let token = getMyVar(\"ps_token\", \"\");\n        if (token == \"\") {\n            return \"toast://token不能为空\"\n        }\n        let user = {\n            name: name,\n            repo: repo,\n            token: token\n        };\n        const GithubAPI = $.require(\"GithubAPI\");\n        const Registry = $.require(\"registry\");\n        developer = Registry.getDeveloper(true);\n        let index = developer.findIndex(x => x.name === name && x.repo === repo);\n\n        if (index > -1) {\n            try {\n                GithubAPI.getRepoInfo(repo, token);\n                user.avatar=developer[index].avatar;\n                storage0.setItem(\"user\", user);\n                back();                \n                return \"toast://登录成功\";\n            } catch (e) {\n                hideLoading();\n                return \"toast://登录失败：\" + e.toString();\n            }\n\n        } else if (developer.some(v => v.name === name || v.repo === repo)) {\n            hideLoading();\n            return \"toast://仓库已经存在或用户名已经存在\";\n        } else {\n            try {\n                if (!(GithubAPI.getRepoInfo(repo, token).private === false)) {\n                    return \"toast://注册失败：私密仓库\";\n                }\n            } catch (e) {\n                return \"toast://仓库验证失败:\" + e.toString();\n            }\n            if (Registry.addDev(user)) {\n                storage0.setItem(\"user\", user);\n                back();\n                return \"toast://注册成功\";\n            }\n            hideLoading();\n            return \"toast://注册失败\";\n        }\n\n    }),\n    col_type: \"text_center_1\",\n});\nsetResult(d);"},{"col_type":"movie_3","name":"工具","path":"utils","rule":"js:\nfunction Color(text, color) {\n    return text.toString().fontcolor(color);\n}\n\nfunction HtmlTag(tag, text) {\n    return \"<\" + tag + \">\" + text + \"</\" + tag + \">\";\n}\n\nfunction Rich(text) {\n    return \"““””\" + text;\n}\n\nfunction Small(text) {\n    return HtmlTag(\"small\", text);\n}\n\nfunction removeFileExtension(fileName) {\n    var lastIndex = fileName.lastIndexOf(\".\");\n    if (lastIndex === -1) { // 如果文件名没有扩展名，则返回原始文件名\n        return fileName;\n    }\n    return fileName.substr(0, lastIndex);\n}\n\n\n$.exports = {\n    Color: Color,\n    HtmlTag: HtmlTag,\n    Rich: Rich,\n    Small: Small,\n    removeFileExtension: removeFileExtension\n}"},{"col_type":"movie_3","name":"目录结构","path":"directoryEnum.json","rule":"{\n    \"RULE\": {\n        \"path\": \"rules/\",\n        \"ext\": \".json\",\n        \"zh\": \"小程序\",\n        \"pic\": \"\"\n    },\n    \"SET\":{\n        \"path\": \"compilations/\",\n        \"ext\": \".json\",\n        \"zh\": \"小程序合集\",\n        \"pic\": \"hiker://images/home_icon_item\"\n    },\n    \"HTML\":{\n        \"path\": \"html/\",\n        \"ext\": \".html\",\n        \"zh\": \"静态网页\",\n        \"pic\": \"hiker://images/icon_save\"\n    },\n    \"JS\":{\n        \"path\": \"js/\",\n        \"ext\": \".js\",\n        \"zh\": \"JS插件\",\n        \"pic\": \"hiker://images/icon_code_view\"\n    },\n\n    \"JSON\":{\n        \"path\": \"json/\",\n        \"ext\": \".json\",\n        \"zh\": \"JSON文件\",\n        \"pic\": \"\"\n    },\n    \"TXT\":{\n        \"path\": \"txt/\",\n        \"ext\": \".txt\",\n        \"zh\": \"文本文件\",\n        \"pic\": \"hiker://images/icon_txt2\"\n    },\n    \"SVG\":{\n        \"path\": \"svg/\",\n        \"ext\": \".svg\",\n        \"zh\": \"矢量图标\",\n        \"pic\": \"\",\n        \"isPic\": true\n    }\n}"},{"col_type":"movie_3","name":"规则列表","path":"ruleList","rule":"js:\nconst GithubAPI = $.require(\"GithubAPI?rule=Github仓库\");\nconst dirEnum = $.require(\"directoryEnum.json?rule=Github仓库\");\nconst utils = $.require(\"utils\");\n\n\naddListener(\"onClose\", () => {\n    clearMyVar(\"typeview\");\n    clearMyVar(\"listCache\");\n    clearMyVar(\"indexCache\");\n});\n\naddListener(\"onRefresh\", () => {\n    clearMyVar(\"listCache\");\n    clearMyVar(\"indexCache\");\n});\nlet cls = [];\nlet type = Object.keys(dirEnum);\nlet selType = getMyVar(\"typeview\", type[0]);\nfor (let it of type) {\n    let isType = it === selType;\n    cls.push({\n        title: isType ? \"““\" + dirEnum[it].zh + \"””\" : dirEnum[it].zh,\n        url: $(\"#noLoading#\").lazyRule((it, isType) => {\n            if (isType) {\n                return \"toast://已经是当前目录\";\n            }\n            putMyVar(\"typeview\", it);\n            refreshPage(false);\n            return \"hiker://empty\";\n        }, it, isType),\n        col_type: \"scroll_button\",\n    });\n}\ncls.push({\n    title: \"正在加载...\",\n    url: \"hiker://empty\",\n    col_type: \"text_center_1\",\n    extra: {\n        id: \"Githubloading\",\n        lineVisible: false\n    }\n});\nsetPreResult(cls);\nlet listCache = storage0.getMyVar(\"listCache\", {});\nlet indexCache = storage0.getMyVar(\"indexCache\", {});\nlet d = [];\n\n\nlet indexData = [];\nif (selType === \"RULE\") {\n    indexData = [];\n    if (!indexCache.rules) {\n        try {\n            let indexObj = GithubAPI.getContents(MY_PARAMS.repo, \"manifest.json\");\n            if (indexObj.sha) {\n                indexObj = JSON.parse(base64Decode(indexObj.content));\n                indexData = indexObj.rules;\n                storage0.putMyVar(\"indexCache\", indexObj);\n            }\n        } catch (e) {\n            log(\"摘要获取失败：\" + e.toString());\n        }\n    } else {\n        indexData = indexCache.rules;\n    }\n}\n\nfunction getInfo(item) {\n    let obj = {\n        col_type: \"icon_2_round\"\n    };\n    if (selType === \"RULE\") {\n        obj.title = utils.removeFileExtension(item.name);\n        let indexContent = indexData.find(v => v.title == obj.title) || {};\n        obj.pic_url = indexContent.icon;\n        obj.url = \"rule://\" + base64Encode(\"￥home_rule_url￥\" +getItem('raw_proxy','')+ item.download_url);\n    } else if (selType === \"SET\") {\n        obj.title = utils.removeFileExtension(item.name);\n        obj.url = \"rule://\" + base64Encode(\"￥home_rule_url￥\"+getItem('raw_proxy','') + item.download_url);\n    }else {\n        obj.title = item.name;\n        obj.url = getItem('raw_proxy','') + item.download_url;\n    }\n    if(dirEnum[selType].isPic){\n        obj.pic_url = getItem('raw_proxy','') + item.download_url;\n    }\n    obj.pic_url=obj.pic_url||dirEnum[selType].pic||\"hiker://images/icon_unknown\";\n    return obj;\n}\n\nfunction setManage(obj, item) {\n    obj.url = $([\"删除\", \"复制分享链接\", \"导入\"]).select((url, sha, name, path) => {\n        if (input === \"复制分享链接\") {\n            return \"copy://海阔视界规则【\" + name + \"】￥home_rule_url￥\" + url;\n        } else if (input === \"导入\") {\n            return \"rule://\" + base64Encode(\"￥home_rule_url￥\" + url);\n        } else {\n            return $(\"确认从仓库删除该分享:\" + name).confirm((path, sha) => {\n                let user = storage0.getItem(\"user\", \"\");\n                showLoading(\"正在删除\");\n                const GithubAPI = $.require(\"GithubAPI?rule=Github仓库\");\n                try {\n                    let res = GithubAPI.deleteFile(user.repo, user.token, path, sha);                    \n                    if (res) {\n                        java.lang.Thread.sleep(2650);\n                        clearMyVar(\"listCache\");\n                        refreshPage(false);\n                        hideLoading();\n                        return \"toast://删除成功,服务器删除会有一定延迟\";\n                    }\n                    hideLoading();\n                    return \"toast://删除失败\";\n                } catch (e) {\n                    hideLoading();\n                    return \"toast://删除失败:\" + e.toString();\n                }\n            }, path, sha);\n        }\n    }, (getItem('raw_proxy','')+item.download_url), item.sha, item.name, item.path);\n    return obj;\n}\ntry {\n    let list = [];\n    if (listCache[selType] === void 0) {\n        list = GithubAPI.getContents(MY_PARAMS.repo, dirEnum[selType].path, (e) => {\n            if ([\"This repository is empty.\", \"Not Found\"].includes(e.message)) {\n                return [];\n            } else {\n                throw new Error(e.message);\n            }\n        });\n        list = list.filter(v => v.type === \"file\");\n        listCache[selType] = list || [];\n\n        storage0.putMyVar(\"listCache\", listCache);\n    } else {\n        list = listCache[selType];\n    }\n    if (!list.length) {\n        d.push({\n            title: \"““””\" + \"仓库是空的哦\".small().fontcolor(\"grey\"),\n            url: \"hiker://empty\",\n            col_type: \"text_center_1\"\n        });\n    } else {\n        if(MY_PARAMS.isDev){\n            list.forEach(it => d.push(setManage(getInfo(it), it)));\n        }else{\n            list.forEach(it => d.push(getInfo(it)));\n        }\n    }\n    setResult(d);\n} catch (e) {\n    setResult([{\n        title: \"““ERROR””\",\n        desc: e.toString(),\n        url: \"hiker://empty\",\n        col_type: \"text_center_1\"\n    }]);\n} finally {\n    deleteItem(\"Githubloading\");\n}"},{"col_type":"text_1","name":"设置中心","path":"settings","rule":"js:\nsetPageTitle(\"设置\");\nvar data = [];\n\ndata.push({\n    col_type: \"line_blank\"\n});\nlet user = storage0.getItem(\"user\", {});\n\n\ndata.push({\n    title: \"头像\",\n    desc: user.avatar || \"hiker://images/icon_account\",\n    url: $(user.avatar || \"\", \"输入头像地址\").input((user) => {\n        if ($.require(\"registry\").setDevInfo(user.name, {\n                avatar: input\n            })) {\n            user.avatar = input;\n            storage0.setItem(\"user\", user);\n            refreshPage();\n            return \"toast://修改成功\";\n        } else {\n            return \"toast://修改失败\";\n        }\n    }, user),\n    extra: \"\",\n    col_type: \"text_1\"\n});\n\nlet raw_proxy=getItem('raw_proxy','https://gh-proxy.com/');\ndata.push({\n    title: \"规则导入代理接口\",\n    desc: raw_proxy,\n    url: $(raw_proxy, \"输入规则导入代理接口\").input(() => {\n        setItem('raw_proxy',input);\n        refreshPage();\n        return 'hiker://empty'\n    }),\n    extra: {},\n    col_type: \"text_1\"\n});\n\nlet guest_token=getItem('guest_token','');\ndata.push({\n    title: \"访问Token设置\",\n    desc: guest_token,\n    url: $(guest_token, \"输入访问Token\").input(() => {\n        setItem('guest_token',input);\n        refreshPage();\n        return 'hiker://empty'\n    }),\n    extra: {},\n    col_type: \"text_1\"\n});\n\ndata.push({\n    col_type: \"line_blank\"\n});\ndata.push({\n    title: \"昵称\",\n    desc: user.name,\n    url: \"hiker://empty\",\n    col_type: \"text_1\"\n});\ndata.push({\n    title: \"仓库\",\n    desc: user.repo,\n    url: \"hiker://empty\",\n    col_type: \"text_1\"\n});\ndata.push({\n    title: \"TOKEN\",\n    desc: user.token,\n    url: $('同步设置为访问Token?').confirm((token)=>{\n        setItem('guest_token',token);\n        refreshPage();\n        return 'toast://同步成功'\n    },user.token),\n    col_type: \"text_1\"\n});\ndata.push({\n    col_type: \"line_blank\"\n});\n\n\ndata.push({\n    title: \"提交云仓库规则\",\n    url: \"copy://$eyJuYW1lIjoiR2l0aHVi5LuT5bqTIiwianMiOiJyZXR1cm4gJC5yZXF1aXJlKFwic3VibWl0P3J1bGU9R2l0aHVi5LuT5bqTXCIpKE1ZX0FDQ09VTlQsIE1ZX1BBU1NXT1JELCBNWV9SVUxFLCBNWV9FWFRSQSk7In0=$a@import=js:$.require('import?rule=仓库提交管理')(input)\",\n    col_type: \"text_1\"\n});\n\ndata.push({\n    title: \"同步提交云仓库账号密码\",\n    url: \"hiker://page/password?rule=仓库提交管理\",\n    col_type: \"text_1\",\n    extra: {\n        name: MY_RULE.title,\n        preinstall: {\n            user: user.repo,\n            password: user.token,\n            extra: \"\"\n        }\n    }\n});\ndata.push({\n    col_type: \"line_blank\"\n});\n\n\ndata.push({\n    title: \"退出登录\",\n    url: $(\"确认退出登录?\").confirm(f => {\n        clearItem(\"user\");\n        back();\n        return \"toast://已退出\";\n    }),\n    col_type: \"text_center_1\"\n});\ndata.push({\n    col_type: \"line_blank\"\n});\ndata.push({\n    title: \"““注销账号””\",\n    url: $(\"是否注销账号?\").confirm((name) => {\n        if ($.require(\"registry\").deleteDev(name)) {\n            back();\n            return \"toast://注销成功\";\n        } else {\n            return \"toast://注销失败\";\n        }\n    }, user.name),\n    col_type: \"text_center_1\"\n});\nsetResult(data);\n\n"},{"col_type":"movie_3","name":"管理用户","path":"Usermanagement","rule":"js:\nlet user = storage0.getItem(\"user\", \"\");\n\nsetPageTitle(\"管理员：\" + user.name);\nconst {\n    Color,\n    Rich\n} = $.require('utils');\nlet d = [];\naddListener(\"onRefresh\", () => $.require(\"registry\").getDeveloper(true));\naddListener(\"onClose\", () => refreshPage());\nlet developer = $.require(\"registry\").getDeveloper();\nd.push({\n    title: \"备份\",\n    url: $().lazyRule(() => {\n        let registry = $.require(\"registry\").getRegistry();\n        let developer = registry.content;\n        //storage0.setItem(\"userDataBackup\", developer);\n        writeFile('hiker://files/rules/gitHouse/userDataBackup.json', JSON.stringify(developer));\n        return \"toast://备份成功\";\n    }),\n    col_type: \"text_2\",\n});\n\nd.push({\n    title: \"恢复\",\n    url: $().lazyRule(() => {\n        let backup = JSON.parse(fetch('hiker://files/rules/gitHouse/userDataBackup.json') || []);\n        let registry = $.require(\"registry\").getRegistry();\n        //registry.content = storage0.getItem(\"userDataBackup\", registry.content);\n        if (backup.length > 0) {\n            registry.content = backup;\n        }\n        if ($.require(\"registry\").setRegistry(registry)) {\n            refreshPage(false);\n            return \"toast://恢复成功\";\n        } else {\n            return \"toast://恢复失败\";\n        }\n    }),\n    col_type: \"text_2\",\n});\nlet option = getMyVar('manageoption', '删除');\n\nfunction setTitle(title) {\n    if (title == option) {\n        return Rich(Color(title, '#12b668'));\n    } else {\n        return title\n    }\n}\nlet options = [\"删除\", \"排序\", \"设置头像\", \"修改用户名\"];\nfor (let it of options) {\n    d.push({\n        title: setTitle(it),\n        col_type: 'scroll_button',\n        url: $('#noLoading#').lazyRule((it) => {\n            putMyVar('manageoption', it);\n            refreshPage();\n            return 'hiker://empty';\n        }, it)\n    });\n}\n\nd.push({\n    col_type: \"line_blank\"\n});\nlet i = 0;\nfor (let it of developer) {\n    d.push({\n        title: it.name,\n        pic_url: it.avatar,\n        url: $('#noLoading#').lazyRule((it, option, index) => {\n            return $.require('adminOperate')(it, option, index);\n        }, it, option, i++),\n        col_type: \"icon_2_round\"\n    });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"管理员操作","path":"adminOperate","rule":"js:\n$.exports = function(user, option, index) {\n    if (option == '删除') {\n        return $(\"是否删除该用户？\").confirm((name) => {\n            if ($.require(\"registry\").deleteDev(name)) {\n                refreshPage(false);\n                return \"toast://删除成功\";\n            } else {\n                return \"toast://删除失败\";\n            }\n        }, user.name);\n    } else if (option == '设置头像') {\n        return $(user.avatar, '请输入头像链接').input((name) => {\n            if ($.require(\"registry\").setDevInfo(name, {\n                    avatar: input\n                })) {\n                refreshPage(false);\n                return \"toast://头像修改成功\";\n            } else {\n                return \"toast://头像修改失败\";\n            }\n        }, user.name);\n    } else if (option == '修改用户名') {\n        return $(user.name, '请输入用户名').input((name) => {\n            if ($.require(\"registry\").setDevInfo(name, {\n                    name: input\n                })) {\n                refreshPage(false);\n                return \"toast://用户名修改成功\";\n            } else {\n                return \"toast://用户名修改失败\";\n            }\n        }, user.name);\n    } else if (option == '排序') {\n        return $(index + '', '请输入开发者顺序').input((name) => {\n            if ($.require(\"registry\").moveDev(name,input)) {\n                refreshPage(false);\n                return \"toast://顺序设置成功\";\n            } else {\n                return \"toast://顺序设置失败\";\n            }\n        }, user.name);\n    }\n}"},{"col_type":"movie_3","name":"主页","path":"home","rule":"js:\nvar d = [];\naddListener(\"onRefresh\", () => clearMyVar(\"developer\"));\nlet developer = $.require(\"registry\").getDeveloper();\nconst {\n    Small,\n    Color,\n    Rich\n} = $.require(\"utils\");\nlet user = storage0.getItem(\"user\", \"\");\nlog(user);\nif (user) {\n    let index = developer.findIndex(x => x.name === user.name && x.repo === user.repo);\n    if (index > -1) {\n        let sel = [\"更多分享\",\"规则管理\", \"设置中心\"];\n        if ($.require(\"adminList.json\").includes(user.name)) {\n            sel.push(\"管理用户\");\n        }\n        d.push({\n            title: user.name,\n            col_type: \"avatar\",\n            pic_url: user.avatar || \"hiker://images/icon_setting6\",\n            url: $(sel).select(() => {\n                if (input === \"管理用户\") {\n                    return \"hiker://page/Usermanagement#noRecordHistory##noHistory#\";\n                } else if (input === \"设置中心\") {\n                    return \"hiker://page/settings#noRecordHistory##noHistory#\";\n                } else if(input===\"规则管理\"){\n                    return \"hiker://page/ruleList#noRecordHistory##noHistory#\";\n                }else if(input===\"更多分享\"){\n                    return \"hiker://page/moreShare#noRecordHistory##noHistory#\";\n                }\n            }),\n            extra: {\n                isDev: true,\n                repo: user.repo\n            }\n        });\n    } else {\n        clearItem(\"user\");\n        toast(\"未查询到您的注册信息，可能已经更改或删除\");\n        d.push({\n            title: \"注册/登录\",\n            url: \"hiker://page/register#noRecordHistory##noHistory#\",\n            col_type: \"text_2\"\n        });\n        d.push({\n            title: \"游客设置\",\n            url: \"hiker://page/guest#noRecordHistory##noHistory#\",\n            col_type: \"text_2\"\n        });\n    }\n} else {\n    d.push({\n        title: \"注册/登录\",\n        url: \"hiker://page/register#noRecordHistory##noHistory#\",\n        col_type: \"text_2\"\n    });\n    d.push({\n            title: \"游客设置\",\n            url: \"hiker://page/guest#noRecordHistory##noHistory#\",\n            col_type: \"text_2\"\n    });\n}\nd.push({\n    col_type: 'text_1',\n    title: Rich(Small(\"现有 \" + Color(developer.length, \"#ff7000\") + \" 名开发者\")),\n    url: \"toast://喵喵喵?\",\n});\nfor (let it of developer) {\n    d.push({\n        title: it.name,\n        url: \"hiker://page/ruleList#noRecordHistory##noHistory#\",\n        pic_url: it.avatar || \"hiker://images/icon_account\",\n        col_type: \"icon_2_round\",\n        extra: {\n            repo: it.repo,\n        }\n    });\n}\n\nsetResult(d);"},{"col_type":"movie_3","name":"管理员列表","path":"adminList.json","rule":"[\"LoyDgIk\", \"道长\"]"},{"col_type":"movie_3","name":"游客设置","path":"guest","rule":"js:\nsetPageTitle('游客设置');\nconst {addLabel,addConf}=$.require('commonUi');\nlet d=[];\naddLabel(d,'规则导入代理设置','防止从规则列表点击规则弹出立即导入按钮由于被墙导入无反应');\naddConf(d,'请输入规则导入代理接口','raw_proxy','https://gh-proxy.com/');\naddLabel(d,'访问Token设置','将GitHub api接口请求次数从每小时60次提升到5000次，破解请求次数限制');\naddConf(d,'请输入Token','guest_token');\nsetResult(d);"},{"col_type":"movie_3","name":"公共页面渲染","path":"commonUi","rule":"js:\nfunction addLabel(d,title,desc){\nd.push({\n    title:title ,\n    url: 'hiker://empty',\n    col_type: \"text_1\",\n    desc: desc,\n});\n    \n}\n\nfunction addConf(d,tips,key,value){\nd.push({\n    title:'保存',\n    desc:tips,\n    col_type:'input',\n    url:$.toString((key)=>{\n     setItem(key,input);\n     return 'toast://保存成功'\n    },key),\n    extra:{\n     type:'textarea',\n     textSize: 11,\n     //highlight:1,\n     height: -1,       defaultValue:getItem(key,value||''),\n     onChange:`putMyVar('${key}',input)`\n }\n    \n});\n}\n\n$.exports = {\n    addLabel:addLabel,\n    addConf: addConf,\n}"},{"col_type":"movie_3","name":"更多分享","path":"moreShare","rule":"js:\nsetPageTitle(\"更多分享\");\nconst {\n    Small,\n    Color,\n    Rich,\n} = $.require(\"utils\");\nconst dirEnum = $.require(\"directoryEnum.json?rule=Github仓库\");\nlet types = Object.keys(dirEnum).filter(v => ![\"RULE\", \"SET\"].includes(v));\nlet type = getItem('upFileType', types[0]);\n\nlet d = [];\nd.push({\n    desc: \"文件路径,支持hiker,file\",\n    col_type: \"input\",\n    extra: {\n        onChange: \"putMyVar('uppath',input)\",\n        titleVisible: false,\n        id: 'filePath',\n        defaultValue: getMyVar('uppath', \"\")\n    }\n});\nd.push({\n    title: \"选择文件路径\",\n    url: $('#noLoading#').lazyRule((fileType) => {\n        let fp = \"https://gitcode.net/qq_32394351/dr/-/raw/master/libs/fileSelect.js\";\n        let f = require(fp);\n        return f.fileSelectionUri({\n            callback: $.toString(() => {\n                let target = findItem(\"filePath\").extra;\n                updateItem(\"filePath\", {\n                    extra: Object.assign(target, {\n                        defaultValue: PATH\n                    })\n                });\n                putMyVar('uppath', PATH);\n                return true;\n            }),\n            onClickType: 'confirm',\n            fileType: fileType,\n            pattern: 0,\n            requireUrl: fp,\n            initialPath: getPath('hiker://files/').slice(7),\n            memory: 'true',\n        });\n    }, dirEnum[type].ext),\n    col_type: \"text_center_1\",\n});\n\nd.push({\n    title: Rich('上传目录：\\t' + Color(dirEnum[type].zh, '#ff7000')),\n    desc: \"\",\n    col_type: 'text_1',\n    url: $(types, 2).select(() => {\n        setItem('upFileType', input);\n        refreshPage(true);\n        return 'toast://你选择了:' + input;\n    })\n});\n\nd.push({\n    title: '预览',\n    col_type: 'text_2',\n    url: $(\"#noLoading#\").lazyRule((type, isPic) => {\n        let path = getMyVar('uppath', \"\");\n        if (!path) {\n            return \"toast://请输入path\";\n        }\n        return $().rule((path, isPic) => {\n            let d = [];\n            if (isPic) {\n                d.push({\n                    url: path,\n                    pic_url: path,\n                    col_type: \"pic_1_center\"\n                });\n            } else {\n                let text = fetch(\"file://\" + path)\n                d.push({\n                    title: text.slice(0, 800) + (text.length > 400 ? \"...文本过长已截断\" : \"\"),\n                    col_type: \"long_text\"\n                });\n            }\n            setResult(d);\n        }, path, isPic);\n    }, type, dirEnum[type].isPic)\n});\n\nd.push({\n    title: '上传',\n    col_type: 'text_2',\n    url: $(\"#noLoading#\").lazyRule((type, ext) => {\n        let path = getMyVar('uppath', \"\");\n        if (!path) {\n            return \"toast://请输入path\";\n        }\n        if (!path.endsWith(ext)) {\n            return \"toast://文件类型错误\";\n        }\n        return $().rule((path, type) => {\n            let d = [];\n            let file = new java.io.File(path);\n            d.push({\n                title: \"文件名：\" + file.getName(),\n                url: \"hiker://empty\",\n                col_type: \"text_1\"\n            });\n            d.push({\n                title: \"大小：\" + file.length(),\n                url: \"hiker://empty\",\n                col_type: \"text_1\"\n            });\n            d.push({\n                title: \"最后修改：\" + $.dateFormat(file.lastModified(), \"yyyy-MM-dd HH:mm:ss\"),\n                url: \"hiker://empty\",\n                col_type: \"text_1\"\n            });\n\n            d.push({\n                title: \"开始上传\",\n                col_type: \"text_center_1\",\n                url: $().lazyRule((path, type, name) => {\n                    const dirEnum = $.require(\"directoryEnum.json?rule=Github仓库\");\n                    const GithubAPI = $.require(\"GithubAPI?rule=Github仓库\");\n                    try {\n                        let content = fetch(\"file://\" + path);\n                        let user = storage0.getItem(\"user\", {});\n                        GithubAPI.createFile(user.repo, user.token, dirEnum[type].path + name, content);\n                        return \"toast://上传成功\";\n                    } catch (e) {\n                        log(e.toString());\n                        return \"toast://上传失败\";\n                    }\n                }, path, type, file.getName())\n            });\n            setResult(d);\n        }, path, type);\n    }, type, dirEnum[type].ext)\n});\n\n\n\nsetResult(d);"}],"title":"Github仓库","author":"@LoyDgIk","version":15,"type":"video","url":"hiker://empty##","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:$.require(\"home\");","searchFind":"","search_url":"","group":"开发中心","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"注册表\",\"path\":\"registry\",\"rule\":\"js:\\nconst txt_name = \\\"GithubRegistry\\\";\\nconst password = \\\"hiker721\\\";\\nconst host = \\\"txtpad.txtbin.cn\\\";\\n\\nfunction getRegistry() {\\n    try {\\n        let registry = post(\\\"https://\\\" + host + \\\"/txt/data/detail/\\\", {\\n            body: {\\n                txt_name: txt_name,\\n                password: password\\n            }\\n        });\\n        let rd = JSON.parse(registry).data;\\n        registry = JSON.parse(rd.txt_content)[0].content || \\\"\\\";\\n        return {\\n            content: JSON.parse(registry),\\n            vid: rd.v_id\\n        };\\n    } catch {\\n        return {\\n            content: []\\n        };\\n    }\\n}\\n\\nfunction setRegistry(registry) {\\n    try {\\n        let res = post(\\\"https://\\\" + host + \\\"/txt/data/save/\\\", {\\n            body: {\\n                txt_name: txt_name,\\n                password: password,\\n                txt_content: JSON.stringify([{\\n                    \\\"title\\\": \\\"注册表\\\",\\n                    \\\"content\\\": JSON.stringify(registry.content)\\n                }]),\\n                v_id: registry.vid || \\\"\\\"\\n            }\\n        });\\n        res = JSON.parse(res);\\n        if (res.status === 1) {\\n            clearMyVar(\\\"developer\\\");\\n            return true;\\n        }\\n        return false;\\n    } catch (e) {\\n        log(e.toString());\\n        return false\\n    }\\n}\\n\\n\\nfunction getDeveloper(renovate) {\\n    let developer = storage0.getMyVar(\\\"developer\\\", \\\"\\\");\\n    if (!developer || renovate) {\\n        developer = getRegistry().content;\\n        storage0.putMyVar(\\\"developer\\\", developer);\\n    }\\n    return developer;\\n}\\n\\nfunction setDevInfo(uesrName, info) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    registry.content.splice(index, 1, Object.assign(registry.content[index], info));\\n    return setRegistry(registry);\\n}\\n\\nfunction addDev(uesr) {\\n    let registry = getRegistry();\\n    registry.content.push(uesr);\\n    return setRegistry(registry);\\n}\\n\\nfunction deleteDev(uesrName) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    registry.content.splice(index, 1);\\n    return setRegistry(registry);\\n}\\n\\nfunction moveDev(uesrName, newIndex) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    let info = registry.content.splice(index, 1)[0];\\n    registry.content.splice(newIndex, 0, info);\\n    return setRegistry(registry);\\n}\\n$.exports = {\\n    setRegistry: setRegistry,\\n    getRegistry: getRegistry,\\n    getDeveloper: getDeveloper,\\n    setDevInfo: setDevInfo,\\n    addDev: addDev,\\n    deleteDev: deleteDev,\\n    moveDev: moveDev\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"GithubAPI\",\"path\":\"GithubAPI\",\"rule\":\"js:\\nconst HOST = \\\"api.github.com\\\";\\nconst basicUrl = \\\"https://\\\" + HOST;\\n\\nfunction getContents(repo, path, error, token) {\\n    let headers = {\\n        Accept: \\\"application/vnd.github.v3+json\\\",\\n    };\\n    let guest_token = token || getItem('guest_token', '');\\n    if (guest_token) {\\n        headers.Authorization = \\\"token \\\" + guest_token;\\n    }\\n    let res = fetch(basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + (path || \\\"\\\"), {\\n        headers: headers\\n    });\\n    res = JSON.parse(res);\\n    if (res.message && error) {\\n        return error(res);\\n    } else if (res.message) {\\n        throw new Error(res.message);\\n    }\\n    return res;\\n}\\n\\nfunction getRepoInfo(repo, token) {\\n    let login = JSON.parse(fetch(basicUrl + \\\"/repos/\\\" + repo, {\\n        headers: {\\n            Accept: \\\"application/vnd.github.v3+json\\\",\\n            Authorization: \\\"token \\\" + token\\n        }\\n    }));\\n    if (login.message) {\\n        throw new Error(login.message);\\n    }\\n    return login;\\n}\\n\\nfunction createFile(repo, token, path, content, sha) {\\n    let upUrl = basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + path;\\n    try {\\n        if (sha === void 0) {\\n            sha = getContents(repo, path, void 0, token).sha;\\n        }\\n    } catch (e) {\\n        if (e.message != \\\"Not Found\\\") {\\n            throw e;\\n        }\\n    }\\n    const res = JSON.parse(fetch(upUrl, {\\n        body: {\\n            branch: 'main',\\n            message: 'upload',\\n            content: base64Encode(content || \\\"\\\"),\\n            path: path,\\n            sha: sha || \\\"\\\"\\n        },\\n        headers: {\\n            \\\"Authorization\\\": \\\"token \\\" + token,\\n            'Content-Type': 'application/json; charset=utf-8',\\n        },\\n        method: \\\"PUT\\\"\\n    }));\\n    if (res.message) {\\n        throw new Error(res.message);\\n    }\\n    return res;\\n}\\n\\nfunction deleteFile(repo, token, path, sha) {\\n    let deleteUrl = basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + path;\\n    if (!sha) {\\n        sha = getContents(repo, path).sha;\\n    }\\n    let res = JSON.parse(fetch(deleteUrl, {\\n        headers: {\\n            Accept: \\\"application/vnd.github.v3+json\\\",\\n            Authorization: \\\"token \\\" + token\\n        },\\n        body: {\\n            sha: sha,\\n            message: \\\"删除规则\\\"\\n        },\\n        method: \\\"DELETE\\\",\\n        withStatusCode: true\\n    }));\\n    if (res.statusCode === 200) {\\n        java.lang.Thread.sleep(1650);\\n        return true;\\n    } else {\\n        res = JSON.parse(res.body);\\n        throw new Error(res.message);\\n    }\\n\\n}\\n\\nfunction changeTable(repo, token, func, path) {\\n    path = path || \\\"manifest.json\\\";\\n    let summary = getContents(repo, path, (e) => {\\n        if (e.message === \\\"Not Found\\\") {\\n            return {\\n                content: \\\"\\\"\\n            };\\n        } else {\\n            throw new Error(\\\"摘要表获取失败\\\");\\n        }\\n    }, token);\\n    let table;\\n    if (summary.content) {\\n        table = JSON.parse(base64Decode(summary.content));\\n        if (!Array.isArray(table.rules)) {\\n            table.rules = [];\\n        }\\n    } else {\\n        table = {\\n            rules: []\\n        };\\n    }\\n    createFile(repo, token, path, JSON.stringify(func(table)), summary.sha || \\\"\\\");\\n}\\n$.exports = {\\n    getContents: getContents,\\n    getRepoInfo: getRepoInfo,\\n    createFile: createFile,\\n    deleteFile: deleteFile,\\n    changeTable: changeTable\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"提交规则\",\"path\":\"submit\",\"rule\":\"const GithubAPI = $.require(\\\"GithubAPI?rule=Github仓库\\\");\\nconst dirEnum = $.require(\\\"directoryEnum.json?rule=Github仓库\\\");\\n$.exports = function(repo, token, MY_RULE, config) {\\n    let pass, path, isRule;\\n    let content = '';\\n    if (Array.isArray(MY_RULE)) {\\n        path = dirEnum.SET.path + MY_RULE[0].group + dirEnum.SET.ext;\\n        //pass = \\\"海阔视界首页合集规则【\\\" + MY_RULE[0].group + \\\"】￥home_rule_url￥\\\";\\n        content = JSON.stringify(MY_RULE);\\n    } else {\\n        isRule = true;\\n        path = dirEnum.RULE.path + MY_RULE.title + dirEnum.RULE.ext;\\n        //pass = \\\"海阔视界首页频道规则【\\\" + MY_RULE.title + \\\"】￥home_rule_url￥\\\";\\n        content = JSON.stringify(MY_RULE);\\n    }\\n\\n    try {\\n        if (isRule) {\\n            GithubAPI.changeTable(repo, token, table => {\\n                let newIndex = {\\n                    title: MY_RULE.title,\\n                    icon: MY_RULE.icon,\\n                    version: MY_RULE.version,\\n                    author: MY_RULE.author,\\n                    type: MY_RULE.type,\\n                    group: MY_RULE.group,\\n                    url: MY_RULE.url\\n                };\\n                let index = table.rules.findIndex(it => it.title == MY_RULE.title);\\n                if (index > -1) {\\n                    table.rules.splice(index, 1, newIndex);\\n                } else {\\n                    table.rules.push(newIndex);\\n                }\\n                return table;\\n            });\\n            java.lang.Thread.sleep(350);\\n        }\\n        GithubAPI.createFile(repo, token, path, content);\\n        return \\\"上传成功\\\";\\n    } catch (e) {\\n        log(e.toString());\\n        return \\\"上传失败\\\";\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"注册\",\"path\":\"register\",\"rule\":\"js:\\nvar d = [];\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"ps_name\\\");\\n    clearMyVar(\\\"ps_repo\\\");\\n    clearMyVar(\\\"ps_token\\\");\\n}));\\n\\nsetPageTitle(\\\"注册/登陆\\\");\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"展示名称\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_name\\\", input);\\n        }),\\n        titleVisible: false\\n    }\\n});\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"github用户名/仓库名\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_repo\\\", input);\\n        }),\\n        titleVisible: false,\\n    }\\n});\\n\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"token\\\",\\n    extra: {\\n        type: \\\"password\\\",\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_token\\\", input);\\n        }),\\n        titleVisible: false,\\n    }\\n});\\nd.push({\\n    title: \\\"注册/登录\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        showLoading(\\\"正在注册/登录...\\\");\\n        let name = getMyVar(\\\"ps_name\\\", \\\"\\\");\\n        if (name == \\\"\\\") {\\n            return \\\"toast://用户名不能为空\\\"\\n        }\\n        let repo = getMyVar(\\\"ps_repo\\\", \\\"\\\");\\n        if (repo == \\\"\\\") {\\n            return \\\"toast://repo不能为空\\\"\\n        }\\n\\n        let token = getMyVar(\\\"ps_token\\\", \\\"\\\");\\n        if (token == \\\"\\\") {\\n            return \\\"toast://token不能为空\\\"\\n        }\\n        let user = {\\n            name: name,\\n            repo: repo,\\n            token: token\\n        };\\n        const GithubAPI = $.require(\\\"GithubAPI\\\");\\n        const Registry = $.require(\\\"registry\\\");\\n        developer = Registry.getDeveloper(true);\\n        let index = developer.findIndex(x => x.name === name && x.repo === repo);\\n\\n        if (index > -1) {\\n            try {\\n                GithubAPI.getRepoInfo(repo, token);\\n                user.avatar=developer[index].avatar;\\n                storage0.setItem(\\\"user\\\", user);\\n                back();                \\n                return \\\"toast://登录成功\\\";\\n            } catch (e) {\\n                hideLoading();\\n                return \\\"toast://登录失败：\\\" + e.toString();\\n            }\\n\\n        } else if (developer.some(v => v.name === name || v.repo === repo)) {\\n            hideLoading();\\n            return \\\"toast://仓库已经存在或用户名已经存在\\\";\\n        } else {\\n            try {\\n                if (!(GithubAPI.getRepoInfo(repo, token).private === false)) {\\n                    return \\\"toast://注册失败：私密仓库\\\";\\n                }\\n            } catch (e) {\\n                return \\\"toast://仓库验证失败:\\\" + e.toString();\\n            }\\n            if (Registry.addDev(user)) {\\n                storage0.setItem(\\\"user\\\", user);\\n                back();\\n                return \\\"toast://注册成功\\\";\\n            }\\n            hideLoading();\\n            return \\\"toast://注册失败\\\";\\n        }\\n\\n    }),\\n    col_type: \\\"text_center_1\\\",\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"utils\",\"rule\":\"js:\\nfunction Color(text, color) {\\n    return text.toString().fontcolor(color);\\n}\\n\\nfunction HtmlTag(tag, text) {\\n    return \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n}\\n\\nfunction Rich(text) {\\n    return \\\"““””\\\" + text;\\n}\\n\\nfunction Small(text) {\\n    return HtmlTag(\\\"small\\\", text);\\n}\\n\\nfunction removeFileExtension(fileName) {\\n    var lastIndex = fileName.lastIndexOf(\\\".\\\");\\n    if (lastIndex === -1) { // 如果文件名没有扩展名，则返回原始文件名\\n        return fileName;\\n    }\\n    return fileName.substr(0, lastIndex);\\n}\\n\\n\\n$.exports = {\\n    Color: Color,\\n    HtmlTag: HtmlTag,\\n    Rich: Rich,\\n    Small: Small,\\n    removeFileExtension: removeFileExtension\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"目录结构\",\"path\":\"directoryEnum.json\",\"rule\":\"{\\n    \\\"RULE\\\": {\\n        \\\"path\\\": \\\"rules/\\\",\\n        \\\"ext\\\": \\\".json\\\",\\n        \\\"zh\\\": \\\"小程序\\\",\\n        \\\"pic\\\": \\\"\\\"\\n    },\\n    \\\"SET\\\":{\\n        \\\"path\\\": \\\"compilations/\\\",\\n        \\\"ext\\\": \\\".json\\\",\\n        \\\"zh\\\": \\\"小程序合集\\\",\\n        \\\"pic\\\": \\\"hiker://images/home_icon_item\\\"\\n    },\\n    \\\"HTML\\\":{\\n        \\\"path\\\": \\\"html/\\\",\\n        \\\"ext\\\": \\\".html\\\",\\n        \\\"zh\\\": \\\"静态网页\\\",\\n        \\\"pic\\\": \\\"hiker://images/icon_save\\\"\\n    },\\n    \\\"JS\\\":{\\n        \\\"path\\\": \\\"js/\\\",\\n        \\\"ext\\\": \\\".js\\\",\\n        \\\"zh\\\": \\\"JS插件\\\",\\n        \\\"pic\\\": \\\"hiker://images/icon_code_view\\\"\\n    },\\n\\n    \\\"JSON\\\":{\\n        \\\"path\\\": \\\"json/\\\",\\n        \\\"ext\\\": \\\".json\\\",\\n        \\\"zh\\\": \\\"JSON文件\\\",\\n        \\\"pic\\\": \\\"\\\"\\n    },\\n    \\\"TXT\\\":{\\n        \\\"path\\\": \\\"txt/\\\",\\n        \\\"ext\\\": \\\".txt\\\",\\n        \\\"zh\\\": \\\"文本文件\\\",\\n        \\\"pic\\\": \\\"hiker://images/icon_txt2\\\"\\n    },\\n    \\\"SVG\\\":{\\n        \\\"path\\\": \\\"svg/\\\",\\n        \\\"ext\\\": \\\".svg\\\",\\n        \\\"zh\\\": \\\"矢量图标\\\",\\n        \\\"pic\\\": \\\"\\\",\\n        \\\"isPic\\\": true\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"规则列表\",\"path\":\"ruleList\",\"rule\":\"js:\\nconst GithubAPI = $.require(\\\"GithubAPI?rule=Github仓库\\\");\\nconst dirEnum = $.require(\\\"directoryEnum.json?rule=Github仓库\\\");\\nconst utils = $.require(\\\"utils\\\");\\n\\n\\naddListener(\\\"onClose\\\", () => {\\n    clearMyVar(\\\"typeview\\\");\\n    clearMyVar(\\\"listCache\\\");\\n    clearMyVar(\\\"indexCache\\\");\\n});\\n\\naddListener(\\\"onRefresh\\\", () => {\\n    clearMyVar(\\\"listCache\\\");\\n    clearMyVar(\\\"indexCache\\\");\\n});\\nlet cls = [];\\nlet type = Object.keys(dirEnum);\\nlet selType = getMyVar(\\\"typeview\\\", type[0]);\\nfor (let it of type) {\\n    let isType = it === selType;\\n    cls.push({\\n        title: isType ? \\\"““\\\" + dirEnum[it].zh + \\\"””\\\" : dirEnum[it].zh,\\n        url: $(\\\"#noLoading#\\\").lazyRule((it, isType) => {\\n            if (isType) {\\n                return \\\"toast://已经是当前目录\\\";\\n            }\\n            putMyVar(\\\"typeview\\\", it);\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, it, isType),\\n        col_type: \\\"scroll_button\\\",\\n    });\\n}\\ncls.push({\\n    title: \\\"正在加载...\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"text_center_1\\\",\\n    extra: {\\n        id: \\\"Githubloading\\\",\\n        lineVisible: false\\n    }\\n});\\nsetPreResult(cls);\\nlet listCache = storage0.getMyVar(\\\"listCache\\\", {});\\nlet indexCache = storage0.getMyVar(\\\"indexCache\\\", {});\\nlet d = [];\\n\\n\\nlet indexData = [];\\nif (selType === \\\"RULE\\\") {\\n    indexData = [];\\n    if (!indexCache.rules) {\\n        try {\\n            let indexObj = GithubAPI.getContents(MY_PARAMS.repo, \\\"manifest.json\\\");\\n            if (indexObj.sha) {\\n                indexObj = JSON.parse(base64Decode(indexObj.content));\\n                indexData = indexObj.rules;\\n                storage0.putMyVar(\\\"indexCache\\\", indexObj);\\n            }\\n        } catch (e) {\\n            log(\\\"摘要获取失败：\\\" + e.toString());\\n        }\\n    } else {\\n        indexData = indexCache.rules;\\n    }\\n}\\n\\nfunction getInfo(item) {\\n    let obj = {\\n        col_type: \\\"icon_2_round\\\"\\n    };\\n    if (selType === \\\"RULE\\\") {\\n        obj.title = utils.removeFileExtension(item.name);\\n        let indexContent = indexData.find(v => v.title == obj.title) || {};\\n        obj.pic_url = indexContent.icon;\\n        obj.url = \\\"rule://\\\" + base64Encode(\\\"￥home_rule_url￥\\\" +getItem('raw_proxy','')+ item.download_url);\\n    } else if (selType === \\\"SET\\\") {\\n        obj.title = utils.removeFileExtension(item.name);\\n        obj.url = \\\"rule://\\\" + base64Encode(\\\"￥home_rule_url￥\\\"+getItem('raw_proxy','') + item.download_url);\\n    }else {\\n        obj.title = item.name;\\n        obj.url = getItem('raw_proxy','') + item.download_url;\\n    }\\n    if(dirEnum[selType].isPic){\\n        obj.pic_url = getItem('raw_proxy','') + item.download_url;\\n    }\\n    obj.pic_url=obj.pic_url||dirEnum[selType].pic||\\\"hiker://images/icon_unknown\\\";\\n    return obj;\\n}\\n\\nfunction setManage(obj, item) {\\n    obj.url = $([\\\"删除\\\", \\\"复制分享链接\\\", \\\"导入\\\"]).select((url, sha, name, path) => {\\n        if (input === \\\"复制分享链接\\\") {\\n            return \\\"copy://海阔视界规则【\\\" + name + \\\"】￥home_rule_url￥\\\" + url;\\n        } else if (input === \\\"导入\\\") {\\n            return \\\"rule://\\\" + base64Encode(\\\"￥home_rule_url￥\\\" + url);\\n        } else {\\n            return $(\\\"确认从仓库删除该分享:\\\" + name).confirm((path, sha) => {\\n                let user = storage0.getItem(\\\"user\\\", \\\"\\\");\\n                showLoading(\\\"正在删除\\\");\\n                const GithubAPI = $.require(\\\"GithubAPI?rule=Github仓库\\\");\\n                try {\\n                    let res = GithubAPI.deleteFile(user.repo, user.token, path, sha);                    \\n                    if (res) {\\n                        java.lang.Thread.sleep(2650);\\n                        clearMyVar(\\\"listCache\\\");\\n                        refreshPage(false);\\n                        hideLoading();\\n                        return \\\"toast://删除成功,服务器删除会有一定延迟\\\";\\n                    }\\n                    hideLoading();\\n                    return \\\"toast://删除失败\\\";\\n                } catch (e) {\\n                    hideLoading();\\n                    return \\\"toast://删除失败:\\\" + e.toString();\\n                }\\n            }, path, sha);\\n        }\\n    }, (getItem('raw_proxy','')+item.download_url), item.sha, item.name, item.path);\\n    return obj;\\n}\\ntry {\\n    let list = [];\\n    if (listCache[selType] === void 0) {\\n        list = GithubAPI.getContents(MY_PARAMS.repo, dirEnum[selType].path, (e) => {\\n            if ([\\\"This repository is empty.\\\", \\\"Not Found\\\"].includes(e.message)) {\\n                return [];\\n            } else {\\n                throw new Error(e.message);\\n            }\\n        });\\n        list = list.filter(v => v.type === \\\"file\\\");\\n        listCache[selType] = list || [];\\n\\n        storage0.putMyVar(\\\"listCache\\\", listCache);\\n    } else {\\n        list = listCache[selType];\\n    }\\n    if (!list.length) {\\n        d.push({\\n            title: \\\"““””\\\" + \\\"仓库是空的哦\\\".small().fontcolor(\\\"grey\\\"),\\n            url: \\\"hiker://empty\\\",\\n            col_type: \\\"text_center_1\\\"\\n        });\\n    } else {\\n        if(MY_PARAMS.isDev){\\n            list.forEach(it => d.push(setManage(getInfo(it), it)));\\n        }else{\\n            list.forEach(it => d.push(getInfo(it)));\\n        }\\n    }\\n    setResult(d);\\n} catch (e) {\\n    setResult([{\\n        title: \\\"““ERROR””\\\",\\n        desc: e.toString(),\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\"\\n    }]);\\n} finally {\\n    deleteItem(\\\"Githubloading\\\");\\n}\"},{\"col_type\":\"text_1\",\"name\":\"设置中心\",\"path\":\"settings\",\"rule\":\"js:\\nsetPageTitle(\\\"设置\\\");\\nvar data = [];\\n\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nlet user = storage0.getItem(\\\"user\\\", {});\\n\\n\\ndata.push({\\n    title: \\\"头像\\\",\\n    desc: user.avatar || \\\"hiker://images/icon_account\\\",\\n    url: $(user.avatar || \\\"\\\", \\\"输入头像地址\\\").input((user) => {\\n        if ($.require(\\\"registry\\\").setDevInfo(user.name, {\\n                avatar: input\\n            })) {\\n            user.avatar = input;\\n            storage0.setItem(\\\"user\\\", user);\\n            refreshPage();\\n            return \\\"toast://修改成功\\\";\\n        } else {\\n            return \\\"toast://修改失败\\\";\\n        }\\n    }, user),\\n    extra: \\\"\\\",\\n    col_type: \\\"text_1\\\"\\n});\\n\\nlet raw_proxy=getItem('raw_proxy','https://gh-proxy.com/');\\ndata.push({\\n    title: \\\"规则导入代理接口\\\",\\n    desc: raw_proxy,\\n    url: $(raw_proxy, \\\"输入规则导入代理接口\\\").input(() => {\\n        setItem('raw_proxy',input);\\n        refreshPage();\\n        return 'hiker://empty'\\n    }),\\n    extra: {},\\n    col_type: \\\"text_1\\\"\\n});\\n\\nlet guest_token=getItem('guest_token','');\\ndata.push({\\n    title: \\\"访问Token设置\\\",\\n    desc: guest_token,\\n    url: $(guest_token, \\\"输入访问Token\\\").input(() => {\\n        setItem('guest_token',input);\\n        refreshPage();\\n        return 'hiker://empty'\\n    }),\\n    extra: {},\\n    col_type: \\\"text_1\\\"\\n});\\n\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\ndata.push({\\n    title: \\\"昵称\\\",\\n    desc: user.name,\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"text_1\\\"\\n});\\ndata.push({\\n    title: \\\"仓库\\\",\\n    desc: user.repo,\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"text_1\\\"\\n});\\ndata.push({\\n    title: \\\"TOKEN\\\",\\n    desc: user.token,\\n    url: $('同步设置为访问Token?').confirm((token)=>{\\n        setItem('guest_token',token);\\n        refreshPage();\\n        return 'toast://同步成功'\\n    },user.token),\\n    col_type: \\\"text_1\\\"\\n});\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\n\\n\\ndata.push({\\n    title: \\\"提交云仓库规则\\\",\\n    url: \\\"copy://$eyJuYW1lIjoiR2l0aHVi5LuT5bqTIiwianMiOiJyZXR1cm4gJC5yZXF1aXJlKFwic3VibWl0P3J1bGU9R2l0aHVi5LuT5bqTXCIpKE1ZX0FDQ09VTlQsIE1ZX1BBU1NXT1JELCBNWV9SVUxFLCBNWV9FWFRSQSk7In0=$a@import=js:$.require('import?rule=仓库提交管理')(input)\\\",\\n    col_type: \\\"text_1\\\"\\n});\\n\\ndata.push({\\n    title: \\\"同步提交云仓库账号密码\\\",\\n    url: \\\"hiker://page/password?rule=仓库提交管理\\\",\\n    col_type: \\\"text_1\\\",\\n    extra: {\\n        name: MY_RULE.title,\\n        preinstall: {\\n            user: user.repo,\\n            password: user.token,\\n            extra: \\\"\\\"\\n        }\\n    }\\n});\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\n\\n\\ndata.push({\\n    title: \\\"退出登录\\\",\\n    url: $(\\\"确认退出登录?\\\").confirm(f => {\\n        clearItem(\\\"user\\\");\\n        back();\\n        return \\\"toast://已退出\\\";\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n});\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\ndata.push({\\n    title: \\\"““注销账号””\\\",\\n    url: $(\\\"是否注销账号?\\\").confirm((name) => {\\n        if ($.require(\\\"registry\\\").deleteDev(name)) {\\n            back();\\n            return \\\"toast://注销成功\\\";\\n        } else {\\n            return \\\"toast://注销失败\\\";\\n        }\\n    }, user.name),\\n    col_type: \\\"text_center_1\\\"\\n});\\nsetResult(data);\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"管理用户\",\"path\":\"Usermanagement\",\"rule\":\"js:\\nlet user = storage0.getItem(\\\"user\\\", \\\"\\\");\\n\\nsetPageTitle(\\\"管理员：\\\" + user.name);\\nconst {\\n    Color,\\n    Rich\\n} = $.require('utils');\\nlet d = [];\\naddListener(\\\"onRefresh\\\", () => $.require(\\\"registry\\\").getDeveloper(true));\\naddListener(\\\"onClose\\\", () => refreshPage());\\nlet developer = $.require(\\\"registry\\\").getDeveloper();\\nd.push({\\n    title: \\\"备份\\\",\\n    url: $().lazyRule(() => {\\n        let registry = $.require(\\\"registry\\\").getRegistry();\\n        let developer = registry.content;\\n        //storage0.setItem(\\\"userDataBackup\\\", developer);\\n        writeFile('hiker://files/rules/gitHouse/userDataBackup.json', JSON.stringify(developer));\\n        return \\\"toast://备份成功\\\";\\n    }),\\n    col_type: \\\"text_2\\\",\\n});\\n\\nd.push({\\n    title: \\\"恢复\\\",\\n    url: $().lazyRule(() => {\\n        let backup = JSON.parse(fetch('hiker://files/rules/gitHouse/userDataBackup.json') || []);\\n        let registry = $.require(\\\"registry\\\").getRegistry();\\n        //registry.content = storage0.getItem(\\\"userDataBackup\\\", registry.content);\\n        if (backup.length > 0) {\\n            registry.content = backup;\\n        }\\n        if ($.require(\\\"registry\\\").setRegistry(registry)) {\\n            refreshPage(false);\\n            return \\\"toast://恢复成功\\\";\\n        } else {\\n            return \\\"toast://恢复失败\\\";\\n        }\\n    }),\\n    col_type: \\\"text_2\\\",\\n});\\nlet option = getMyVar('manageoption', '删除');\\n\\nfunction setTitle(title) {\\n    if (title == option) {\\n        return Rich(Color(title, '#12b668'));\\n    } else {\\n        return title\\n    }\\n}\\nlet options = [\\\"删除\\\", \\\"排序\\\", \\\"设置头像\\\", \\\"修改用户名\\\"];\\nfor (let it of options) {\\n    d.push({\\n        title: setTitle(it),\\n        col_type: 'scroll_button',\\n        url: $('#noLoading#').lazyRule((it) => {\\n            putMyVar('manageoption', it);\\n            refreshPage();\\n            return 'hiker://empty';\\n        }, it)\\n    });\\n}\\n\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nlet i = 0;\\nfor (let it of developer) {\\n    d.push({\\n        title: it.name,\\n        pic_url: it.avatar,\\n        url: $('#noLoading#').lazyRule((it, option, index) => {\\n            return $.require('adminOperate')(it, option, index);\\n        }, it, option, i++),\\n        col_type: \\\"icon_2_round\\\"\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"管理员操作\",\"path\":\"adminOperate\",\"rule\":\"js:\\n$.exports = function(user, option, index) {\\n    if (option == '删除') {\\n        return $(\\\"是否删除该用户？\\\").confirm((name) => {\\n            if ($.require(\\\"registry\\\").deleteDev(name)) {\\n                refreshPage(false);\\n                return \\\"toast://删除成功\\\";\\n            } else {\\n                return \\\"toast://删除失败\\\";\\n            }\\n        }, user.name);\\n    } else if (option == '设置头像') {\\n        return $(user.avatar, '请输入头像链接').input((name) => {\\n            if ($.require(\\\"registry\\\").setDevInfo(name, {\\n                    avatar: input\\n                })) {\\n                refreshPage(false);\\n                return \\\"toast://头像修改成功\\\";\\n            } else {\\n                return \\\"toast://头像修改失败\\\";\\n            }\\n        }, user.name);\\n    } else if (option == '修改用户名') {\\n        return $(user.name, '请输入用户名').input((name) => {\\n            if ($.require(\\\"registry\\\").setDevInfo(name, {\\n                    name: input\\n                })) {\\n                refreshPage(false);\\n                return \\\"toast://用户名修改成功\\\";\\n            } else {\\n                return \\\"toast://用户名修改失败\\\";\\n            }\\n        }, user.name);\\n    } else if (option == '排序') {\\n        return $(index + '', '请输入开发者顺序').input((name) => {\\n            if ($.require(\\\"registry\\\").moveDev(name,input)) {\\n                refreshPage(false);\\n                return \\\"toast://顺序设置成功\\\";\\n            } else {\\n                return \\\"toast://顺序设置失败\\\";\\n            }\\n        }, user.name);\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"主页\",\"path\":\"home\",\"rule\":\"js:\\nvar d = [];\\naddListener(\\\"onRefresh\\\", () => clearMyVar(\\\"developer\\\"));\\nlet developer = $.require(\\\"registry\\\").getDeveloper();\\nconst {\\n    Small,\\n    Color,\\n    Rich\\n} = $.require(\\\"utils\\\");\\nlet user = storage0.getItem(\\\"user\\\", \\\"\\\");\\nlog(user);\\nif (user) {\\n    let index = developer.findIndex(x => x.name === user.name && x.repo === user.repo);\\n    if (index > -1) {\\n        let sel = [\\\"更多分享\\\",\\\"规则管理\\\", \\\"设置中心\\\"];\\n        if ($.require(\\\"adminList.json\\\").includes(user.name)) {\\n            sel.push(\\\"管理用户\\\");\\n        }\\n        d.push({\\n            title: user.name,\\n            col_type: \\\"avatar\\\",\\n            pic_url: user.avatar || \\\"hiker://images/icon_setting6\\\",\\n            url: $(sel).select(() => {\\n                if (input === \\\"管理用户\\\") {\\n                    return \\\"hiker://page/Usermanagement#noRecordHistory##noHistory#\\\";\\n                } else if (input === \\\"设置中心\\\") {\\n                    return \\\"hiker://page/settings#noRecordHistory##noHistory#\\\";\\n                } else if(input===\\\"规则管理\\\"){\\n                    return \\\"hiker://page/ruleList#noRecordHistory##noHistory#\\\";\\n                }else if(input===\\\"更多分享\\\"){\\n                    return \\\"hiker://page/moreShare#noRecordHistory##noHistory#\\\";\\n                }\\n            }),\\n            extra: {\\n                isDev: true,\\n                repo: user.repo\\n            }\\n        });\\n    } else {\\n        clearItem(\\\"user\\\");\\n        toast(\\\"未查询到您的注册信息，可能已经更改或删除\\\");\\n        d.push({\\n            title: \\\"注册/登录\\\",\\n            url: \\\"hiker://page/register#noRecordHistory##noHistory#\\\",\\n            col_type: \\\"text_2\\\"\\n        });\\n        d.push({\\n            title: \\\"游客设置\\\",\\n            url: \\\"hiker://page/guest#noRecordHistory##noHistory#\\\",\\n            col_type: \\\"text_2\\\"\\n        });\\n    }\\n} else {\\n    d.push({\\n        title: \\\"注册/登录\\\",\\n        url: \\\"hiker://page/register#noRecordHistory##noHistory#\\\",\\n        col_type: \\\"text_2\\\"\\n    });\\n    d.push({\\n            title: \\\"游客设置\\\",\\n            url: \\\"hiker://page/guest#noRecordHistory##noHistory#\\\",\\n            col_type: \\\"text_2\\\"\\n    });\\n}\\nd.push({\\n    col_type: 'text_1',\\n    title: Rich(Small(\\\"现有 \\\" + Color(developer.length, \\\"#ff7000\\\") + \\\" 名开发者\\\")),\\n    url: \\\"toast://喵喵喵?\\\",\\n});\\nfor (let it of developer) {\\n    d.push({\\n        title: it.name,\\n        url: \\\"hiker://page/ruleList#noRecordHistory##noHistory#\\\",\\n        pic_url: it.avatar || \\\"hiker://images/icon_account\\\",\\n        col_type: \\\"icon_2_round\\\",\\n        extra: {\\n            repo: it.repo,\\n        }\\n    });\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"管理员列表\",\"path\":\"adminList.json\",\"rule\":\"[\\\"LoyDgIk\\\", \\\"道长\\\"]\"},{\"col_type\":\"movie_3\",\"name\":\"游客设置\",\"path\":\"guest\",\"rule\":\"js:\\nsetPageTitle('游客设置');\\nconst {addLabel,addConf}=$.require('commonUi');\\nlet d=[];\\naddLabel(d,'规则导入代理设置','防止从规则列表点击规则弹出立即导入按钮由于被墙导入无反应');\\naddConf(d,'请输入规则导入代理接口','raw_proxy','https://gh-proxy.com/');\\naddLabel(d,'访问Token设置','将GitHub api接口请求次数从每小时60次提升到5000次，破解请求次数限制');\\naddConf(d,'请输入Token','guest_token');\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"公共页面渲染\",\"path\":\"commonUi\",\"rule\":\"js:\\nfunction addLabel(d,title,desc){\\nd.push({\\n    title:title ,\\n    url: 'hiker://empty',\\n    col_type: \\\"text_1\\\",\\n    desc: desc,\\n});\\n    \\n}\\n\\nfunction addConf(d,tips,key,value){\\nd.push({\\n    title:'保存',\\n    desc:tips,\\n    col_type:'input',\\n    url:$.toString((key)=>{\\n     setItem(key,input);\\n     return 'toast://保存成功'\\n    },key),\\n    extra:{\\n     type:'textarea',\\n     textSize: 11,\\n     //highlight:1,\\n     height: -1,       defaultValue:getItem(key,value||''),\\n     onChange:`putMyVar('${key}',input)`\\n }\\n    \\n});\\n}\\n\\n$.exports = {\\n    addLabel:addLabel,\\n    addConf: addConf,\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"更多分享\",\"path\":\"moreShare\",\"rule\":\"js:\\nsetPageTitle(\\\"更多分享\\\");\\nconst {\\n    Small,\\n    Color,\\n    Rich,\\n} = $.require(\\\"utils\\\");\\nconst dirEnum = $.require(\\\"directoryEnum.json?rule=Github仓库\\\");\\nlet types = Object.keys(dirEnum).filter(v => ![\\\"RULE\\\", \\\"SET\\\"].includes(v));\\nlet type = getItem('upFileType', types[0]);\\n\\nlet d = [];\\nd.push({\\n    desc: \\\"文件路径,支持hiker,file\\\",\\n    col_type: \\\"input\\\",\\n    extra: {\\n        onChange: \\\"putMyVar('uppath',input)\\\",\\n        titleVisible: false,\\n        id: 'filePath',\\n        defaultValue: getMyVar('uppath', \\\"\\\")\\n    }\\n});\\nd.push({\\n    title: \\\"选择文件路径\\\",\\n    url: $('#noLoading#').lazyRule((fileType) => {\\n        let fp = \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/libs/fileSelect.js\\\";\\n        let f = require(fp);\\n        return f.fileSelectionUri({\\n            callback: $.toString(() => {\\n                let target = findItem(\\\"filePath\\\").extra;\\n                updateItem(\\\"filePath\\\", {\\n                    extra: Object.assign(target, {\\n                        defaultValue: PATH\\n                    })\\n                });\\n                putMyVar('uppath', PATH);\\n                return true;\\n            }),\\n            onClickType: 'confirm',\\n            fileType: fileType,\\n            pattern: 0,\\n            requireUrl: fp,\\n            initialPath: getPath('hiker://files/').slice(7),\\n            memory: 'true',\\n        });\\n    }, dirEnum[type].ext),\\n    col_type: \\\"text_center_1\\\",\\n});\\n\\nd.push({\\n    title: Rich('上传目录：\\\\t' + Color(dirEnum[type].zh, '#ff7000')),\\n    desc: \\\"\\\",\\n    col_type: 'text_1',\\n    url: $(types, 2).select(() => {\\n        setItem('upFileType', input);\\n        refreshPage(true);\\n        return 'toast://你选择了:' + input;\\n    })\\n});\\n\\nd.push({\\n    title: '预览',\\n    col_type: 'text_2',\\n    url: $(\\\"#noLoading#\\\").lazyRule((type, isPic) => {\\n        let path = getMyVar('uppath', \\\"\\\");\\n        if (!path) {\\n            return \\\"toast://请输入path\\\";\\n        }\\n        return $().rule((path, isPic) => {\\n            let d = [];\\n            if (isPic) {\\n                d.push({\\n                    url: path,\\n                    pic_url: path,\\n                    col_type: \\\"pic_1_center\\\"\\n                });\\n            } else {\\n                let text = fetch(\\\"file://\\\" + path)\\n                d.push({\\n                    title: text.slice(0, 800) + (text.length > 400 ? \\\"...文本过长已截断\\\" : \\\"\\\"),\\n                    col_type: \\\"long_text\\\"\\n                });\\n            }\\n            setResult(d);\\n        }, path, isPic);\\n    }, type, dirEnum[type].isPic)\\n});\\n\\nd.push({\\n    title: '上传',\\n    col_type: 'text_2',\\n    url: $(\\\"#noLoading#\\\").lazyRule((type, ext) => {\\n        let path = getMyVar('uppath', \\\"\\\");\\n        if (!path) {\\n            return \\\"toast://请输入path\\\";\\n        }\\n        if (!path.endsWith(ext)) {\\n            return \\\"toast://文件类型错误\\\";\\n        }\\n        return $().rule((path, type) => {\\n            let d = [];\\n            let file = new java.io.File(path);\\n            d.push({\\n                title: \\\"文件名：\\\" + file.getName(),\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_1\\\"\\n            });\\n            d.push({\\n                title: \\\"大小：\\\" + file.length(),\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_1\\\"\\n            });\\n            d.push({\\n                title: \\\"最后修改：\\\" + $.dateFormat(file.lastModified(), \\\"yyyy-MM-dd HH:mm:ss\\\"),\\n                url: \\\"hiker://empty\\\",\\n                col_type: \\\"text_1\\\"\\n            });\\n\\n            d.push({\\n                title: \\\"开始上传\\\",\\n                col_type: \\\"text_center_1\\\",\\n                url: $().lazyRule((path, type, name) => {\\n                    const dirEnum = $.require(\\\"directoryEnum.json?rule=Github仓库\\\");\\n                    const GithubAPI = $.require(\\\"GithubAPI?rule=Github仓库\\\");\\n                    try {\\n                        let content = fetch(\\\"file://\\\" + path);\\n                        let user = storage0.getItem(\\\"user\\\", {});\\n                        GithubAPI.createFile(user.repo, user.token, dirEnum[type].path + name, content);\\n                        return \\\"toast://上传成功\\\";\\n                    } catch (e) {\\n                        log(e.toString());\\n                        return \\\"toast://上传失败\\\";\\n                    }\\n                }, path, type, file.getName())\\n            });\\n            setResult(d);\\n        }, path, type);\\n    }, type, dirEnum[type].ext)\\n});\\n\\n\\n\\nsetResult(d);\"}]","proxy":"","icon":"https://gh-proxy.com/https://raw.githubusercontent.com/ls125781003/lmtubiao/main/messy/13.svg"}