Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºöÂ∞èÁ®ãÂ∫èÔø•home_rule_v2Ôø•base64://@ùëÄùë¶ùêπùëñùëíùëôùëë·¥∞‚Åø@{"last_chapter_rule":"","title":"𝑀𝑦𝐹𝑖𝑒𝑙𝑑ᴰⁿ","author":"断念","url":"hiker://empty?class=fyAll","version":2024070100,"col_type":"text_center_1","class_name":"MyParseS&编辑文件&更新","type":"tool","class_url":"&editFile&Update","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nthis.d = [];\n\nfunction jxItemHead() {\n    addListener('onRefresh', $.toString(() => {\n        switch (getVar('kqjxcs', '0')) {\n            case '0':\n                putVar('kqjxcs', 1);\n                break;\n            case '1':\n                putVar('kqjxcs', 2);\n                break;\n            default:\n                putVar('kqjxcs', 0);\n                break;\n        }\n    }));\n    if (getVar('kqjxcs') == 2) {\n        d.push({\n            title: '‘‘’’<span style=\"color:#FACC2E\">解析测试',\n            url: $().lazyRule(() => {\n                var vipUrl = getVar('pluginLink');\n                if (vipUrl.substr(0, 4) == 'http') {\n                    require('https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/Route.js');\n                    return aytmParse(vipUrl);\n                } else {\n                    return 'toast://输入框未填Url或者无效Url';\n                }\n            }),\n            col_type: 'text_center_1',\n        });\n    }\n    var ruleV = getVar(\"ruleVersion\"),\n        updTips = '\\n点击“更新脚本依赖”更新’’';\n    var jxItNewV = getVar('jxItNewV', ''),\n        jxItemV = getVar('jxItemV');\n    if (MY_RULE.version < ruleV) {\n        jxItNewV = '小程序有新版本: ' + ruleV;\n        updTips = '\\n更新好小程序后点击更新脚本依赖’’';\n    }\n    var versionTips = jxItNewV == '' ? 'Version ' + jxItemV : '‘‘' + jxItNewV + updTips;\n\n    d.push({\n        title: '‘‘’’<big><big><span style=\"color:#0C0000\">MyParseS',\n        desc: versionTips,\n        url: !getVar('kqjxcs') ? 'toast://这是标题' : setupPages('设置', 1),\n        /* $([\"切换解析\", \"检测解析\", \"切换皮肤\"], 2).select(() => $().rule((k) => {\n                setResult([{\n                    title: k\n                }])\n            }, input)),*/\n        extra: {\n            newWindow: true,\n            windowId: \"MyParseS\",\n            lineVisible: false\n        },\n        col_type: 'text_center_1'\n    });\n    splitLine('line', 5);\n}\n\nfunction rulesUpdate() {\n    require(fLinks.kT + 'MyFieldUpdate.txt');\n    d.push({\n        title: '‘‘’’<small>刷新数据',\n        desc: '‘‘’’<small>页面数据为缓存数据，不定时自动更新，可手动点击更新',\n        url: $('#noLoading#').lazyRule((Url) => {\n            let nowTime = Date.now();\n            if (nowTime - getItem('isRefreshTime', '') > 600000) {\n                require(Url);\n                setItem('isRefreshTime', nowTime + '');\n                getCloudData(0);\n                refreshPage(false);\n                return getVar('getDataState');\n            } else {\n                return 'toast://间隔小于10分钟';\n            }\n        }, fLinks.jxItUrl)\n    });\n    d.push({\n        col_type: 'blank_block'\n    });\n    d.push({\n        col_type: 'line'\n    });\n    d.push({\n        title: '‘‘’’<strong>规 则</strong><br><small><span style=\"color:grey\">点击查看更新日志',\n        url: fLinks.gxrz\n    });\n    let MyRs = [];\n    let allRs = JSON.parse(fetch('hiker://home'));\n    for (let r = 0; r < allRs.length; r++) {\n        let aRs = allRs[r];\n        if (aRs.author == '断念') {\n            MyRs.push({\n                title: aRs.title,\n                version: aRs.version\n            });\n        }\n    }\n    for (let i = 0; i < Rules.length; i++) {\n        let localV = '未导入',\n            Rs = Rules[i];\n        for (let j = 0; j < MyRs.length; j++) {\n            if (MyRs[j].title == Rs.title + 'ᴰⁿ') {\n                localV = MyRs[j].version;\n            }\n        }\n        let yV = localV != Rs.version ? '‘‘' + Rs.version + '’’' : Rs.version;\n        let RsDesc = Rs.desc != undefined ? '</strong><span style=\"color:grey\"><small>(' + Rs.desc + ')' : '';\n        d.push({\n            title: '‘‘’’<strong><span style=\"color:#298A08\">' + Rs.title + RsDesc,\n            desc: '‘‘’’<small>本地版本</small><big> ' + localV + ' : ' + yV + ' </big>‘‘’’<small>云端版本</small>',\n            col_type: 'text_1',\n            url: localV == Rs.version ? 'toast://没有新版本' : $('#noLoading#').lazyRule((Url) => {\n                return parsePaste(Url);\n            }, Rs.url)\n        });\n    }\n    d.push({\n        title: '‘‘’’<strong>脚 本',\n        url: fLinks.gxrz\n    });\n    for (let s = 0; s < Script.length; s++) {\n        let St = Script[s];\n        d.push({\n            title: '‘‘’’<span style=\"color:#298A08\"><small>' + St.title + ' - ' + St.version,\n            col_type: 'text_2',\n            url: ('' + St.url).startsWith('toast') ? St.url : $(St.url + '#noLoading#').lazyRule((fLinks) => {\n                var arr = input.split('##');\n                var from = arr[0],\n                    name = arr[1];\n                var Url = name == undefined ? from : fLinks[from] + name;\n                var html = fetchCache(Url, 2);\n                if (name) {\n                    writeFile('hiker://files/cache/' + name, html);\n                }\n                return 'toast://导入成功';\n            }, fLinks)\n        });\n    }\n}\n\nfunction czGuide() {\n    return fLinks.czzy\n}\n\nfunction tofLink(Url) {\n    return 'hiker://files/libs/' + md5(Url) + '.js';\n}\n\nfunction editFile() {\n    var Lists = [{\n        title: '用户解析文件',\n        link: fLinks.parses\n    }, {\n        title: 'Parse_Dn.js',\n        link: fLinks.cjcache\n    }, {\n        title: '网页脚本代码',\n        link: fLinks.x5cache\n    }, {\n        title: '调用路由代码',\n        link: tofLink(fLinks.routeUrl)\n    }, {\n        title: '解析项主代码',\n        link: tofLink(fLinks.jxItUrl)\n    }, {\n        title: '编辑解析项代码',\n        link: tofLink(fLinks._bjUrl)\n    }];\n    for (i of Lists) {\n        d.push({\n            title: i.title,\n            url: 'editFile://' + i.link,\n            //col_type: 'text_2'\n        })\n    }\n    if (!getVar('editFilePopup')) {\n        confirm({\n            title: '温馨提示',\n            content: '此项功能不建议小白用户使用',\n            confirm: 'putVar(\"editFilePopup\",\"1\")'\n        })\n    }\n}\n\ntry {\n    require(\"https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/Route.js\");\n    switch (getParam('class')) {\n        case \"editFile\":\n            editFile();\n            setResult(d);\n            break;\n        case \"Update\":\n            rulesUpdate();\n            setResult(d);\n        default:\n            require(fLinks.jxItUrl);\n            jxItem.lqFile();\n            Route.addLanJie(d);\n            break;\n    }\n} catch (e) {\n    d.push({\n        title: \"操作指引\",\n        url: czGuide(),\n        col_type: \"text_center_1\"\n    })\n    confirm({\n        title: '程序出错了(_ _)',\n        content: '行数: ' + e.lineNumber + '\\n详情: ' + e.message,\n        confirm: '`copy://' + e.message + '`'\n    });\n    setResult(d);\n}","search_url":"","group":"④工具","searchFind":"","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"//如果出现获取不到远程资源的情况，把“//kT”的“//”去掉然后重启APP\n\nvar kT = \"https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/\",\n    kT2 = kT;\n    kT3 = kT;\n//kT = kT2;\nvar fLinks = {\n    kT: kT,\n    kT2: kT2,\n    kT3: kT3,\n    cjFrom: 'hiker://page/Parse_Dn.js',\n    x5From: 'hiker://page/Parse_Dn.html',\n    _bjUrl: kT + 'jxItem_bj.js',\n    jxItUrl: kT + 'jxItem.js',\n    routeUrl: 'https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/Route.js',\n    cjcache: 'hiker://files/cache/Parse_Dn.js',\n    x5cache: 'hiker://files/cache/Parse_Dn.html',\n    plgl: 'hiker://files/cache/plglParse.html',\n    LanJie: 'hiker://files/cache/x5ParseLanJie.txt',\n    config: 'hiker://files/cache/MyParseSet.json',\n    parses: 'hiker://files/rules/DuanNian/MyParse.json',\n    czzy: 'https://docs.qq.com/doc/DVXNGVGdLREFPY3Zz',\n    gxrz: 'https://www.yuque.com/duannian-coqtb/ely8ca/gaf7op',\n    vue: 'hiker://files/cache/vue@2.5.16.js',\n    jquery: 'hiker://files/cache/jquery@2.1.4.js',\n    x5Route: 'file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/'\n};\nlet fRoute = 'hiker://files/cache/fileLinksᴰⁿ.txt';\nif (!getVar('jxItemV') || getVar('jxItNewV', '0') !== '0') {\n    writeFile(fRoute, 'var fLinks=' + $.stringify(fLinks));\n}","pages":"[{\"col_type\":\"movie_3\",\"name\":\"Parse_Dn.html\",\"path\":\"Parse_Dn.html\",\"rule\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\\\" />\\n    <!--\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.min.js\\\"></script>\\n    <script src=\\\"https://code.jquery.com/jquery-2.1.4.min.js\\\"></script>\\n    \\n    <script src=\\\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\\\"></script>\\n    <script src=\\\"http://apps.bdimg.com/libs/vue/1.0.14/vue.js\\\"></script>\\n    -->\\n    <title>Parse_Dn</title>\\n    <style type=text/css>\\n        html, body {\\n            height: auto;\\n            overflow: hidden;\\n        }\\n        body {\\n            margin: 0 5px 0 5px;\\n            padding: 0 0px 0 0px;\\n            //background: #F9F0DA;\\n            font-weight: 0;\\n            font-family: \\\"Microsoft YaHei\\\",\\\"宋体\\\",\\\"Segoe UI\\\", \\\"Lucida Grande\\\", Helvetica, Arial,sans-serif, FreeSans, Arimo;\\n        }\\n        #div2{\\n           margin-top:35px;\\n        }\\n        /*输入框父元素*/\\n        div.box {\\n            height: 53px;\\n            line-height: 20px;\\n            position: relative;\\n        }\\n        /*输入框尺寸*/\\n        form {\\n            background: transparent;\\n            position: relative;\\n            width: 92%;\\n        }\\n        input, label, .lieb button {\\n            border: none;\\n            outline: none;\\n        }\\n        /*字体位置*/\\n        input {\\n            width: 77%;\\n            height: 32px;\\n            padding-left: 66px;\\n            padding-right: 30px;\\n        }\\n        label {\\n            text-align:center;\\n            line-height: 43px;\\n            height: 40px;\\n            width: 60px;\\n            cursor: pointer;\\n            position: absolute;\\n        }\\n        /*小框*/\\n        .bar label {\\n            background: #D06B6C;\\n            border-radius: 555 555px 555px 555;\\n            width: 60px;\\n            font-size: 13px;\\n            color: #F9F0DA;\\n            top: 0;\\n            left: 3px;\\n        }\\n        /*输入框样式*/\\n        .bar input {\\n            background: #F9F0DA;\\n            border: 3px solid #D06B6C;\\n            border-radius: 4px;\\n        }\\n        /*列表*/\\n        .lieb button {\\n            text-align:center;\\n            line-height:40px;\\n            height: 40px;\\n            width: 27px;\\n            cursor: pointer;\\n            position: absolute;\\n        }\\n        /*列表*/\\n        .lieb button{\\n            border-radius: 4px;\\n            background: #D06B6C;\\n            font-size: 13px;\\n            color: #F9F0DA;\\n            top: 0;\\n            right: 0px;\\n        }\\n        /*头像*/\\n        .round_icon{\\n            width: 40px;\\n            height: 40px;\\n            display: flex;\\n            border-radius: 50%;\\n            align-items: center;\\n            justify-content: center;\\n            overflow: hidden;\\n        }\\n\\n        .jx-ul, .cj-ul {\\n            z-index: 999;\\n            position: fixed;\\n            width: 77%;\\n           // left: 10%;\\n        }\\n        .jx-ul, .cj-ul {\\n            display: none;\\n        }\\n        .jx-ul {\\n            top: 3%;\\n        }\\n        .cj-ul {\\n            top: 30%;\\n        }\\n        li {\\n            height: 35px;\\n            border: 1px solid #01bfda;\\n            border-radius: 6px;\\n            background: rgba(0, 0, 0, 0.8);\\n            color: white;\\n            line-height: 35px;\\n            text-align: center;\\n            font-size: 16px;\\n            white-space: nowrap;\\n            overflow: hidden;\\n            text-overflow: ellipsis;\\n        }\\n        li {\\n            list-style: none;\\n        }\\n        li:hover {\\n            cursor: pointer;\\n            background: rgba(139, 131, 120, 0.9);\\n        }\\n        li[check=\\\"true\\\"] {\\n            background: rgba(139, 0, 0, 0.9);\\n        }\\n\\n    </style>\\n</head>\\n\\n<body>\\n    <div class=\\\"fung\\\">\\n        <a style=\\\"float:left;\\\">\\n            <button  style=\\\"border: none;border-radius:10px;background: #c5464a;width: 80px; font-size: 18px;color: #F9F0DA;\\\" onclick=\\\"cancel();\\\">关 闭</button>\\n        </a>\\n        <a style=\\\"float:right\\\">\\n            <button style=\\\"border: none;border-radius:10px;background: #068006;width: 80px; font-size: 18px;color: #F9F0DA;\\\"onclick=\\\"clickme('配 置 已 保 存 ！', 1000, '开');\\\">保 存</button> \\n        </a>\\n    </div>\\n    <br>\\n    <div id=\\\"div2\\\"></div>\\n    <div>\\n        <a style=\\\"float:left;margin-top:5px;\\\" onclick=\\\"openDnPage()\\\">\\n            <img src=\\\"https://s3.ax1x.com/2021/02/22/y7wb9O.jpg\\\" class=\\\"round_icon\\\"  alt=\\\"\\\">\\n        </a>\\n        <span style=\\\"line-height:60px;font-size:18px;color: grey;\\\">&nbsp;&nbsp;断&nbsp;念</span>\\n        <a style=\\\"float:right;margin-top:5px;\\\">\\n            <button  style=\\\"border: none;border-radius:10px;background: #05BFC5;width: 185px;height:40px; font-size: 18px;color: #F9F0DA;\\\" onclick=\\\"clickme('配 置 已 保 存 ！', 1000, '关');\\\">保存设置并关闭界面</button>\\n        </a>\\n    </div>\\n    <div class=\\\"zj-div\\\">\\n        <ul class=\\\"jx-ul\\\" style=\\\"height:444px;overflow-y:auto;\\\">\\n            <li class=\\\"myChoice\\\" style=\\\"z-index:9999;position: fixed;width:76.5%;color:red;\\\"></li>\\n            <li class=\\\"useless\\\"></li>\\n            <li class=\\\"xlList\\\" v-for=\\\"item in jxData\\\">{{item}}</li>\\n        </ul>\\n        <ul class=\\\"cj-ul\\\">\\n            <li style=\\\"background:grey;\\\">请选择插件</li>\\n            <li v-for=\\\"item in cjData\\\">{{item}}</li>\\n        </ul>\\n    </div>\\n</body>\\n<script>\\n    eval(fy_bridge_app.fetch(\\\"hiker://files/cache/jquery@2.1.4.js\\\"));\\n    eval(fy_bridge_app.fetch(\\\"hiker://files/cache/vue@2.5.16.js\\\"));\\n    eval(fy_bridge_app.getInternalJs());\\n    \\n    var settings = {\\n        qy: 'yun1717',\\n        yk: 'yun1717',\\n        tx: 'yun1717',\\n        mg: 'yun1717',\\n        bl: 'yun1717',\\n        oth: 'yun1717',\\n        qju: '默认',\\n        cj: 'hiker://files/cache/Parse_Dn.js'\\n    };\\n    \\n    var oldRoute = \\\"hiker://files/cache/MyParseSet.json\\\";\\n    var mySet = fy_bridge_app.fetch(oldRoute);\\n    \\n    var newRoute = \\\"hiker://files/rules/DuanNian/MyParse.json\\\";\\n    var newConfig = fy_bridge_app.fetch(newRoute);\\n    var mySelect = [];\\n    try{\\n        eval(\\\"newConfig =\\\" + newConfig + \\\";\\\");\\n        settings = newConfig.settings.qju == undefined ? settings : newConfig.settings;\\n        var ycTitle = ['defaultParse', 'maoss', 'CityIP', 'cacheM3u8', 'pcUA', 'parseLc', 'gparse', 'nparse'];\\n        for(var i = 0; i < newConfig.title.length; i++){\\n            var Titles = newConfig.title[i];\\n            if(ycTitle.includes(Titles) == false){\\n                mySelect.push(Titles);\\n            }\\n        }\\n    }catch(e){}\\n    var sfRefresh = settings.cj;\\n    function Did(id){\\n        return document.getElementById(id);\\n    }\\n    \\n    if(mySet == ''){\\n        Did(\\\"div2\\\").insertAdjacentHTML('afterBegin','\\\\\\n<h4>提示：<br>①注意插件选项，没有手动导入插件的话不用动它。如设置不当会导致规则无法使用，<br>解决办法：小程序首页点击恢复默认插件；<br>②全局设置如果选择了非默认那么全部的解析会使用这一设置，不想这样的话请填入默认；<br>③绿色保存按钮仅仅保存配置不会关闭设置页面，配置后想保存并关闭设置页面的话请点蓝色按钮；<br>④阅读完提示点关闭加载完整设置页面，如出问题无法自行解决点图片进入论坛向我反馈。<br></h4>');\\n    }\\n    \\n    var boxData = [\\n        {\\n            title: \\\"奇 奇\\\",\\n            id: \\\"qy\\\",\\n            value: settings.qy,\\n        }, {\\n            title: \\\"酷 酷\\\",\\n            id: \\\"yk\\\",\\n            value: settings.yk,\\n        }, {\\n            title: \\\"腾 腾\\\",\\n            id: \\\"tx\\\",\\n            value: settings.tx,\\n        }, {\\n            title: \\\"果 果\\\",\\n            id: \\\"mg\\\",\\n            value: settings.mg,\\n        }, {\\n            title: \\\"哩 哩\\\",\\n            id: \\\"bl\\\",\\n            value: settings.bl,\\n        }, {\\n            title: \\\"其 他\\\",\\n            id: \\\"oth\\\",\\n            value: settings.oth,\\n        }, {\\n            title: \\\"全 局\\\",\\n            id: \\\"qju\\\",\\n            value: settings.qju,\\n        }, {\\n            title: \\\"插 件\\\",\\n            id: \\\"cj\\\",\\n            value: settings.cj,\\n        }\\n    ];\\n\\n    var inputBox = \\\"\\\";\\n    for(let i = 0; i < boxData.length; i++){\\n        let b = boxData[i];\\n        inputBox += '<div class=\\\"box bar\\\">\\\\\\n            <form>\\\\\\n                <label type=\\\"submit\\\">' + b.title + '</label>\\\\\\n                <input type=\\\"text\\\" placeholder=\\\"输入解析名或者URL......\\\" value=\\\"' + b.value + '\\\" id=\\\"' + b.id + '\\\">\\\\\\n            </form>\\\\\\n            <div class=\\\"lieb\\\">\\\\\\n                <button id=\\\"' + b.id + 'Select\\\">☰</button>\\\\\\n            </div>\\\\\\n        </div>';\\n    }\\n    Did(\\\"div2\\\").insertAdjacentHTML('afterend', inputBox);\\n    Did(\\\"cj\\\").placeholder = \\\"输入插件地址......\\\";\\n    Did(\\\"qju\\\").placeholder = \\\"此项建议留空或者填默认两个字\\\";\\n    \\n    new Vue({\\n        el: \\\".zj-div\\\",\\n        data: {\\n            jxData: mySelect,\\n            cjData: [\\\"hiker://files/cache/Parse_Dn.js\\\", \\\"hiker://files/rules/dzHouse/js/srcauto.js\\\", \\\"hiker://files/rules/js/Parse-V2_Dn.js\\\"]\\n        }\\n    });\\n\\n    $(document).ready(function() {\\n        var len = $('.jx-ul').children('li').length;\\n        var len2 = $('.cj-ul').children('li').length;\\n        $('.lieb button').click(function(e) {\\n            if($('.lieb button').text().includes('━')){\\n                $('.lieb button').css('background', '');\\n                $('.lieb button').text('☰');\\n            }else{\\n                $(this).text('━');\\n                $(this).css('background', 'red');\\n            }\\n            $('li').attr('check', 'false');\\n            var inputid = \\\"#\\\" + this.id.split(\\\"Select\\\")[0];\\n            var arr = $(inputid).val().split(',');\\n            arr = arr[0] == '' ? [] : arr;\\n            $('.myChoice').text(arr);\\n            if (inputid !== '#cj' && $('.cj-ul').css('display')=='none') {\\n                $('.jx-ul').slideToggle(300);\\n                e.stopPropagation();\\n                for (let i = 1; i < len; i++) {\\n                    var jxList = $('.jx-ul li:not(.myChoice)').eq(i);\\n                    if (arr.includes(jxList.text())) {\\n                        jxList.attr('check', 'true');\\n                    }\\n                    jxList.unbind('click').click(function(e) {\\n                        e.stopPropagation();\\n                        if ($(this).attr('check') !== \\\"true\\\") {\\n                            $(this).attr('check', 'true');\\n                            arr.unshift($(this).text());\\n                            $(inputid).val(arr);\\n                            $('.myChoice').text(arr);\\n                        } else {\\n                            $(this).attr('check', 'false');\\n                            for (var a = 0; a < arr.length; a++) {\\n                                if (arr[a] == $(this).text()) {\\n                                    arr.splice(a, 1);\\n                                    $(inputid).val(arr);\\n                                    $('.myChoice').text(arr);\\n                                }\\n                            }\\n                        }\\n                    })\\n                }\\n            } else if($('.jx-ul').css('display')=='none'){\\n                $('.cj-ul').slideToggle(200);\\n                e.stopPropagation();\\n                for (let i = 0; i < len2; i++) {\\n                    var cjList = $('.cj-ul li').eq(i);\\n                    if ($(inputid).val() == cjList.text()) {\\n                        cjList.attr('check', 'true');\\n                    }\\n                    cjList.unbind('click').click(function() {\\n                        if (i !== 0) {\\n                            $(inputid).val($(this).text());\\n                            $(this).attr('check', 'true');\\n                            $(this).siblings().attr('check', 'false');\\n                        }\\n                    })\\n                }\\n            }\\n        });\\n        $(document).not($('.xlList')).click(function(e) {\\n            $('.jx-ul').slideUp();\\n            $('.cj-ul').slideUp();\\n            $('.lieb button').text('☰');\\n            $('.lieb button').css('background', '');\\n        });\\n        $(function(){\\n            $('label').mouseup(function(){\\n                let inputid = '#' + $(this).next().attr('id');\\n                oneOrDbl(inputid);\\n            });\\n            var count = 0;\\n            var timer;\\n            function oneOrDbl(inputid){\\n                count++;\\n                timer = window.setTimeout(function(){\\n                    if(count == 1){\\n                        let arr = $(inputid).val().split(',');\\n                        arr.splice(0, 1);\\n                        $(inputid).val(arr);\\n                    }else{\\n                        $(inputid).val('');\\n                    }\\n                    window.clearTimeout(timer);\\n                    count = 0;\\n                },260)\\n            }\\n        })\\n    });\\n    \\n    function Toast(msg,duration){  \\n        duration=isNaN(duration)?2000:duration;  \\n        var m = document.createElement('div');  \\n        m.innerHTML = msg;  \\n        m.style.cssText=\\\"width:45%; min-width:150px; background:#311; opacity:0.6; height:auto;min-height: 45px; color:#fff; line-height:45px; text-align:center; border-radius:10px; position:fixed; top:60%; left:26%; z-index:999999;\\\";  \\n        document.body.appendChild(m);  \\n        setTimeout(function() {  \\n            var d = 0.5;  \\n            m.style.webkitTransition = '-webkit-transform ' + d + 's ease-in, opacity ' + d + 's ease-in';  \\n            m.style.opacity = '0';  \\n            setTimeout(function() { document.body.removeChild(m) }, d * 1000);  \\n        }, duration);  \\n    }  \\n\\n    function openDnPage(){\\n        fba.open(JSON.stringify({\\n            rule: \\\"=^_^=\\\",\\n            title: \\\"管理解析\\\",\\n            url: \\\"hiker://empty#noHistory#\\\",\\n            findRule: \\\"js:this.d=[];eval(fetch('hiker://files/cache/fileLinksᴰⁿ.txt'));require(fLinks.jxItUrl);jxItem.jxList();setResult(d)\\\"\\n        }));\\n    }\\n    function cancel(){\\n        if(mySet==''){\\n            fy_bridge_app.writeFile(oldRoute, JSON.stringify(settings, null, 4));\\n            fy_bridge_app.refreshPage(true);\\n        }else{\\n            fy_bridge_app.back(false);\\n        }\\n    }\\n    function clickme(msg,duration,title){\\n        for(let i = 0; i < boxData.length; i++){\\n            let id = boxData[i].id;\\n            settings[id] = Did(id).value;\\n        }\\n        if(settings.qju == ''){\\n            settings.qju = '默认';\\n        }\\n        try{\\n            eval('var bcConfig=' + fy_bridge_app.fetch(newRoute));\\n            Object.assign(bcConfig.settings, settings);\\n            fy_bridge_app.writeFile(newRoute, $$$.stringify(bcConfig));\\n        }catch(e){}\\n        fy_bridge_app.writeFile(oldRoute, $$$.stringify(settings));\\n            \\n        Toast(msg,duration);\\n        if(title==\\\"关\\\"){\\n            if(sfRefresh != Did(\\\"cj\\\").value){\\n                fy_bridge_app.back();\\n            }else{\\n                fy_bridge_app.back(false);\\n            }\\n        }else{\\n            fy_bridge_app.refreshPage(true);\\n        }\\n    }\\n\\n</script>   \\n</html>\"},{\"col_type\":\"movie_3\",\"name\":\"Parse_Dn.js\",\"path\":\"Parse_Dn.js\",\"rule\":\"//============免嗅调用============\\n//－－－=^_^=\\n//@断念\\n\\nvar parseRoute = 'hiker://files/rules/DuanNian/MyParse.json';\\nvar MyParseS = {};\\nvar mySet = {};\\nif (fileExist(parseRoute)) {\\n    eval('var parseFile =' + fetch(parseRoute));\\n    MyParseS = parseFile.codes;\\n    mySet = parseFile.settings;\\n}\\nvar parseTitle = [\\n    \\\"🥚\\\",\\n    \\\"yun1717\\\",\\n    \\\"PanGu\\\",\\n    \\\"FuXing\\\",\\n    \\\"https://jxx.smys8.cn/index.php?url=\\\",\\n    \\\"https://okjx.cc/?url=\\\",\\n    \\\"https://jx.m3u8.tv/jiexi/?url=\\\",\\n    \\\"https://sb.5gseo.net/?url=\\\"\\n];\\n\\n//－－－=^_^=\\n\\n//接口设置.\\n\\nvar setUrl = \\\"hiker://empty#noRecordHistory#@rule=js:this.d=[];require('https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/Route.js');Route.setParse();setResult(d);\\\";\\nvar set_switch = setUrl;\\nvar lazy = `require('https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/Route.js');aytmParse(input)`;\\n\\n//var parwix = `var yurl='https://daili.mayixiongdi.cn/?url=';Referer': 'https://www.mayixiongdi.cn/ys?id=';'https://daili.mayixiongdi.cn/api.php', 'Referer':'https://daili.mayixiongdi.cn';\\n// 全民https://pcvideoaliyun.tianshangrenjian.mgtv.com.88wuma.com/?url=\\n\\n//－－－备 用－－－\\n/*\\n * 影视工场： https://ysgc.cc/\\n * 江湖: 555电影 https://www.555dy2.com/phone.html ｜ 17看 http://17kanyy.cn/ http://jhjiexi.30vr.cn/?url= ｜ http://api.maizimall.com/index.php?url=\\n * 江湖: http://www.tianshuyun.net/index.php/vod/play/id/448377/sid/1/nid/1.html\\n * 江湖2: http://98hyk.cn/index.php/vod/play/id/72841/sid/1/nid/1.html\\n * 人人迷: https://vip.susou.tv/player/?url= ｜ https://www.momdm.cc/\\n * \\n * wuigen: https://www.5igen.com/dmplayer/player/?url=\\n * 干饭(人人迷): https://jx.zui.cm/?url=\\n * https://2.66movie.top/player/?url=\\n * \\n */\\n\\n\\nvar tools = {\\n    MD5: function(data) {\\n        eval(getCryptoJS());\\n        return CryptoJS.MD5(data).toString(CryptoJS.enc.Hex);\\n    },\\n    AES: function(text, key, iv, isEncrypt) {\\n        eval(getCryptoJS());\\n        var key = CryptoJS.enc.Utf8.parse(key);\\n        var iv = CryptoJS.enc.Utf8.parse(iv);\\n        if (isEncrypt) {\\n            return CryptoJS.AES.encrypt(text, key, {\\n                iv: iv,\\n                mode: CryptoJS.mode.CBC,\\n                padding: CryptoJS.pad.Pkcs7\\n            }).toString();\\n        };\\n        return CryptoJS.AES.decrypt(text, key, {\\n            iv: iv,\\n            padding: CryptoJS.pad.Pkcs7\\n        }).toString(CryptoJS.enc.Utf8);\\n    },\\n    //ascii\\n    nextCharacter: function(asciiValue, k) {\\n        var s = asciiValue;\\n        return String.fromCharCode(s + k);\\n    },\\n    //凯撒\\n    caesarCipher: function(stringValue, k) {\\n        var newString = \\\"\\\";\\n        for (var i = 0; i < stringValue.length; i++) {\\n            newString += this.nextCharacter(stringValue[i].charCodeAt(), k);\\n        }\\n        return newString;\\n    },\\n    handleUrl: function(url, vipUrl, name) {\\n        if(url == \\\"\\\" || url == vipUrl) {\\n            log(name + \\\"解析失败\\\");\\n            return vipUrl;\\n        }\\n        if (url[0] == '/') {\\n            url = 'https:' + url;\\n        }\\n        if (url.indexOf('=http') != -1) {\\n            url = url.indexOf('&url=') > -1 ? url : 'http' + decodeURIComponent(url.split('=http')[1]);\\n        }\\n        if (vipUrl.indexOf('mgtv.com') != -1 && url.indexOf('User-Agent') == -1) {\\n            url = url + ';{User-Agent@app}';\\n        } else if (url.indexOf('.flv') != -1) {\\n            url = url + ';{User-Agent@app&&Referer@' + vipUrl + '}';\\n        }\\n        return url + '#isVideo=true#';\\n    }\\n};\\n\\nvar ParseS = {};\\nvar originalParseS = {\\n    CityIP: 'http://pv.sohu.com/cityjson',\\n    pcUA: 'User-Agent@Mozilla/5.0 (Windows NT 10.0\\\\；\\\\； WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36',\\n    defaultParse: function(url) {\\n        showLoading(\\\"正在调用网页解析...\\\");\\n        return $(url).webLazy(() => {\\n            var Urls = _getUrls();\\n            var Reg1 = /\\\\.mp4|\\\\.m3u8\\\\?|.m3u8$|\\\\.flv|\\\\.avi|\\\\.rmvb/;\\n            var Reg2 = /playm3u8|.css$|.js$|.ico$|cnzz\\\\./;\\n            for (let i = 0; i < Urls.length; i++) {\\n                let isUrl = Urls[i];\\n                if (Reg1.test(isUrl) && !Reg2.test(isUrl)) {\\n                    fba.hideLoading();\\n                    return isUrl + \\\"#isVideo=true#\\\";\\n                }\\n            }\\n        });\\n    },\\n    maoss: function(jxurl, ref, key) {\\n        try {\\n            var getVideoInfo = function(text) {\\n                return tools.AES(text, key, iv);\\n            };\\n            key = key == undefined ? 'dvyYRQlnPRCMdQSe' : key;\\n            if (ref) {\\n                var html = request(jxurl, {\\n                    headers: {\\n                        'Referer': ref\\n                    }\\n                });\\n            } else {\\n                var html = request(jxurl);\\n            }\\n            if (html.indexOf('&btwaf=') != -1) {\\n                html = request(jxurl + '&btwaf' + html.match(/&btwaf(.*?)\\\"/)[1], {\\n                    headers: {\\n                        'Referer': ref\\n                    }\\n                })\\n            }\\n            var iv = html.split('_token = \\\"')[1].split('\\\"')[0];\\n            eval(html.match(/var config = {[\\\\s\\\\S]*?}/)[0] + '');\\n            if (config.url.slice(0, 4) != 'http') {\\n                config.url = decodeURIComponent(tools.AES(config.url, key, iv));\\n            }\\n            return config.url;\\n        } catch (e) {\\n            return '';\\n        }\\n    },\\n    LLQ: function(jxurl) {\\n        try {\\n            var api = jxurl.split('?url=')[0] + \\\"api.php\\\";\\n            var b64id = base64Encode(jxurl.split('url=')[1]);\\n            var parseid = tools.caesarCipher(b64id, -1);\\n            var json = JSON.parse(request(api, {\\n                headers: {\\n                    'Referer': jxurl\\n                },\\n                method: 'POST',\\n                body: 'url=' + parseid\\n            }));\\n            url = (json.code == 200 ? base64Decode(tools.caesarCipher(json.url, -1)) : '');\\n            return url;\\n        } catch (e) {\\n            return '';\\n        }\\n    },\\n    PanGu: function(vipUrl, data) {\\n        /*var ref = 'https://www.pangujiexi.com/';\\n        var parse = 'https://panguapi.ntryjd.net/jiexi/?url=' + vipUrl;\\n        var api = 'https://panguapi.ntryjd.net/jiexi/api.php';\\n        */\\n        //var ref = 'https://xmystv.com/';\\n        //var parse = 'https://www.99kpw.com/pangu/index.php?url=' + tailUrl;\\n        //var api = 'https://www.99kpw.com/pangu/api.php';\\n        var parse = \\\"https://www.pangujiexi.com/pangu/?url=\\\" + vipUrl;\\n        var api = \\\"https://panguapi.ntryjd.net/pangu2021/api.php\\\";\\n        if (data) {\\n            ref = data[0];\\n            parse = data[1];\\n            api = data[2];\\n        }\\n        var Time = (Math.floor(new Date().getTime() / 1000) * 1).toString();\\n        var json = request(api, {\\n            headers: {\\n                \\\"Referer\\\": parse\\n            },\\n            body: \\\"url=\\\" + vipUrl + \\\"&referer=\\\" + base64Encode(parse) + \\\"&ref=1&time=\\\" + Time + \\\"&type=&other=\\\" + base64Encode(vipUrl) + \\\"&ios=0\\\",\\n            method: \\\"POST\\\"\\n        });\\n        var url = json[0] == \\\"{\\\" ? JSON.parse(json).url : \\\"\\\";\\n        return url;\\n    },\\n    yun1717: function(vipUrl) {\\n        var isyk = vipUrl.indexOf('youku');\\n        var ref = \\\"https://www.1717yun.com/jx/ty.php?url=\\\" + vipUrl;\\n        var parse = \\\"https://1717yun.com.zh188.net/0828/?url=\\\" + vipUrl;\\n        var api = \\\"https://1717yun.com.zh188.net/1004/..index..php\\\";\\n        return isyk == -1 ? this.PanGu(vipUrl, [ref, parse, api]) : this.PanGu(vipUrl, [ref + ',vip:', parse + ',vip:', api]);\\n    },\\n    FuXing: function(vipUrl) {\\n        try {\\n            //if(vipUrl.indexOf('v.youku')!=-1){\\n            //    vipUrl = (JSON.parse(request(vipUrl, {redirect:false, withHeaders:true})).headers.location + '').replace(/\\\\?.*/,'');\\n            //}\\n            var ref = 'https://jx.xuetuiguang.cn/jiexi/?url=' + vipUrl;\\n            var parse = ref;\\n            var api = 'https://jx.xuetuiguang.cn/jiexi/apiu_fx.php';\\n            return this.PanGu(vipUrl, [ref, parse, api]);\\n        } catch (e) {\\n            return '';\\n        }\\n    },\\n    \\\"🥚\\\": function(vipUrl) {\\n        let 作者_视界知名大佬;\\n        try {\\n            var play = JSON.parse(fetch(\\\"http://www.zruiry.com/yun/api.php\\\", {\\n                body: \\\"url=\\\" + input,\\n                method: \\\"POST\\\"\\n            })).url;\\n            if (play.startsWith(\\\"/\\\")) {\\n                return \\\"https:\\\" + play;\\n            } else {\\n                return play;\\n            }\\n        } catch (e) {\\n            return \\\"\\\";\\n        }\\n    }\\n};\\n\\nvar froms = ['duoduozy', 'rx', 'renrenmi', 'ltnb', 'xfyun'];\\nfor(let i in froms) {\\n    let name = froms[i] + \\\"(通用函数)\\\";\\n    ParseS[name] = function(Url, referer){\\n        return this.defaultParse(referer);\\n    };\\n}\\nObject.assign(ParseS, originalParseS, MyParseS);\\n//覆盖顺序，第三个覆盖第二个然后覆盖第一个\\n\\n\\nfunction aytmParse(vipUrl, parseName) {\\n    this.request = function(param0, param1, param2) {\\n        param1 = param1 == undefined ? {} : param1;\\n        if(isNaN(param1.timeout)) {\\n            param1.timeout = 3000;\\n        }\\n        param2 = MY_RULE;\\n        var retStr = method_request.invoke(javaContext, param0, param1, param2);\\n        return retStr == null ? retStr : retStr + \\\"\\\";\\n    };\\n    this.fetch = function(param0, param1, param2) {\\n        param1 = param1 == undefined ? {} : param1;\\n        param1.headers = param1.headers == undefined ? {} : param1.headers;\\n        param1.headers['User-Agent'] = PC_UA;\\n        if(isNaN(param1.timeout)) {\\n            param1.timeout = 3000;\\n        }\\n        param2 = MY_RULE;\\n        var retStr = method_fetch.invoke(javaContext, param0, param1, param2);\\n        return retStr == null ? retStr : retStr + \\\"\\\";\\n    };\\n    var host = vipUrl.match(/\\\\.(.*?)\\\\//);\\n    host = host == null ? null : host[1];\\n    var noUrl = \\\"toast://接收到的链接为: \\\";\\n    switch (mySet.qju) {\\n        case \\\"默认\\\":\\n            switch (host) {\\n                case \\\"qq.com\\\":\\n                    str = mySet.tx;\\n                    break;\\n                case \\\"iqiyi.com\\\":\\n                    str = mySet.qy;\\n                    break;\\n                case \\\"youku.com\\\":\\n                    str = mySet.yk;\\n                    break;\\n                case \\\"mgtv.com\\\":\\n                    str = mySet.mg;\\n                    break;\\n                case \\\"bilibili.com\\\":\\n                    str = mySet.bl;\\n                    break;\\n                default:\\n                    str = host == null ? noUrl : mySet.oth;\\n                    break;\\n            }\\n            break;\\n        default:\\n            str = host == null ? noUrl : mySet.qju;\\n            break;\\n    }\\n    if (parseName) {\\n        str = parseName;\\n    }\\n    let myChoice = str.split(',');\\n    let len = myChoice.length;\\n    for (let i = 0; i < len; i++) {\\n        let name = myChoice[i];\\n        if (typeof ParseS[name] == 'function') {\\n            let url = ParseS[name](vipUrl);\\n            let Reg = new RegExp(\\\"m3u8|mp4|\\\" + vipUrl + \\\"|http\\\");\\n            if (i != len - 1 && !Reg.test(url)) {\\n                log(name + '解析失败');\\n                continue;\\n            }\\n            return tools.handleUrl(url, vipUrl, name);\\n        } else if (typeof ParseS[name] == 'string') {\\n            return ParseS.defaultParse(ParseS[name] + vipUrl, tools.handleUrl, name);\\n        } else {\\n            return name.substr(0, 4) == \\\"http\\\" || host == null ? name + vipUrl : \\\"toast://\\\" + name + \\\" 不是直链也不是免嗅\\\";\\n        }\\n    }\\n};\\n\\nvar playParse = {\\n    playerS: function(jurl) {\\n        var html = request(jurl),\\n            Url = '',\\n            from = '';\\n        var code1 = html.match(/var player_[\\\\s\\\\S]*?url[\\\\s\\\\S]*?}/);\\n        var dpUrl = pdfh(html, \\\"iframe&&data-play\\\");\\n        if (code1 != null) {\\n            eval(code1[0].replace(/player_.*?{/, 'pdata={'));\\n            Url = pdata.url;\\n            from = pdata.from;\\n        } else if (dpUrl != '') {\\n            Url = dpUrl.startsWith(\\\"http\\\") ? ddpUrl : dpUrl.slice(3);\\n        } else {\\n            code2 = html.match(/var now[\\\\s\\\\S]*?var pn[\\\\s\\\\S]*?;/);\\n            if (code2 != null) {\\n                eval(code2[0]);\\n                Url = now;\\n                from = pn;\\n            }\\n        }\\n        if (Url.substr(0, 8).match(/JT..JT../) || Url.startsWith(\\\"aHR0\\\")) {\\n            Url = base64Decode(Url);\\n        }\\n        if (Url.substr(0, 8).match(/%..%../)) {\\n            Url = unescape(Url);\\n        }\\n        if (froms.includes(from)) {\\n            var name = from + '(通用函数)';\\n            return ParseS[name](Url, jurl);\\n        }\\n        if (/html|bilibili/.test(Url)) {\\n            return aytmParse(Url);\\n        } else {\\n            return Url.startsWith('http') ? Url + '#isVideo=true#' : ParseS.defaultParse(jurl);\\n        }\\n    },\\n    player_xx: function(jurl) {\\n        return $(jurl).lazyRule(() => {\\n            eval(fetch(JSON.parse(fetch('hiker://files/cache/MyParseSet.json')).cj));\\n            return playParse.playerS(input);\\n        }) \\n    }\\n};\\n\\nfunction setParse() {\\n    this.d = [];\\n    require('https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/Route.js');\\n    Route.setParse();\\n    setResult(d);\\n}\"}]","icon":"https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/xbtc/main/JTyQL4PS.png","proxy":"https://ghproxy.cc/https://raw.githubusercontent.com/ls125781003/dcbf/m/v/Route.js=>https://agit.ai/ls125781003/Hiker/raw/branch/m/v/Route.js"}