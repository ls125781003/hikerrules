{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"Main","path":"Main","rule":"js:\nlet d = [];\n\nd.push({\n    title: \"设置\",\n    url: \"hiker://page/设置#noRefresh#\",\n    pic_url: \"hiker://images/icon_setting6\",\n    col_type: \"avatar\",\n\n});\n//let k = \"file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/rules/LoyDgIk/选择文件.js\";\nlet k = \"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\";\nlet f = require(k);\n\nf.fileSelection({\n    callback: $.toString(() => {\n        //根据文件扩展名，用不同小程序打开\n        /*if (TYPE === \".json\") {\n            return 'hiker://page/interface#noHistory##noRecordHistory#?rule=JSON编辑器&Json=' + base64Encode(\"file://\" + PATH)\n        } else if (TYPE === \".html\") {\n            return \"web://file://\" + PATH;\n        } else if ([\".js\", \".txt\"].includes(TYPE)) {\n            return \"editFile://file://\" + PATH\n        } else if ([\".jpg\", \".svg\", \".mp3\", \".mp4\", \".m3u8\"].includes(TYPE)) {\n            return \"file://\" + PATH\n        } else if (\".hiker\" === TYPE) {\n            return \"rule://\" + base64Encode(request(\"file://\" + PATH));\n        } else {\n            return $(\"无法打开，是否使用其他应用打开？\").confirm(path => \"openFile://file://\" + path, PATH);\n        }*/\n        let waylist=readFile(\"waylist.json\",0);\n        if(!waylist){\n            waylist=$.require(\"Default\");\n        }else{\n            try{\n                waylist=JSON.parse(waylist);\n            }catch{\n                \n            }\n        }\n        let g=waylist.find(x=>x.type.includes(TYPE));\n        if(!g) return $(\"无法打开，是否使用其他应用打开？\").confirm(path => \"openFile://file://\" + path, PATH);\n        if(g.way.startsWith(\"<js>\")){\n            return eval(g.way.replace(\"<js>\",\"\"));\n        }else{\n            return g.way.replace(/\\{\\{\\PATH}\\}/g,PATH).replace(/\\{\\{\\TYPE}\\}/g,TYPE);\n        }\n    }),\n    initialPath: getItem(\"初始目录\", getPath(\"hiker://files/\").slice(7)),\n    rootDirPath: \"/storage/emulated/0/\",\n    //onClickType: \"confirm\",\n    memoryPath: true,\n    requireUrl: k,\n    canCreate: true,\n    store:\"cc\",\n    //isErJi:true,\n    //cHomeTips: \"是否使用海阔小程序打开[${name}]?\",\n    //cSearchTips: \"是否使用海阔小程序打开[${path}]?\",\n    notShowHide: !getItem(\"显示隐藏文件\", \"1\"),\n    isErJi: !!getItem(\"文件夹二级打开\", \"\")\n}, d);"},{"col_type":"movie_3","name":"设置","path":"设置","rule":"js:\naddListener(\"onClose\",()=>{\n    refreshPage(false);\n});\nlet layout = [];\nlayout.push({\n    title: \"<strong>基础设置</strong>\".big(),\n    col_type: \"rich_text\"\n});\nlayout.push({\n    col_type: \"line\"\n});\nlayout.push({\n    col_type: \"line\"\n});\nlayout.push({\n    title: \"显示隐藏文件(夹)\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        let s = getItem(\"显示隐藏文件\", \"1\");\n        setItem(\"显示隐藏文件\", s ? \"\" : \"1\");\n        refreshPage(false);\n        return \"hiker://empty\";\n    }),\n    pic_url: getItem(\"显示隐藏文件\", \"1\") ? \"hiker://images/icon_rect_fill\" : \"hiker://images/icon_rect\",\n    col_type: \"text_icon\"\n});\nlayout.push({\n    col_type: \"line\"\n});\n/*layout.push({\n    title: \"文件夹二级打开\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        let s = getItem(\"文件夹二级打开\", \"\");\n        setItem(\"文件夹二级打开\", s ? \"\" : \"1\");\n        refreshPage(false);\n        return \"hiker://empty\";\n    }),\n    pic_url: getItem(\"文件夹二级打开\", \"\") ? \"hiker://images/icon_rect_fill\" : \"hiker://images/icon_rect\",\n    col_type: \"text_icon\"\n});*/\nlayout.push({\n    col_type: \"line\"\n});\nlayout.push({\n    title: \"““””\"+\"初始目录\".fontcolor(\"gray\"),\n    url: $().input(() => {\n        let path=getPath(input).slice(7);\n        if(!fileExist(\"file://\"+path)){\n            return \"toast://不存在该目录\";\n        }\n        setItem(\"初始目录\", path);\n        refreshPage(false);\n        return \"hiker://empty\";\n    }),\n    desc: getItem(\"初始目录\", getPath(\"hiker://files/\").slice(7)),\n    col_type: \"text_1\"\n});\nlayout.push({\n    title: \"““””\"+\"自定义打开方式\".fontcolor(\"gray\"),\n    url: \"hiker://page/自定义打开方式\",\n    col_type: \"text_1\",\n    extra:{\n        lineVisible: false\n    }\n});\n/*\nlayout.push({\n    title: \"<strong>自定义打开方式</strong>\".big(),\n    col_type: \"rich_text\"\n});\nlayout.push({\n    col_type: \"line\"\n});\nlayout.push({\n    col_type: \"line\"\n});*/\nsetResult(layout);"},{"col_type":"movie_3","name":"默认","path":"Default","rule":"$.exports=[{\n    type:[\".json\"],\n    way:\"<js>'hiker://page/interface#noHistory##noRecordHistory#?rule=JSON编辑器&Json=' + base64Encode('file://' + PATH)\"\n    \n},{\n    type:[\".html\"],\n    way: \"web://file://{{PATH}}\"\n    \n},{\n    type:[\".jpg\", \".svg\", \".mp3\", \".mp4\", \".m3u8\"],\n    way:\"file://{{PATH}}\"\n    \n},{\n    type:[\".hiker\"],\n    way:\"<js>'rule://' + base64Encode(request('file://' + PATH))\"\n    \n},{\n    type:[\".js\", \".py\"],\n    way:\"editFile://file://{{PATH}}\"\n    \n},/* {\n    type:[\".txt\"],\n    way:\"<js>'hiker://page/txtParser.view#noHistory##noRecordHistory#?rule=本地资源管理&path=' + encodeURIComponent(PATH)\"\n    \n},*/{\n    type:[\".epub\"],\n    way:\"<js>'hiker://page/epubParser.view#noHistory##noRecordHistory#?rule=本地资源管理&path=' + encodeURIComponent(PATH)\"\n    \n}];\n"},{"col_type":"movie_3","name":"自定义打开方式","path":"自定义打开方式","rule":"js:\nlet waylist = readFile(\"waylist.json\", 0);\nif (!waylist) {\n    waylist = $.require(\"Default\");\n    saveFile(\"waylist.json\", JSON.stringify(waylist), 0);\n} else {\n    try {\n        waylist = JSON.parse(waylist);\n    } catch {\n\n    }\n}\nlet d = [];\nd.push({\n    title: \"创建\",\n    url: $(\"\", \"输入扩展名\").input(() => {\n        if (!input) return \"toast://创建失败\";\n        return $(\"\", \"输入方式\").input((type) => {\n            if (!input) return \"toast://创建失败\";\n            let arr = type.split(\"|\");\n            let waylist = readFile(\"waylist.json\", 0);\n            waylist = JSON.parse(waylist);\n            waylist.push({\n                type: arr,\n                way: input\n            });\n            saveFile(\"waylist.json\", JSON.stringify(waylist), 0);\n            refreshPage(false);\n            return \"toast://创建完成\";\n        }, input);\n    }),\n    col_type: \"text_center_1\"\n});\nwaylist.forEach((v, i) => {\n    d.push({\n        title: \"扩展名：\" + v.type.join(\"|\"),\n        desc: \"方式：\" + v.way,\n        url: \"hiker://empty\",\n        col_type: \"text_1\",\n        extra: {\n            lineVisible: false\n        }\n    });\n    d.push({\n        title: \"修改扩展名\",\n        url: $(v.type.join(\"|\")).input((i) => {\n            if (!input) return \"toast://修改失败\";\n            let arr = input.split(\"|\");\n            let waylist = readFile(\"waylist.json\", 0);\n            waylist = JSON.parse(waylist);\n            waylist[i].type = arr;\n            saveFile(\"waylist.json\", JSON.stringify(waylist), 0);\n            refreshPage(false);\n            return \"toast://修改完成\";\n        }, i),\n        col_type: \"text_3\"\n    });\n    d.push({\n        title: \"修改方式\",\n        url: $(v.way).input((i) => {\n            if (!input) return \"toast://修改失败\";\n            let waylist = readFile(\"waylist.json\", 0);\n            waylist = JSON.parse(waylist);\n            waylist[i].way = input;\n            saveFile(\"waylist.json\", JSON.stringify(waylist), 0);\n            refreshPage(false);\n            return \"toast://修改完成\"\n        }, i),\n        col_type: \"text_3\"\n    });\n    d.push({\n        title: \"删除\",\n        url: $(\"#noLoading#\").lazyRule((i) => {\n            let waylist = readFile(\"waylist.json\", 0);\n            waylist = JSON.parse(waylist);\n            waylist.splice(i,1);\n            saveFile(\"waylist.json\", JSON.stringify(waylist), 0);\n            refreshPage(false);\n            return \"toast://修改完成\"\n        }, i),\n        col_type: \"text_3\"\n    });\n    d.push({\n        col_type: \"line\"\n    });\n});\nsetResult(d);"}],"title":"简易文件管理","author":"@LoyDgIk","version":0,"type":"other","url":"hiker://empty#noRefresh#","col_type":"text_1","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:$.require(\"hiker://page/Main\");","searchFind":"","search_url":"","group":"④工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"Main\",\"path\":\"Main\",\"rule\":\"js:\\nlet d = [];\\n\\nd.push({\\n    title: \\\"设置\\\",\\n    url: \\\"hiker://page/设置#noRefresh#\\\",\\n    pic_url: \\\"hiker://images/icon_setting6\\\",\\n    col_type: \\\"avatar\\\",\\n\\n});\\n//let k = \\\"file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/rules/LoyDgIk/选择文件.js\\\";\\nlet k = \\\"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\\\";\\nlet f = require(k);\\n\\nf.fileSelection({\\n    callback: $.toString(() => {\\n        //根据文件扩展名，用不同小程序打开\\n        /*if (TYPE === \\\".json\\\") {\\n            return 'hiker://page/interface#noHistory##noRecordHistory#?rule=JSON编辑器&Json=' + base64Encode(\\\"file://\\\" + PATH)\\n        } else if (TYPE === \\\".html\\\") {\\n            return \\\"web://file://\\\" + PATH;\\n        } else if ([\\\".js\\\", \\\".txt\\\"].includes(TYPE)) {\\n            return \\\"editFile://file://\\\" + PATH\\n        } else if ([\\\".jpg\\\", \\\".svg\\\", \\\".mp3\\\", \\\".mp4\\\", \\\".m3u8\\\"].includes(TYPE)) {\\n            return \\\"file://\\\" + PATH\\n        } else if (\\\".hiker\\\" === TYPE) {\\n            return \\\"rule://\\\" + base64Encode(request(\\\"file://\\\" + PATH));\\n        } else {\\n            return $(\\\"无法打开，是否使用其他应用打开？\\\").confirm(path => \\\"openFile://file://\\\" + path, PATH);\\n        }*/\\n        let waylist=readFile(\\\"waylist.json\\\",0);\\n        if(!waylist){\\n            waylist=$.require(\\\"Default\\\");\\n        }else{\\n            try{\\n                waylist=JSON.parse(waylist);\\n            }catch{\\n                \\n            }\\n        }\\n        let g=waylist.find(x=>x.type.includes(TYPE));\\n        if(!g) return $(\\\"无法打开，是否使用其他应用打开？\\\").confirm(path => \\\"openFile://file://\\\" + path, PATH);\\n        if(g.way.startsWith(\\\"<js>\\\")){\\n            return eval(g.way.replace(\\\"<js>\\\",\\\"\\\"));\\n        }else{\\n            return g.way.replace(/\\\\{\\\\{\\\\PATH}\\\\}/g,PATH).replace(/\\\\{\\\\{\\\\TYPE}\\\\}/g,TYPE);\\n        }\\n    }),\\n    initialPath: getItem(\\\"初始目录\\\", getPath(\\\"hiker://files/\\\").slice(7)),\\n    rootDirPath: \\\"/storage/emulated/0/\\\",\\n    //onClickType: \\\"confirm\\\",\\n    memoryPath: true,\\n    requireUrl: k,\\n    canCreate: true,\\n    store:\\\"cc\\\",\\n    //isErJi:true,\\n    //cHomeTips: \\\"是否使用海阔小程序打开[${name}]?\\\",\\n    //cSearchTips: \\\"是否使用海阔小程序打开[${path}]?\\\",\\n    notShowHide: !getItem(\\\"显示隐藏文件\\\", \\\"1\\\"),\\n    isErJi: !!getItem(\\\"文件夹二级打开\\\", \\\"\\\")\\n}, d);\"},{\"col_type\":\"movie_3\",\"name\":\"设置\",\"path\":\"设置\",\"rule\":\"js:\\naddListener(\\\"onClose\\\",()=>{\\n    refreshPage(false);\\n});\\nlet layout = [];\\nlayout.push({\\n    title: \\\"<strong>基础设置</strong>\\\".big(),\\n    col_type: \\\"rich_text\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    title: \\\"显示隐藏文件(夹)\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let s = getItem(\\\"显示隐藏文件\\\", \\\"1\\\");\\n        setItem(\\\"显示隐藏文件\\\", s ? \\\"\\\" : \\\"1\\\");\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\";\\n    }),\\n    pic_url: getItem(\\\"显示隐藏文件\\\", \\\"1\\\") ? \\\"hiker://images/icon_rect_fill\\\" : \\\"hiker://images/icon_rect\\\",\\n    col_type: \\\"text_icon\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\n/*layout.push({\\n    title: \\\"文件夹二级打开\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let s = getItem(\\\"文件夹二级打开\\\", \\\"\\\");\\n        setItem(\\\"文件夹二级打开\\\", s ? \\\"\\\" : \\\"1\\\");\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\";\\n    }),\\n    pic_url: getItem(\\\"文件夹二级打开\\\", \\\"\\\") ? \\\"hiker://images/icon_rect_fill\\\" : \\\"hiker://images/icon_rect\\\",\\n    col_type: \\\"text_icon\\\"\\n});*/\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    title: \\\"““””\\\"+\\\"初始目录\\\".fontcolor(\\\"gray\\\"),\\n    url: $().input(() => {\\n        let path=getPath(input).slice(7);\\n        if(!fileExist(\\\"file://\\\"+path)){\\n            return \\\"toast://不存在该目录\\\";\\n        }\\n        setItem(\\\"初始目录\\\", path);\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\";\\n    }),\\n    desc: getItem(\\\"初始目录\\\", getPath(\\\"hiker://files/\\\").slice(7)),\\n    col_type: \\\"text_1\\\"\\n});\\nlayout.push({\\n    title: \\\"““””\\\"+\\\"自定义打开方式\\\".fontcolor(\\\"gray\\\"),\\n    url: \\\"hiker://page/自定义打开方式\\\",\\n    col_type: \\\"text_1\\\",\\n    extra:{\\n        lineVisible: false\\n    }\\n});\\n/*\\nlayout.push({\\n    title: \\\"<strong>自定义打开方式</strong>\\\".big(),\\n    col_type: \\\"rich_text\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});*/\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"默认\",\"path\":\"Default\",\"rule\":\"$.exports=[{\\n    type:[\\\".json\\\"],\\n    way:\\\"<js>'hiker://page/interface#noHistory##noRecordHistory#?rule=JSON编辑器&Json=' + base64Encode('file://' + PATH)\\\"\\n    \\n},{\\n    type:[\\\".html\\\"],\\n    way: \\\"web://file://{{PATH}}\\\"\\n    \\n},{\\n    type:[\\\".jpg\\\", \\\".svg\\\", \\\".mp3\\\", \\\".mp4\\\", \\\".m3u8\\\"],\\n    way:\\\"file://{{PATH}}\\\"\\n    \\n},{\\n    type:[\\\".hiker\\\"],\\n    way:\\\"<js>'rule://' + base64Encode(request('file://' + PATH))\\\"\\n    \\n},{\\n    type:[\\\".js\\\", \\\".py\\\"],\\n    way:\\\"editFile://file://{{PATH}}\\\"\\n    \\n},/* {\\n    type:[\\\".txt\\\"],\\n    way:\\\"<js>'hiker://page/txtParser.view#noHistory##noRecordHistory#?rule=本地资源管理&path=' + encodeURIComponent(PATH)\\\"\\n    \\n},*/{\\n    type:[\\\".epub\\\"],\\n    way:\\\"<js>'hiker://page/epubParser.view#noHistory##noRecordHistory#?rule=本地资源管理&path=' + encodeURIComponent(PATH)\\\"\\n    \\n}];\\n\"},{\"col_type\":\"movie_3\",\"name\":\"自定义打开方式\",\"path\":\"自定义打开方式\",\"rule\":\"js:\\nlet waylist = readFile(\\\"waylist.json\\\", 0);\\nif (!waylist) {\\n    waylist = $.require(\\\"Default\\\");\\n    saveFile(\\\"waylist.json\\\", JSON.stringify(waylist), 0);\\n} else {\\n    try {\\n        waylist = JSON.parse(waylist);\\n    } catch {\\n\\n    }\\n}\\nlet d = [];\\nd.push({\\n    title: \\\"创建\\\",\\n    url: $(\\\"\\\", \\\"输入扩展名\\\").input(() => {\\n        if (!input) return \\\"toast://创建失败\\\";\\n        return $(\\\"\\\", \\\"输入方式\\\").input((type) => {\\n            if (!input) return \\\"toast://创建失败\\\";\\n            let arr = type.split(\\\"|\\\");\\n            let waylist = readFile(\\\"waylist.json\\\", 0);\\n            waylist = JSON.parse(waylist);\\n            waylist.push({\\n                type: arr,\\n                way: input\\n            });\\n            saveFile(\\\"waylist.json\\\", JSON.stringify(waylist), 0);\\n            refreshPage(false);\\n            return \\\"toast://创建完成\\\";\\n        }, input);\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n});\\nwaylist.forEach((v, i) => {\\n    d.push({\\n        title: \\\"扩展名：\\\" + v.type.join(\\\"|\\\"),\\n        desc: \\\"方式：\\\" + v.way,\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_1\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    });\\n    d.push({\\n        title: \\\"修改扩展名\\\",\\n        url: $(v.type.join(\\\"|\\\")).input((i) => {\\n            if (!input) return \\\"toast://修改失败\\\";\\n            let arr = input.split(\\\"|\\\");\\n            let waylist = readFile(\\\"waylist.json\\\", 0);\\n            waylist = JSON.parse(waylist);\\n            waylist[i].type = arr;\\n            saveFile(\\\"waylist.json\\\", JSON.stringify(waylist), 0);\\n            refreshPage(false);\\n            return \\\"toast://修改完成\\\";\\n        }, i),\\n        col_type: \\\"text_3\\\"\\n    });\\n    d.push({\\n        title: \\\"修改方式\\\",\\n        url: $(v.way).input((i) => {\\n            if (!input) return \\\"toast://修改失败\\\";\\n            let waylist = readFile(\\\"waylist.json\\\", 0);\\n            waylist = JSON.parse(waylist);\\n            waylist[i].way = input;\\n            saveFile(\\\"waylist.json\\\", JSON.stringify(waylist), 0);\\n            refreshPage(false);\\n            return \\\"toast://修改完成\\\"\\n        }, i),\\n        col_type: \\\"text_3\\\"\\n    });\\n    d.push({\\n        title: \\\"删除\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((i) => {\\n            let waylist = readFile(\\\"waylist.json\\\", 0);\\n            waylist = JSON.parse(waylist);\\n            waylist.splice(i,1);\\n            saveFile(\\\"waylist.json\\\", JSON.stringify(waylist), 0);\\n            refreshPage(false);\\n            return \\\"toast://修改完成\\\"\\n        }, i),\\n        col_type: \\\"text_3\\\"\\n    });\\n    d.push({\\n        col_type: \\\"line\\\"\\n    });\\n});\\nsetResult(d);\"}]","proxy":"","icon":""}