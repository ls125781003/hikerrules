{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"developer","path":"developer","rule":"js:evalPrivateJS(\"tNZX5/P4zIELNkb83aam/iWrXYBax3Rhc3XX0bipZoTUC9grN5TcHhMpaM0pSMFHnvt9uEt7qO+qAQ5Zx03gXO0JSDFoFkkUSoQds3lEKn3wk3633TGbfZVdGwP8qljPFSdHDyp2pemGC/iSo+UVgdNTEMzd/YTEasZQUNWLn6YNT867e9i95ePI0xS0UtN7pNmq5VtXVG3x4KTJYBmlstF9WDFULRU5hrCG6FPv5YiPycZZKN8aqc/ybdDuxyXyPO9y5cgSuCvUP8+6AWaE5ZnHz5YMo8iVeklphfmJHXoMdHDQ5U6fqiB8yG4jpY/dnvFpY+ljdXf9TEHu+lWPqTr8sRP/dl5hfYVSgaCqW9mCROQt57mFrOjyPH49qp97x+IAlj0jlXX6FiGObg32o+MOHfiE2VTItWY0+zQKso0xhGLv1AskxOS2Veys7mOtYrMoL4pwrdV1aW/5obiOqGq4v7VAaJ68XwDAoaPggPS4cNvKK8oYl+nxFRvT8dsk4ta94pYczJI/DjZBaZfh0KLruQzig3nQpJfc4EvJ2royigzewREaryxV/GMvGNn+S1TpVYcSDBEYFN79+VebaT5if9+u7VMUVvokpVyblfJX9Q/zZCHCVG6X2XXjbKKsGvmBUZB69FQCSqnWEB1GQ1rI2vEwxPv5Km1h/fImbrfyi9MU2nTcuZZ/AzklWdbED42i3S6TYF18HtbQn6bQYntuEIBEiUtSxpVSskCtnOMsA6xYVZIv04NnxemJNyTsSYHUGZ/m4zCD9Iz826suzSAQ1Qppm/vfGSgvgbWnI0l7408Uuz5uCCxOxxl91fSd+GpWDyRfampUk//zK1QfDG1piJWyayUTVLE1oEkzMT3JZwYkO7R/JuqEF5emCk6RMUV3VBfgmD6/JYY3rXEozxfUbBRkIWJrpVr0b8lsEgGgQd+Q6sHFNYmVw4ETaU/074zYrGJ5Ec24vdnylvuPYcsry0jWVnP7CJ/71kgB1PbAy7TTAlLcLJ8AI073wCQobSKsvLN+M2MKcdgtquFRcerLb+dAkPc8k7Eqmzr0A5XJGfeqmnvm5PfNxtNJFFNW5uh+sL5clxAgDb4QjBnpRaKFIFmk3rXII/HdBwk1moTiShT+RU+14aSUlUp1fp/XyyvLSNZWc/sIn/vWSAHU9hGkNbwVNFyK1MbBSPowh1sBr4bT1bTuCvuVFi8JP7jqwxEls1GW/TjChRz8T5rOGVDgGrr689ojJuYXewLd7r2GdoWc/aWgAPeuckQkU+hU12gIVQn2creYursHWX7+j3fR2gXTtiX5dMvbY8lWptXT/drCgPUivvzR7Kn9dwjrtFMNW6bIVlHg+iNSIn99O8DZ/VoNdQx7GoFH9HrwoDfFnuu+A6Wa2Q/bcsm0xjmwZ5LbdqO3/rScsVbfQiAzMSrNWRcP9VL3Td8HaUO6fSknnfBEXma761hquj8L9waYdAeG2OQ6WL61w6dGWMBrfRHXbLAiriku1DvtpeIpOavmn20wVw+RFbvZsvExEkVeqvo4NEUwvwlWAWy7V7vb+PAb937wo2OAdrYntxhvlD5Af2jzXkoIFqg+pnV2x0p4ZP/br3JN6SFzPSf3jIGojWmkYKgGNDVbzLcLhX8hSNL8NgwTt8Xv29C817E/LhAwr9vVTO4W5kmVzfZOYvYfuwaULqrIitno0RnLxqJmv4nwdQDgo6w4nzyCA1u8suGsBdAaEcRNgygnYNFtiWM6cgopnmsAyEjXsFp5EaV0Wm/JArBdhkqhdxHLSzerVdGI0sk30PEWnGDTdQX0FmXQEg4nMU4CY0Iee6tZXeYPJ/vELxHZxr9aoEGqoTaIwbwDpmij4y2IL+Kw6QPZbb4YP//2Q/P5//vTfqt91oMPD0Io2DvxIN4QCoSd47Rw6pdjbAihVkk49g4Io/K+4gJ1JxggX/Jh5YN84PffbVfFFCLQSpGeKYyxraJV2FOjqxQIOMQR0TxxLb0EFWrJYA8SzEjwV9VI/x27rW5CeJu+SHm8i1drHAFJIjJvMwmPcMrvgnCr4R4id1vBbthYUgPfC3OHoz/d8VXTviL5qL9U3UuLYMOHqUSMVunOhMxtzMX2\");"},{"col_type":"movie_3","name":"规则列表","path":"ruleList","rule":"js:\nlet proxy=getItem('proxy','');\ntry {\n    let list = fetch(\"https://api.github.com/repos/\" + MY_PARAMS.repo + \"/contents\");\n    list = JSON.parse(list);\n    \n    let indexObj=fetch(\"https://api.github.com/repos/\" + MY_PARAMS.repo + \"/contents/index.json\");\n    indexObj=JSON.parse(indexObj);\n   // log(indexObj);\n    let indexData=[];\n    if(indexObj.sha){\n                indexData=JSON.parse(base64Decode(indexObj.content));\n    }\n    log(indexData)\n    if (!Array.isArray(list)) {\n        if (list.message === \"This repository is empty.\") {\n            list = [];\n        }else{\n            throw new Error(list.message);\n        }\n    }\n    list = list.filter(v => /\\.(hiker|json|html|txt|md)$/.test(v.name) && v.type === \"file\").filter(i=>!['index.json','readme.md'].includes(i.name.toLowerCase()));\n    let d = [];\n    for (let it of list) {\n        let indexContent=indexData.find(i=>i.title==it.name.replace(/\\.(hiker|json|html|txt|md)$/g,''));\n        \n        d.push({\n            title: it.name,\n            pic_url:indexContent?indexContent.icon:'',\n            col_type: \"icon_2_round\",\n            url: \"rule://\" + base64Encode(\"￥home_rule_url￥\" +proxy+ it.download_url),\n            extra:{\n                url:proxy+ it.download_url\n            }\n        });\n    }\n    setResult(d);\n} catch (e) {\n    setResult([{\n        title: \"““ERROR””\",\n        desc: e.toString(),\n        url: \"hiker://empty\",\n        col_type: \"text_center_1\"\n    }]);\n}"},{"col_type":"movie_3","name":"注册","path":"register","rule":"js:\nvar d = [];\naddListener(\"onClose\", $.toString(() => {\n    clearMyVar(\"ps_name\");\n    clearMyVar(\"ps_repo\");\n    clearMyVar(\"ps_token\");\n    //clearMyVar(\"ps_avatar\");\n}));\n\nsetPageTitle(\"注册/登陆\");\nd.push({\n    col_type: \"input\",\n    desc: \"用户名\",\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_name\", input);\n        }),\n        titleVisible: false\n    }\n});\nd.push({\n    col_type: \"input\",\n    desc: \"github用户名/仓库名\",\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_repo\", input);\n        }),\n        titleVisible: false,\n    }\n});\nd.push({\n    col_type: \"input\",\n    desc: \"用户头像\",\n    extra: {\n        onChange: $.toString(() => {\n            setItem(\"ps_avatar\", input);\n        }),\n        titleVisible: false,\n    }\n});\nd.push({\n    col_type: \"input\",\n    desc: \"token\",\n    extra: {\n        type: \"password\",\n        onChange: $.toString(() => {\n            putMyVar(\"ps_token\", input);\n        }),\n        titleVisible: false,\n    }\n});\nd.push({\n    title: \"注册/登录\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        showLoading(\"正在注册/登录...\");\n        let name = getMyVar(\"ps_name\", \"\");\n        if (name == \"\") {\n            return \"toast://用户名不能为空\"\n        }\n        let repo = getMyVar(\"ps_repo\", \"\");\n        if (repo == \"\") {\n            return \"toast://repo不能为空\"\n        }\n        let avatar = getItem(\"ps_avatar\", \"\");\n        let token = getMyVar(\"ps_token\", \"\");\n        if (token == \"\") {\n            return \"toast://token不能为空\"\n        }\n        let user = {\n            name: name,\n            repo: repo,\n            token: token,\n            avatar:avatar\n        };\n        function getinfo() {\n            let login = JSON.parse(fetch(\"https://api.github.com/repos/\" + repo, {\n                headers: {\n                    Accept: \"application/vnd.github.v3+json\",\n                    Authorization: \"token \" + token\n                }\n            }));\n            if(login.message===\"Bad credentials\"||login.message===\"Not Found\"){\n                hideLoading();\n                throw new Error(login.message);\n            }\n            return login;\n        }\n        let registry = $.require(\"developer\").getRegistry();\n        let developer = registry.content;\n        \n        if (developer.some(v => v.name === name && v.repo === repo)) {\n            let index=developer.findIndex(x=>x.name === name && x.repo === repo);\n            \n            try{\n                getinfo();\n                \n            }catch(e){\n                return \"toast://登录失败：\"+e.toString();\n            }\n            if(developer[index].avatar!==avatar){\n                developer[index].avatar=avatar;\n                registry.content=developer;\n                $.require(\"developer\").setRegistry(registry)\n            \n            }\n            storage0.setItem(\"user\", user);\n            back();\n            return \"toast://登录成功\";\n        } else if (developer.some(v => v.name === name || v.repo === repo)) {\n            hideLoading();\n            return \"toast://仓库已经存在或用户名已经存在\";\n        } else {\n            developer.push({\n                name: name,\n                repo: repo,\n                avatar:avatar\n            });\n            try {\n                if (!(getinfo().private===false)) {\n                    return \"toast://注册失败：私密仓库\";\n                }\n            } catch (e) {\n                return \"toast://仓库验证失败:\"+e.toString();\n            }\n            if ($.require(\"developer\").setRegistry(registry)) {\n                storage0.setItem(\"user\", user);\n                clearMyVar(\"developer\");\n                back();\n                return \"toast://注册成功\";\n            }\n            hideLoading();\n            return \"toast://注册失败\";\n        }\n\n    }),\n    col_type: \"text_center_1\",\n});\nsetResult(d);"},{"col_type":"movie_3","name":"规则管理","path":"Rulemanagement","rule":"js:\nsetPageTitle('规则管理');\nlet user = storage0.getItem(\"user\", \"\");\n\nlet list = fetch(\"https://api.github.com/repos/\" + user.repo + \"/contents\");\nlist = JSON.parse(list);\nlet indexObj=fetch(\"https://api.github.com/repos/\" + user.repo + \"/contents/index.json\");\n    indexObj=JSON.parse(indexObj);\n   // log(indexObj);\n    let indexData=[];\n    if(indexObj.sha){\n                indexData=JSON.parse(base64Decode(indexObj.content));\n    }\n    log(indexData);\nlist = list.filter(v => /\\.(hiker|json|html|txt|md)$/.test(v.name) && v.type === \"file\").filter(i=>!['index.json','readme.md'].includes(i.name.toLowerCase()));\nlet d = [];\nfor (let it of list) {\n    let indexContent=indexData.find(i=>i.title==it.name.replace(/\\.(hiker|json|html|txt|md)$/g,''));\n    d.push({\n        title: it.name,\n        pic_url:indexContent?indexContent.icon:'',\n         col_type: \"icon_2_round\",\n        url: $([\"删除\", \"复制分享链接\", \"导入\"]).select((url, sha, name) => {\n            let proxy=getItem('proxy','');\n            url=proxy+url;\n            log(url);\n            if (input === \"复制分享链接\") {\n                return \"copy://海阔视界规则【\" + name + \"】￥home_rule_url￥\" + url;\n            } else if (input === \"导入\") {\n                return \"rule://\" + base64Encode(\"￥home_rule_url￥\" + url);\n            } else {\n                return $(\"确认从仓库删除该分享:\" + name).confirm((name, sha) => {\n                    let user = storage0.getItem(\"user\", \"\");\n                    showLoading(\"正在删除\");\n                    try {\n                        let res = JSON.parse(fetch(\"https://api.github.com/repos/\" + user.repo + \"/contents/\" + name, {\n                            headers: {\n                                Accept: \"application/vnd.github.v3+json\",\n                                Authorization: \"token \" + user.token\n                            },\n                            body: {\n                                sha: sha,\n                                message: \"删除规则\"\n                            },\n                            method: \"DELETE\",\n                            withStatusCode: true\n                        }));\n                        if (res.statusCode === 200) {\n                            java.lang.Thread.sleep(1650);\n                            refreshPage(false);\n                            hideLoading();\n                            return \"toast://删除成功,服务器删除会有一定延迟\";\n                        } else {\n                            res = JSON.parse(res.body);\n                            throw new Error(res.message);\n                        }\n                    } catch (e) {\n                        hideLoading();\n                        return \"toast://删除失败:\" + e.toString();\n                    }\n                }, name, sha);\n            }\n        }, it.download_url, it.sha, it.name)\n    });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"管理用户","path":"Usermanagement","rule":"js:\nsetPageTitle(\"管理员：\" + MY_PARAMS.name);\nconst {color}=$.require('utils');\nlet d = [];\nlet developer = $.require(\"developer\").getDeveloper();\nd.push({\n    title: \"备份\",\n    url: $().lazyRule(() => {\n        let registry = $.require(\"developer\").getRegistry();\n        let developer = registry.content;\n        storage0.setItem(\"userDataBackup\", developer);\n        return \"toast://备份成功\";\n    }),\n    col_type: \"text_2\",\n});\n\nd.push({\n    title: \"恢复\",\n    url: $().lazyRule(() => {\n        let registry = $.require(\"developer\").getRegistry();\n        registry.content = storage0.getItem(\"userDataBackup\", registry.content);\n        if ($.require(\"developer\").setRegistry(registry)) {\n            clearMyVar(\"developer\");            \n            refreshPage(false);\n            return \"toast://恢复成功\";\n        } else {\n            return \"toast://恢复失败\";\n        }\n    }),\n    col_type: \"text_2\",\n});\nlet option=getMyVar('option','删除');\nfunction setTitle(title){\n    if(title==option){\n        return color(title,'#12b668')\n    }else{\n        return title\n    }\n}\n\nd.push({\n    title:setTitle('删除'),\n    col_type:'scroll_button',\n    url:$('#noLoading#').lazyRule(()=>{\n        putMyVar('option','删除');\n        refreshPage();\n        return 'hiker://empty'\n    })\n});\nd.push({\n    title:setTitle('排序'),\n    col_type:'scroll_button',\n    url:$('#noLoading#').lazyRule(()=>{\n        putMyVar('option','排序');\n        refreshPage();\n        return 'hiker://empty'\n    })\n});\nd.push({\n    title:setTitle('设置头像'),\n    col_type:'scroll_button',\n    url:$('#noLoading#').lazyRule(()=>{\n        putMyVar('option','设置头像');\n        refreshPage();\n        return 'hiker://empty'\n    })\n});\n\n\nd.push({\n    col_type: \"line_blank\"\n});\nfor (let it of developer) {\n    d.push({\n        title: it.name,\n        pic_url:it.avatar,\n        url: $('#noLoading#').lazyRule((repo)=>{\n            return $.require('utils').clickUser(repo);\n        },it.repo),\n        col_type: \"icon_2_round\"\n    });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"设置中心","path":"settings","rule":"js:\nsetPageTitle('设置中心');\nlet d=[];\nd.push({\n    title:'保存',\n    desc:'请输入规则导入代理接口',\n    col_type:'input',\n    url:$.toString(()=>{\n     log(input);\n     setItem('proxy',input);\n     return 'toast://保存成功'\n}),\n extra:{\n     type:'textarea',\n     textSize: 11,\n     //highlight:1,\n     length:2,\n     defaultValue:getItem('proxy','https://gh-proxy.com/'),\n     onChange:\"putMyVar('proxy',input)\"\n }\n    \n});\nsetResult(d);"},{"col_type":"movie_3","name":"工具","path":"utils","rule":"js:\n$.exports.color = function(text, color) {\n    text += \"\";\n    if (text.indexOf(\"““””\") === 0) {\n        text.replace(\"““””\", \"\");\n    }\n    return \"““””<font color='\" + color + \"'>\" + text + \"</font>\";\n}\nfunction htmlTag(tag, text) {\n    text += \"\";\n    if (text.indexOf(\"““””\") === 0) {\n        text.replace(\"““””\", \"\");\n    }\n    return \"““””\" + \"<\" + tag + \">\" + text + \"</\" + tag + \">\";\n\n}\n$.exports.htmlTag = htmlTag;\n$.exports.small = function(text) {\n    return htmlTag(\"small\", text);\n}\n\n$.exports.updateUser = function(repo,obj){\n    \n    let registry = $.require(\"developer\").getRegistry();\n            let developer = registry.content;\n            let index = developer.findIndex(v => v.repo === repo);\n            developer[index]=Object.assign(developer[index],obj)\n            if ($.require(\"developer\").setRegistry(registry)) {\n                return true;\n            } else {\n                return false;\n            }\n}\n\n$.exports.getUser=function(repo){\n    let registry = $.require(\"developer\").getRegistry();\n            let developer = registry.content;\n            return developer.find(v => v.repo === repo);\n}\n\n$.exports.clickUser=function(repo){\n    let option=getMyVar('option','删除');\n    if(option=='删除'){\n        return $(\"是否删除该用户？\").confirm((repo) => {\n            let registry = $.require(\"developer\").getRegistry();\n            let developer = registry.content;\n            let index = developer.findIndex(v => v.repo === repo);\n            developer.splice(index, 1);\n            if ($.require(\"developer\").setRegistry(registry)) {\n                clearMyVar(\"developer\");\n                refreshPage(false);\n                return \"toast://删除成功\";\n            } else {\n                return \"toast://删除失败\";\n            }\n        }, repo)\n    }else if(option=='设置头像'){\n          let developer = $.require('utils').getUser(repo);\n        return $(developer.avatar,'请输入头像链接').input((repo)=>{\n            \n            if ($.require(\"utils\").updateUser(repo,{\n                avatar:input\n            })) {\n                refreshPage(false);\n                return \"toast://头像修改成功\";\n            } else {\n                return \"toast://头像修改失败\";\n            }\n        },repo)\n    }else if(option=='排序'){\n        let registry = $.require(\"developer\").getRegistry();\n        let developer = registry.content;\n            let index = developer.findIndex(v => v.repo === repo);\n            return $(index+'','请输入开发者顺序').input((registry,repo)=>{\n            let developer = registry.content;\n            let index = developer.findIndex(v => v.repo === repo);\n            \n            let item = developer.splice(index, 1)[0];\n                    developer.splice(Number(input), 0, item);\n            if ($.require(\"developer\").setRegistry(registry)) {\n                clearMyVar(\"developer\");\n                refreshPage(false);\n                return \"toast://顺序设置成功\";\n            } else {\n                return \"toast://顺序设置失败\";\n            }\n    },registry,repo)\n }\n    \n}"}],"title":"github仓库[旧版]","author":"@LoyDgIk","version":7,"type":"other","url":"hiker://empty##","col_type":"text_2","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\naddListener(\"onRefresh\", () => clearMyVar(\"developer\"));\nlet developer = $.require(\"developer\").getDeveloper();\nconst {color,small}=$.require('utils');\nlet user = storage0.getItem(\"user\", \"\");\n\nif (user) {\n    let sel = [\"退出登录\", \"规则管理\", \"设置中心\"];\n    let managers=['道长'];\n    if (user.repo === \"LoyDgIk/hikerCK\"||managers.includes(user.name)) {\n        sel.push(\"管理用户\");\n    }\n    d.push({\n        title: user.name,\n        col_type: \"avatar\",\n        pic_url: \"hiker://images/icon_setting6\",\n        url: $(sel).select(() => {\n            if (input === \"退出登录\") {\n                clearItem(\"user\");\n                refreshPage();\n            } else if (input === \"管理用户\") {\n                return \"hiker://page/Usermanagement#noRecordHistory##noHistory#\";\n            } else if (input === \"设置中心\") {\n                return \"hiker://page/settings#noRecordHistory##noHistory#\";\n            } else {\n                return \"hiker://page/Rulemanagement#noRecordHistory##noHistory#\";\n            }\n        }),\n        extra: {\n            name: user.name\n        }\n    });\n} else {\n    d.push({\n        title: \"注册/登录\",\n        url: \"hiker://page/register#noRecordHistory##noHistory#\",\n        col_type: \"text_center_1\"\n    });\n}\nd.push({\n    col_type: 'text_1',\n    title: small(\"现有 \" + color(developer.length, \"#ff7000\") + \" 名开发者\"),\n    url: \"toast://喵喵喵?\",\n});\nfor (let it of developer) {\n    d.push({\n        title: it.name,\n        url: \"hiker://page/ruleList#noRecordHistory##noHistory#\",\n        pic_url:it.avatar,\n        col_type: \"icon_2_round\",\n        extra: {\n            repo: it.repo,\n        }\n    });\n}\n\nsetResult(d);","searchFind":"","search_url":"","group":"开发中心","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"developer\",\"path\":\"developer\",\"rule\":\"js:evalPrivateJS(\\\"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\\\");\"},{\"col_type\":\"movie_3\",\"name\":\"规则列表\",\"path\":\"ruleList\",\"rule\":\"js:\\nlet proxy=getItem('proxy','');\\ntry {\\n    let list = fetch(\\\"https://api.github.com/repos/\\\" + MY_PARAMS.repo + \\\"/contents\\\");\\n    list = JSON.parse(list);\\n    \\n    let indexObj=fetch(\\\"https://api.github.com/repos/\\\" + MY_PARAMS.repo + \\\"/contents/index.json\\\");\\n    indexObj=JSON.parse(indexObj);\\n   // log(indexObj);\\n    let indexData=[];\\n    if(indexObj.sha){\\n                indexData=JSON.parse(base64Decode(indexObj.content));\\n    }\\n    log(indexData)\\n    if (!Array.isArray(list)) {\\n        if (list.message === \\\"This repository is empty.\\\") {\\n            list = [];\\n        }else{\\n            throw new Error(list.message);\\n        }\\n    }\\n    list = list.filter(v => /\\\\.(hiker|json|html|txt|md)$/.test(v.name) && v.type === \\\"file\\\").filter(i=>!['index.json','readme.md'].includes(i.name.toLowerCase()));\\n    let d = [];\\n    for (let it of list) {\\n        let indexContent=indexData.find(i=>i.title==it.name.replace(/\\\\.(hiker|json|html|txt|md)$/g,''));\\n        \\n        d.push({\\n            title: it.name,\\n            pic_url:indexContent?indexContent.icon:'',\\n            col_type: \\\"icon_2_round\\\",\\n            url: \\\"rule://\\\" + base64Encode(\\\"￥home_rule_url￥\\\" +proxy+ it.download_url),\\n            extra:{\\n                url:proxy+ it.download_url\\n            }\\n        });\\n    }\\n    setResult(d);\\n} catch (e) {\\n    setResult([{\\n        title: \\\"““ERROR””\\\",\\n        desc: e.toString(),\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\"\\n    }]);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"注册\",\"path\":\"register\",\"rule\":\"js:\\nvar d = [];\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"ps_name\\\");\\n    clearMyVar(\\\"ps_repo\\\");\\n    clearMyVar(\\\"ps_token\\\");\\n    //clearMyVar(\\\"ps_avatar\\\");\\n}));\\n\\nsetPageTitle(\\\"注册/登陆\\\");\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"用户名\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_name\\\", input);\\n        }),\\n        titleVisible: false\\n    }\\n});\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"github用户名/仓库名\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_repo\\\", input);\\n        }),\\n        titleVisible: false,\\n    }\\n});\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"用户头像\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            setItem(\\\"ps_avatar\\\", input);\\n        }),\\n        titleVisible: false,\\n    }\\n});\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"token\\\",\\n    extra: {\\n        type: \\\"password\\\",\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_token\\\", input);\\n        }),\\n        titleVisible: false,\\n    }\\n});\\nd.push({\\n    title: \\\"注册/登录\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        showLoading(\\\"正在注册/登录...\\\");\\n        let name = getMyVar(\\\"ps_name\\\", \\\"\\\");\\n        if (name == \\\"\\\") {\\n            return \\\"toast://用户名不能为空\\\"\\n        }\\n        let repo = getMyVar(\\\"ps_repo\\\", \\\"\\\");\\n        if (repo == \\\"\\\") {\\n            return \\\"toast://repo不能为空\\\"\\n        }\\n        let avatar = getItem(\\\"ps_avatar\\\", \\\"\\\");\\n        let token = getMyVar(\\\"ps_token\\\", \\\"\\\");\\n        if (token == \\\"\\\") {\\n            return \\\"toast://token不能为空\\\"\\n        }\\n        let user = {\\n            name: name,\\n            repo: repo,\\n            token: token,\\n            avatar:avatar\\n        };\\n        function getinfo() {\\n            let login = JSON.parse(fetch(\\\"https://api.github.com/repos/\\\" + repo, {\\n                headers: {\\n                    Accept: \\\"application/vnd.github.v3+json\\\",\\n                    Authorization: \\\"token \\\" + token\\n                }\\n            }));\\n            if(login.message===\\\"Bad credentials\\\"||login.message===\\\"Not Found\\\"){\\n                hideLoading();\\n                throw new Error(login.message);\\n            }\\n            return login;\\n        }\\n        let registry = $.require(\\\"developer\\\").getRegistry();\\n        let developer = registry.content;\\n        \\n        if (developer.some(v => v.name === name && v.repo === repo)) {\\n            let index=developer.findIndex(x=>x.name === name && x.repo === repo);\\n            \\n            try{\\n                getinfo();\\n                \\n            }catch(e){\\n                return \\\"toast://登录失败：\\\"+e.toString();\\n            }\\n            if(developer[index].avatar!==avatar){\\n                developer[index].avatar=avatar;\\n                registry.content=developer;\\n                $.require(\\\"developer\\\").setRegistry(registry)\\n            \\n            }\\n            storage0.setItem(\\\"user\\\", user);\\n            back();\\n            return \\\"toast://登录成功\\\";\\n        } else if (developer.some(v => v.name === name || v.repo === repo)) {\\n            hideLoading();\\n            return \\\"toast://仓库已经存在或用户名已经存在\\\";\\n        } else {\\n            developer.push({\\n                name: name,\\n                repo: repo,\\n                avatar:avatar\\n            });\\n            try {\\n                if (!(getinfo().private===false)) {\\n                    return \\\"toast://注册失败：私密仓库\\\";\\n                }\\n            } catch (e) {\\n                return \\\"toast://仓库验证失败:\\\"+e.toString();\\n            }\\n            if ($.require(\\\"developer\\\").setRegistry(registry)) {\\n                storage0.setItem(\\\"user\\\", user);\\n                clearMyVar(\\\"developer\\\");\\n                back();\\n                return \\\"toast://注册成功\\\";\\n            }\\n            hideLoading();\\n            return \\\"toast://注册失败\\\";\\n        }\\n\\n    }),\\n    col_type: \\\"text_center_1\\\",\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"规则管理\",\"path\":\"Rulemanagement\",\"rule\":\"js:\\nsetPageTitle('规则管理');\\nlet user = storage0.getItem(\\\"user\\\", \\\"\\\");\\n\\nlet list = fetch(\\\"https://api.github.com/repos/\\\" + user.repo + \\\"/contents\\\");\\nlist = JSON.parse(list);\\nlet indexObj=fetch(\\\"https://api.github.com/repos/\\\" + user.repo + \\\"/contents/index.json\\\");\\n    indexObj=JSON.parse(indexObj);\\n   // log(indexObj);\\n    let indexData=[];\\n    if(indexObj.sha){\\n                indexData=JSON.parse(base64Decode(indexObj.content));\\n    }\\n    log(indexData);\\nlist = list.filter(v => /\\\\.(hiker|json|html|txt|md)$/.test(v.name) && v.type === \\\"file\\\").filter(i=>!['index.json','readme.md'].includes(i.name.toLowerCase()));\\nlet d = [];\\nfor (let it of list) {\\n    let indexContent=indexData.find(i=>i.title==it.name.replace(/\\\\.(hiker|json|html|txt|md)$/g,''));\\n    d.push({\\n        title: it.name,\\n        pic_url:indexContent?indexContent.icon:'',\\n         col_type: \\\"icon_2_round\\\",\\n        url: $([\\\"删除\\\", \\\"复制分享链接\\\", \\\"导入\\\"]).select((url, sha, name) => {\\n            let proxy=getItem('proxy','');\\n            url=proxy+url;\\n            log(url);\\n            if (input === \\\"复制分享链接\\\") {\\n                return \\\"copy://海阔视界规则【\\\" + name + \\\"】￥home_rule_url￥\\\" + url;\\n            } else if (input === \\\"导入\\\") {\\n                return \\\"rule://\\\" + base64Encode(\\\"￥home_rule_url￥\\\" + url);\\n            } else {\\n                return $(\\\"确认从仓库删除该分享:\\\" + name).confirm((name, sha) => {\\n                    let user = storage0.getItem(\\\"user\\\", \\\"\\\");\\n                    showLoading(\\\"正在删除\\\");\\n                    try {\\n                        let res = JSON.parse(fetch(\\\"https://api.github.com/repos/\\\" + user.repo + \\\"/contents/\\\" + name, {\\n                            headers: {\\n                                Accept: \\\"application/vnd.github.v3+json\\\",\\n                                Authorization: \\\"token \\\" + user.token\\n                            },\\n                            body: {\\n                                sha: sha,\\n                                message: \\\"删除规则\\\"\\n                            },\\n                            method: \\\"DELETE\\\",\\n                            withStatusCode: true\\n                        }));\\n                        if (res.statusCode === 200) {\\n                            java.lang.Thread.sleep(1650);\\n                            refreshPage(false);\\n                            hideLoading();\\n                            return \\\"toast://删除成功,服务器删除会有一定延迟\\\";\\n                        } else {\\n                            res = JSON.parse(res.body);\\n                            throw new Error(res.message);\\n                        }\\n                    } catch (e) {\\n                        hideLoading();\\n                        return \\\"toast://删除失败:\\\" + e.toString();\\n                    }\\n                }, name, sha);\\n            }\\n        }, it.download_url, it.sha, it.name)\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"管理用户\",\"path\":\"Usermanagement\",\"rule\":\"js:\\nsetPageTitle(\\\"管理员：\\\" + MY_PARAMS.name);\\nconst {color}=$.require('utils');\\nlet d = [];\\nlet developer = $.require(\\\"developer\\\").getDeveloper();\\nd.push({\\n    title: \\\"备份\\\",\\n    url: $().lazyRule(() => {\\n        let registry = $.require(\\\"developer\\\").getRegistry();\\n        let developer = registry.content;\\n        storage0.setItem(\\\"userDataBackup\\\", developer);\\n        return \\\"toast://备份成功\\\";\\n    }),\\n    col_type: \\\"text_2\\\",\\n});\\n\\nd.push({\\n    title: \\\"恢复\\\",\\n    url: $().lazyRule(() => {\\n        let registry = $.require(\\\"developer\\\").getRegistry();\\n        registry.content = storage0.getItem(\\\"userDataBackup\\\", registry.content);\\n        if ($.require(\\\"developer\\\").setRegistry(registry)) {\\n            clearMyVar(\\\"developer\\\");            \\n            refreshPage(false);\\n            return \\\"toast://恢复成功\\\";\\n        } else {\\n            return \\\"toast://恢复失败\\\";\\n        }\\n    }),\\n    col_type: \\\"text_2\\\",\\n});\\nlet option=getMyVar('option','删除');\\nfunction setTitle(title){\\n    if(title==option){\\n        return color(title,'#12b668')\\n    }else{\\n        return title\\n    }\\n}\\n\\nd.push({\\n    title:setTitle('删除'),\\n    col_type:'scroll_button',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        putMyVar('option','删除');\\n        refreshPage();\\n        return 'hiker://empty'\\n    })\\n});\\nd.push({\\n    title:setTitle('排序'),\\n    col_type:'scroll_button',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        putMyVar('option','排序');\\n        refreshPage();\\n        return 'hiker://empty'\\n    })\\n});\\nd.push({\\n    title:setTitle('设置头像'),\\n    col_type:'scroll_button',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        putMyVar('option','设置头像');\\n        refreshPage();\\n        return 'hiker://empty'\\n    })\\n});\\n\\n\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nfor (let it of developer) {\\n    d.push({\\n        title: it.name,\\n        pic_url:it.avatar,\\n        url: $('#noLoading#').lazyRule((repo)=>{\\n            return $.require('utils').clickUser(repo);\\n        },it.repo),\\n        col_type: \\\"icon_2_round\\\"\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"设置中心\",\"path\":\"settings\",\"rule\":\"js:\\nsetPageTitle('设置中心');\\nlet d=[];\\nd.push({\\n    title:'保存',\\n    desc:'请输入规则导入代理接口',\\n    col_type:'input',\\n    url:$.toString(()=>{\\n     log(input);\\n     setItem('proxy',input);\\n     return 'toast://保存成功'\\n}),\\n extra:{\\n     type:'textarea',\\n     textSize: 11,\\n     //highlight:1,\\n     length:2,\\n     defaultValue:getItem('proxy','https://gh-proxy.com/'),\\n     onChange:\\\"putMyVar('proxy',input)\\\"\\n }\\n    \\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"utils\",\"rule\":\"js:\\n$.exports.color = function(text, color) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””<font color='\\\" + color + \\\"'>\\\" + text + \\\"</font>\\\";\\n}\\nfunction htmlTag(tag, text) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””\\\" + \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n\\n}\\n$.exports.htmlTag = htmlTag;\\n$.exports.small = function(text) {\\n    return htmlTag(\\\"small\\\", text);\\n}\\n\\n$.exports.updateUser = function(repo,obj){\\n    \\n    let registry = $.require(\\\"developer\\\").getRegistry();\\n            let developer = registry.content;\\n            let index = developer.findIndex(v => v.repo === repo);\\n            developer[index]=Object.assign(developer[index],obj)\\n            if ($.require(\\\"developer\\\").setRegistry(registry)) {\\n                return true;\\n            } else {\\n                return false;\\n            }\\n}\\n\\n$.exports.getUser=function(repo){\\n    let registry = $.require(\\\"developer\\\").getRegistry();\\n            let developer = registry.content;\\n            return developer.find(v => v.repo === repo);\\n}\\n\\n$.exports.clickUser=function(repo){\\n    let option=getMyVar('option','删除');\\n    if(option=='删除'){\\n        return $(\\\"是否删除该用户？\\\").confirm((repo) => {\\n            let registry = $.require(\\\"developer\\\").getRegistry();\\n            let developer = registry.content;\\n            let index = developer.findIndex(v => v.repo === repo);\\n            developer.splice(index, 1);\\n            if ($.require(\\\"developer\\\").setRegistry(registry)) {\\n                clearMyVar(\\\"developer\\\");\\n                refreshPage(false);\\n                return \\\"toast://删除成功\\\";\\n            } else {\\n                return \\\"toast://删除失败\\\";\\n            }\\n        }, repo)\\n    }else if(option=='设置头像'){\\n          let developer = $.require('utils').getUser(repo);\\n        return $(developer.avatar,'请输入头像链接').input((repo)=>{\\n            \\n            if ($.require(\\\"utils\\\").updateUser(repo,{\\n                avatar:input\\n            })) {\\n                refreshPage(false);\\n                return \\\"toast://头像修改成功\\\";\\n            } else {\\n                return \\\"toast://头像修改失败\\\";\\n            }\\n        },repo)\\n    }else if(option=='排序'){\\n        let registry = $.require(\\\"developer\\\").getRegistry();\\n        let developer = registry.content;\\n            let index = developer.findIndex(v => v.repo === repo);\\n            return $(index+'','请输入开发者顺序').input((registry,repo)=>{\\n            let developer = registry.content;\\n            let index = developer.findIndex(v => v.repo === repo);\\n            \\n            let item = developer.splice(index, 1)[0];\\n                    developer.splice(Number(input), 0, item);\\n            if ($.require(\\\"developer\\\").setRegistry(registry)) {\\n                clearMyVar(\\\"developer\\\");\\n                refreshPage(false);\\n                return \\\"toast://顺序设置成功\\\";\\n            } else {\\n                return \\\"toast://顺序设置失败\\\";\\n            }\\n    },registry,repo)\\n }\\n    \\n}\"}]","proxy":"","icon":""}