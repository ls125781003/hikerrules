海阔视界「风影规则 - 共 69 条」，复制整条口令自动导入$[{"name":"全看网&&随风","host":"    let html = fetch(\"https://www.91qkw.cc/\");\n    let list = pdfa(html, \"body&&p\");\n    let url = [];\n    for (let i of list) {\n        url.push(pd(i, \"a&&href\"))\n    };\n\n    let host = [];\n    let urls = url;\n    for (let i = 0; i < urls.length; i++) {\n        if (i != 0) {\n            let Code = JSON.parse(fetch(urls[i], {\n                withStatusCode: true,\n                timeout: 5000\n            })).statusCode;\n            if (Code == 200) {\n\n                host.push(urls[i] + \"/show/1-----------.html\");\n            };\n            console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n            break;\n        };\n    };\n    return host[0];","sourl":"SURL/search/**----------fypage---.html","sy":"    标题1 = \"热播推荐\";\n    标题2 = \"最新电影\";\n    标题3 = \"最新连续剧\";\n    标题4 = \"最新综艺\";\n    标题5 = \"最新动漫\";\n    \n    列表1 = \".stui-vodlist,3&&li:lt(4)\";\n    列表2 = \".stui-vodlist,4&&li:lt(9)\";\n    列表3 = \".stui-vodlist,5&&li:lt(9)\";\n    列表4 = \".stui-vodlist,6&&li:lt(9)\";\n    列表5 = \".stui-vodlist,7&&li:lt(9)\";\n\n    html = fetch(MY_URL);\n  \n   //console.log(html);\n    var 列表显示 = function(list) {\n     \n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"a&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"a&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".pic-text&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            \n            l.push(lists);\n        };\n        return l;\n    };\n    ","fl":"    var 标题链接 = {\n        \"电影\": MY_URL,\n        \"剧集\": MY_URL.replace(/\\/1/, \"/2\"),\n        \"综艺\": MY_URL.replace(/\\/1/, \"/3\"),\n        \"动漫\": MY_URL.replace(/\\/1/, \"/4\")\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/Type\\/(\\d+)\\.html/, 'Type/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.stui-screen__list\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|留言|最新|排行|资讯))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    /*var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"Show/id\");\n    };\n\n*/\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".stui-vodlist&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text &&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".stui-content__detail&&p:matches(类型)&&Text\";\n    导演 = \".stui-content__detail&&p:matches(导演)&&Text\";\n    主演 = \".stui-content__detail&&p:matches(主演|演员)&&Text\";\n    简介 = \".desc&&Text\";\n\n    线路 = \"body&&.stui-pannel__head:not(:matches(猜你|剧情)):not(title)\";\n    线路名 = \"h3&&Text\";\n\n    列表 = \"body&&.stui-content__playlist\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".stui-vodlist&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n    var 数字验证 = //.test(html);\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".stui-vodlist&&li\");\n        //console.log(list);\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pdfh(li, \"a&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-07-14T23:00:22","ttl":"","fbhost":"","off":"1","gs":"JS"},{"name":"短剧天堂&&随风","host":"https://duanjutt.tv/vodshow/1-----------.html","sourl":"SURL/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h3:matches(逆袭)&&Text\";\n    标题2 = \"h3:matches(甜宠)&&Text\";\n    标题3 = \"h3:matches(虐恋)&&Text\";\n    标题4 = \"h3:matches(穿越)&&Text\";\n\n    列表1 = \".myui-vodlist,1&&li:lt(9)\";\n    列表2 = \".myui-vodlist,2&&li:lt(9)\";\n    列表3 = \".myui-vodlist,3&&li:lt(9)\";\n    列表4 = \".myui-vodlist,4&&li:lt(9)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"a&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"a&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".pic-text&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 = {\n        \"逆袭\": MY_URL,\n        \"甜宠\": MY_URL.replace(/vodshow\\/1/, \"vodshow/2\"),\n        \"虐恋\": MY_URL.replace(/vodshow\\/1/, \"vodshow/3\"),\n        \"穿越\": MY_URL.replace(/vodshow\\/1/, \"vodshow/4\"),\n        \"重生\": MY_URL.replace(/vodshow\\/1/, \"vodshow/5\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.nav-list\";\n    拼接小类 = \"body&&.nav-slide:gt(0)\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表)):not(.text-muted)\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype\\/(\\d+)/g, \"vodshow/$1-----------\");\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".myui-vodlist&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".myui-content__detail&&p:matches(类型|分类)&&Text\";\n    导演 = \".myui-content__detail&&p:matches(导演)&&Text\";\n    主演 = \".myui-content__detail&&p:matches(主演|演员)&&Text\";\n    简介 = \".col-pd&&p&&Text\";\n\n    线路 = \".nav-tabs&&li\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&.sort-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".myui-vodlist__bd&&li:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n\n    var 免嗅 = function(input) {\n        let play = JSON.parse(fetch(input).match(/var player_.*?=(.*?)</)[1]).url;\n        return play + \";{Referer@\" + getHome(input) + \"&&User-Agent@MOBILE_UA}\";\n    };","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".myui-vodlist__media&&li\");\n        console.log(list);\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".text-right&&Text\") + \"\\n\" + pdfh(li, \".pic-tag&&Text\"),\n                img: pdfh(li, \"a&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-07-14T23:00:10","ttl":"","fbhost":"","off":"1","gs":"JS"},{"name":"宝铂丽影院&&羽龑","host":"https://www.boburi.com/bbtype-1-----------.html","sourl":"https://www.boburi.com/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h3:matches(电影)&&Text\";\n    标题2 = \"h3:matches(剧集)&&Text\";\n    标题3 = \"h3:matches(动漫)&&Text\";\n    标题4 = \"h3:matches(综艺)&&Text\";\n    标题5 = \"h3:matches(短剧)&&Text\";\n    标题6 = \"h3:matches(解说)&&Text\";\n\n    列表1 = \".stui-vodlist,0&&li:lt(15)\";\n    列表2 = \".stui-vodlist,1&&li:lt(15)\";\n    列表3 = \".stui-vodlist,3&&li:lt(15)\";\n    列表4 = \".stui-vodlist,2&&li:lt(15)\";\n    列表5 = \".stui-vodlist,4&&li:lt(15)\";\n    列表6 = \".stui-vodlist,5&&li:lt(15)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let img = pd(li[i], \"a&&data-original\");\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".pic-text&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n    短剧_url = MY_URL.replace(/1/, \"18\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.stui-screen__list\";\n    拼接小类 = \"body&&.nav-head\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    /*var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"bbtype/id\");\n    };*/\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".stui-vodlist&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \".lazyload&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".stui-pannel_bd&&p:matches(电影类别)&&Text\";\n    导演 = \".stui-content__detail&&p:matches(导演)&&Text\";\n    主演 = \".stui-content__detail&&p:matches(主演|演员)&&Text\";\n    简介 = \"#desc&&.col-pd&&Text\";\n\n    线路 = \".col-lg-wide-75&&.playlist\";\n    线路名 = \"h3&&Text\";\n\n    列表 = \".col-lg-wide-75&&.stui-content__playlist\";\n    子列表 = \"ul&&li:not(.visible-xs)\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".stui-vodlist&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"h1&&Text\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.stui-vodlist__media&&li\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pdfh(li, \".lazyload&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };","time":"2024-07-13T16:14:08","ttl":"","fbhost":"","off":"1","gs":"JS"},{"name":"爱优影视&&随风","host":"let html = fetch(\"https://www.iuys.tv/\");\nlet list = pdfa(html, \".section-main&&.section-row:matches(爱优)\");\nlet url = [];\nfor (let i of list) {\n    url.push(pd(i, \"a&&href\"))\n};\n\nlet host = [];\nlet urls = url.slice(0, -1);\nfor (let i = 0; i < urls.length; i++) {\n    let Code = JSON.parse(fetch(urls[i], {\n    withStatusCode: true,\n    timeout: 5000\n})).statusCode;\n    if (Code == 200) {\nhost.push(urls[i] + \"/vodshow/2-----------.html\")\n        console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n        break;\n    };\n};\nreturn host[0]","sourl":"SURL/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h3:matches(热播)&&Text\";\n    标题2 = \"h3:matches(电影)&&Text\";\n    标题3 = \"h3:matches(电视剧)&&Text\";\n    标题4 = \"h3:matches(动漫)&&Text\";\n    标题5 = \"h3:matches(综艺)&&Text\";\n\n    列表1 = \".myui-vodlist,0&&li:lt(4)\";\n    列表2 = \".myui-vodlist,2&&li:lt(9)\";\n    列表3 = \".myui-vodlist,1&&li:lt(9)\";\n    列表4 = \".myui-vodlist,3&&li:lt(9)\";\n    列表5 = \".myui-vodlist,4&&li:lt(9)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"a&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"a&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".pic-text&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/vodshow\\/2/, \"vodshow/1\");\n    动漫_url = MY_URL.replace(/vodshow\\/2/, \"vodshow/3\");\n    综艺_url = MY_URL.replace(/vodshow\\/2/, \"vodshow/4\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.nav-list\";\n    拼接小类 = \"body&&.nav-slide\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表)):not(.text-muted)\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"vodshow/id\");\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".myui-vodlist&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".myui-content__detail&&p:matches(类型|分类)&&Text\";\n    导演 = \".myui-content__detail&&p:matches(导演)&&Text\";\n    主演 = \".myui-content__detail&&p:matches(主演|演员)&&Text\";\n    简介 = \".col-pd&&p&&Text\";\n\n    线路 = \".nav-tabs&&li\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&.sort-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".myui-vodlist__bd&&li:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 数字验证 = function(html) {\n        return /验证码/.test(html);\n    };\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-07-13T02:31:13","ttl":"","fbhost":"https://www.iuys.cc/vodshow/2-----------.html","off":"1","gs":"JS"},{"name":"柒贰DJ&&随风","host":"https://www.72dj.net/music/list-id-1-1.html","sourl":"SURL/dance/search?key=**&page=fypage","sy":"    标题1 = \"近期更新\";\n    标题2 = \"串烧舞曲\";\n    标题3 = \"中文舞曲\";\n    标题4 = \"慢歌连版\";\n    标题5 = \"近期热门\";\n\n    列表1 = \".update-list,0&&li:lt(12)\";\n    列表2 = \".divide-y&&li:lt(9)\";\n    列表3 = \".divide-y,1&&li:lt(9)\";\n    列表4 = \".divide-y,2&&li:lt(9)\";\n    列表5 = \".update-list,1&&li:lt(12)\";\n\n    html = fetch(MY_URL);\n    var 样式 = function(text) {\n        return \"card_pic_3_center\";\n    };\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"img&&alt\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \"p&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n\n    var 免嗅 = function(input) {\n        var html = fetch(input.split(\"##\")[1]);\n        let home = getHome(input);\n        var play = pd(html, \"#audio&&src\", home);\n        return play + \"#isMusic=true#;{Referer@https://www.72dj.net}\";\n    };","fl":"    var 标题链接 = {\n        \"串烧舞曲\": MY_URL,\n        \"中文舞曲\": MY_URL.replace(/id-1/, \"id-2\"),\n        \"慢歌连版\": MY_URL.replace(/id-1/, \"id-5\"),\n        \"纯音乐车载\": MY_URL.replace(/id-1/, \"id-7\"),\n        \"交谊舞曲\": MY_URL.replace(/id-1/, \"id-6\")\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    true_url = tr_url.replace(/1\\.html/, page + '.html');\n\n\n    大类 = \"body&&.cat-a\";\n    拼接小类 = \"body&&.class-type\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    /*var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"bbtype/id\");\n    };*/\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&.pl-2\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            let pic = pdfh(li, \"img&&src\");\n            let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li, \"img&&src\") : \"hiker://images/home_bg\";\n            s.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \"p&&span&&Text\"),\n                img: img,\n                url: pd(li, \"a&&href\"),\n                col_type: \"card_pic_3_center\"\n            })\n        }\n        return s;\n    };\n\n    var 免嗅 = function(input) {\n        input = input.split(\"##\")[1];\n        var html = fetch(input);\n        var play = pd(html, \"#audio&&src\", input)\n        return play + \"#isMusic=true#;{Referer@https://www.72dj.net}\";\n\n    };","er":"","so":"    let html = fetch(ssurl);\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.pl-2\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            let title = pdfh(li, \"img&&alt\");\n            f.push({\n                title: title,\n                desc: pdfh(li, \"\"),\n                img: pdfh(li, \"img&&src\"),\n                url: pdfh(li, \"a&&href\"),\n                col_type: \"card_pic_3_center\"\n            });\n        };\n        return f;\n    };\n\n    var 免嗅 = function(input) {\n        input = input.split(\"##\")[1];\n        var html = fetch(input);\n        var play = pd(html, \"#audio&&src\", input)\n        return play + \"#isMusic=true#;{Referer@https://www.72dj.net}\";\n\n    };","time":"2024-07-11T23:15:41","off":"1","gs":"JS","fbhost":""},{"name":"爱听音乐&&随风","host":"http://www.2t58.com/playtype/index.html","sourl":"SURL/so/**/fypage.html","sy":"    标题1 = \"热门歌单\";\n    标题2 = \"热门歌手\";\n    标题3 = \"推荐视频\";\n    标题4 = \"歌曲飙升榜\";\n\n    列表1 = \".layui-row,1&&li:lt(9)\";\n    列表2 = \".layui-row,0&&li\";\n    列表3 = \".layui-row,2&&li\";\n    列表4 = \".layui-row,3&&li\";\n\n    html = fetch(MY_URL);\n\n    var 样式 = function(text) {\n        return /歌手|歌单/.test(text) ? \"card_pic_3_center\" : /飙升/.test(text) ? \"text_1\" : \"movie_2\";\n    };\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \".name&&Text\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \"a&&title\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n\n    var 免嗅 = function(input) {\n        if (/song/.test(input)) {\n            var host = getHome(input); //MY_HOME.split('#')[0];\n            var id = input.match(/\\/song\\/([^\\/]+)\\.html/)[1]\n            var play = host + '/js/play.php';\n            var json = JSON.parse(fetch(play, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n                    \"Referer\": host\n                },\n                body: 'id=' + id + '&type=music',\n                method: 'POST',\n            })).url\n            var lrc = host + '/plug/down.php?ac=music&lk=lrc&id=' + id;\n            return JSON.stringify({\n                urls: [json],\n                lyric: lrc\n            });\n        } else\n        if (/video/.test(input)) {\n            var host = getHome(input);\n            var id = input.match(/\\/video\\/([^\\/]+)\\.html/)[1]\n            var play = host + \"/plug/down.php?ac=vplay&id=\" + id + \"&q=3000\" + \"#isVideo=true#;{Referer@\" + host + \"}\"\n            return play;\n        } else {\n            return $(input).rule(() => {\n                require(config.依赖);\n                erji()\n            });\n        };\n    };","fl":"    var 标题链接 = {\n        \"歌单\": MY_URL,\n        \"排行\": MY_URL.replace(/playtype\\/index/, \"list/top\"),\n        \"MV\": MY_URL.replace(/playtype\\/index/, \"mvlist/index\"),\n        \"歌手\": MY_URL.replace(/playtype\\/index/, \"singerlist/index/index/index/index\")\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    if (page == 1) {\n        true_url = tr_url;\n    } else {\n        true_url = tr_url.replace(/\\.html/, '/' + page + '.html');\n    };\n\n\n    大类 = \"body&&.ilingku_fl\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    /*var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"bbtype/id\");\n    };*/\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".layui-container,1&&ul&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            let pic = pdfh(li, \"img&&src\");\n            let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li, \"img&&src\") : \"hiker://images/home_bg\";\n            s.push({\n                title: pdfh(li, \".name&&Text\"),\n                desc: pdfh(li, \"a&&title\"),\n                img: img,\n                url: pd(li, \"a&&href\"),\n                col_type: getMyVar(\"Myfl\") == \"排行\" ? \"text_1\" : getMyVar(\"Myfl\") == \"MV\" ? \"movie_2\" : \"card_pic_3_center\"\n            })\n        }\n        return s;\n    };\n\n    if (getMyVar(\"Myfl\") == \"排行\") {\n        var 免嗅 = function(input) {\n            var host = getHome(input); //MY_HOME.split('#')[0];\n            var id = input.match(/\\/song\\/([^\\/]+)\\.html/)[1]\n            var play = host + '/js/play.php';\n            var json = JSON.parse(fetch(play, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n                    \"Referer\": host\n                },\n                body: 'id=' + id + '&type=music',\n                method: 'POST',\n            })).url\n            var lrc = host + '/plug/down.php?ac=music&lk=lrc&id=' + id;\n            return JSON.stringify({\n                urls: [json],\n                lyric: lrc\n            })\n        };\n    } else\n    if (getMyVar(\"Myfl\") == \"MV\") {\n        var 免嗅 = function(input) {\n            var host = getHome(input);\n            var id = input.match(/\\/video\\/([^\\/]+)\\.html/)[1]\n            var play = host + \"/plug/down.php?ac=vplay&id=\" + id + \"&q=3000\" + \"#isVideo=true#;{Referer@\" + host + \"}\"\n            return play\n        };\n    };","er":"    类型 = \".stui-pannel_bd&&p:matches(电影类别)&&Text\";\n    导演 = \".stui-content__detail&&p:matches(导演)&&Text\";\n    主演 = \".stui-content__detail&&p:matches(主演|演员)&&Text\";\n    简介 = \".info&&Text\";\n\n    线路 = \".col-lg-wide-75&&.playlist\";\n    线路名 = \"h3&&Text\";\n\n    列表 = \"body&&.play_list\";\n    子列表 = \"body&&li:not(.visible-xs)\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        return \"\";\n    };\n\n    var 免嗅 = function(input) {\n        var host = getHome(input);\n    var id = input.match(/\\/song\\/([^\\/]+)\\.html/)[1]\n    var play = host+'/js/play.php';\n    var json = JSON.parse(fetch(play,{\n           headers:{\n        \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n        \"Referer\": host\n                    },\n           body:'id='+id+'&type=music',\n    method: 'POST',\n})).url\n    var lrc = host+'/plug/down.php?ac=music&lk=lrc&id='+id;\n    return JSON.stringify({\n        urls: [json],\n        lyric: lrc\n    })\n    };","so":"    let html = fetch(ssurl);\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".play_list&&li\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            let title = pdfh(li, \".name&&Text\");\n            f.push({\n                title: title + \" - 歌曲\",\n                desc: pdfh(li, \"a&&title\"),\n                img: pdfh(li, \"\"),\n                url: pdfh(li, \".name&&a&&href\"),\n                col_type: \"text_1\"\n            });\n            let lis = pdfa(li, \"body&&a\");\n            lis.forEach((x) => {\n                let href = pdfh(x, \"a&&href\");\n                if (href.includes(\"/video/\")) {\n                    f.push({\n                        title: title + \" - MV\",\n                        desc: \"\",\n                        img: \"\",\n                        url: href,\n                        col_type: \"text_1\"\n                    });\n                }\n            });\n        };\n        return f;\n    };\n\n    var 免嗅 = function(input) {\n        if (/video/.test(input)) {\n            var host = getHome(input);\n            var id = input.match(/\\/video\\/([^\\/]+)\\.html/)[1]\n            var play = host + \"/plug/down.php?ac=vplay&id=\" + id + \"&q=3000\" + \"#isVideo=true#;{Referer@\" + host + \"}\"\n            return play;\n        } else {\n            var host = getHome(input);\n            var id = input.match(/\\/song\\/([^\\/]+)\\.html/)[1]\n            var play = host + '/js/play.php';\n            var json = JSON.parse(fetch(play, {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\",\n                    \"Referer\": host\n                },\n                body: 'id=' + id + '&type=music',\n                method: 'POST',\n            })).url\n            var lrc = host + '/plug/down.php?ac=music&lk=lrc&id=' + id;\n            return JSON.stringify({\n                urls: [json],\n                lyric: lrc\n            })\n        };\n    };","time":"2024-07-08T15:24:57","off":"1","gs":"JS","fbhost":""},{"name":"人人影视&&胡影","host":"https://www.rttks.com/rrtop/dianying.html","sourl":"https://www.rttks.com/rrcz**/page/fypage.html","sy":"https://www.rttks.com","fl":"","er":"","so":"","time":"2024-06-30 08:47:58","off":"1","gs":"HOST","fbhost":"","simplifiedName":"人人"},{"name":"素白白&&随风","host":"https://www.subaibaiys.com/movie_bt/movie_bt_series/guochandy","sourl":"https://www.subaibaiys.com/search?q=**","sy":"","fl":"","er":"","so":"","time":"2024-06-25 01:36:42","off":"1","gs":"HOST","fbhost":"","simplifiedName":"素白白"},{"name":"玄天悠久&&羽龑","host":"https://wap.7caa.com/list/1.html","sourl":"https://wap.7caa.com/search/-------------.html?wd=**&submit=","sy":"","fl":"","er":"","so":"","time":"2024-06-27 15:05:26","off":"1","gs":"HOST","fbhost":""},{"name":"来看点播&&羽龑","host":"https://lkvod.me/show/1-----------.html","sourl":"https://lkvod.me/nk/-------------.html?wd=**","sy":"","fl":"","er":"","so":"","time":"2024-06-27 14:37:12","off":"1","gs":"HOST","fbhost":""},{"name":"爱淘播&&羽龑","host":"https://www.itaob.net/vodshow/dianying.html","sourl":"https://www.itaob.net/vodsearch.html?wd=**","sy":"","fl":"","er":"","so":"","time":"2024-06-27 14:31:58","off":"1","gs":"HOST","fbhost":""},{"name":"蚂蚁&花呗","host":"https://www.anthh.com/vodshow/1.html","sourl":"https://www.anthh.com/vodsearch.html?wd=**","sy":"","fl":"","er":"","so":"","time":"2024-06-24 23:18:17","off":"1","gs":"HOST","fbhost":""},{"name":"旺旺&&莲新","host":"let html = fetch(\"https://m.emsdn.cn\");\nlet list = pdfa(html, \"body&&p:matches(wwgz)\");\n\nlet url = [];\nfor (let i of list) {\n      let j = pdfh(i, \"a&&Text\")\n            if (!j.startsWith('http')) {\n                url.push( 'https://' + j )\n            }\n    //console.log(url);\n};\n\nlet host = [];\nlet urls = url;\n\nfor (let i = 0; i < urls.length; i++) {\n    let Code = JSON.parse(fetch(urls[i], {\n    withStatusCode: true,\n    timeout: 5000\n})).statusCode;\n    if (Code == 200) {\nhost.push(urls[i] + \"/vod-type-id-1-pg-1.html\")\n        console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n        break;\n    };\n};\n//console.log(host[0]);\nreturn host[0]","sourl":"SURL/vod-search-pg-fypage-wd-**.html","sy":"    标题1 = \".item-title,0&&Text\";\n    标题2 = \".item-title,1&&Text\";\n    标题3 = \".item-title,2&&Text\";\n    标题4 = \".item-title,3&&Text\";\n    标题5 = \".item-title,4&&Text\";\n    //标题6 = \"h2,5&&Text\";\n\n    列表1 = \".mod,0&&ul:lt(4)\";\n    列表2 = \".mod,1&&li:lt(9)\";\n    列表3 = \".mod,2&&li:lt(9)\";\n    列表4 = \".mod,3&&li:lt(9)\";\n    列表5 = \".mod,4&&li:lt(9)\";\n    //列表6 = \".resize_list&&li&&a:lt(9)\";\n\n    html = fetch(MY_URL);\n    \n    var 样式 = function(title) {\n        return /今日/.test(title) ? \"movie_2\" : \"movie_3_marquee\";\n    };\n\n    var 列表显示 = function(list) {\n        \n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&src||data-src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&src||data-src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".sBottom&&Text\").replace(/\\d*\\.\\d*/,'') ? pdfh(li[i], \".sBottom&&Text\").replace(/\\d*\\.\\d*/,'') : pdfh(li[i], \".sBottom&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    ","fl":"电影_url = MY_URL;\r\n剧集_url = MY_URL.replace(/-id-1/, \"-id-2\");\r\n动漫_url = MY_URL.replace(/-id-1/, \"-id-4\");\r\n综艺_url = MY_URL.replace(/-id-1/, \"-id-5\");\n\nlet tr_url = getMyVar(\"Myurl.url\", MY_URL);\r\nif (/\\/?([\\w\\d]+|)-.*?-.*?-\\d*-.*?-\\d*(\\.html|\\/$)/.test(MY_URL)) {\r\n    tr_url = tr_url.replace(/-type-/, '-list-').replace(/pg-(\\d+).html/,'pg-' + page + '-order--by--class--year--letter--area--lang-.html');\r\n} \nif(tr_url) {\r\n\r true_url = tr_url.replace(/-pg-(\\d+)/,'-pg-' + page);\r\n}\r\n\r\n大类 = \"body&&.swiper-wrapper\";\r\n拼接小类 = \"body&&.con\";\r\n分类子 = \"body&&a\";\r\n\r\n大类名 = \"a&&Text\";\r\n大类链 = \"a&&href\";\r\n小类名 = \"a&&Text\";\r\n小类链 = \"a&&href\";\r\n\r\n\r\n\r\nhtml = fetch(true_url);\r\nconsole.log(true_url)\r\nvar 显示列表 = function(html) {\r\n    let list = pdfa(html, \"body&&.resize_list&&li\");\r\n    let s = [];\r\n    for (let i in list) {\r\n        let li = list[i];\n        \r\n        s.push({\r\n            title: pdfh(li, \"a&&title\"),\r\n            desc: pdfh(li, \".sBottom&&Text\").replace(/\\d*\\.\\d*/,'') ? pdfh(li, \".sBottom&&Text\").replace(/\\d*\\.\\d*/,'') : pdfh(li, \".sBottom&&Text\"),\r\n            img: pd(li, \"img&&src\"),\r\n            url: pd(li, \"a&&href\")\r\n        })\r\n    }\r\n    return s;\r\n};\r\n","er":"    类型 = \".d_z_y:matches(类型)&&a&&Text\";\n    导演 = \".d_z_y:matches(导演)&&a&&Text\";\n    主演 = \".d_z_y:matches(主演|演员)&&a&&Text\";\n    简介 = \"body&&.jjie&&Text\";\n\n    线路 = \"body&&.block_ku\";\n    线路名 = \".soybox&&Text\";\n\n    列表 = \"body&&.soyurl\";\n    子列表 = \"ul&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetchPC(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \"body&&.list_06&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".f_c&&Text\"),\n                img: pd(li, \"img&&src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        console.log(html);\n        return list;\n    };\n    \n   // var 免嗅 = function(input) {\n       // let html = fetch(input);\n       // return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n    //console.log(ssurl);\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.ulPicTxt&&li\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \".sTit&&Text\"),\n                desc: pdfh(li, \".sStyle&&Text\") +'   ' +pdfh(li, \".sDes,1&&Text\")+'\\n' +pdfh(li, \".sDes&&Text\"),\n                img: pdfh(li, \"img&&src\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-07-02T00:54:16","off":"1","gs":"JS","fbhost":"https://www.wwgz.cn/vod-type-id-1-pg-1.html"},{"name":"青苹果js&&逐风者","host":"https://www.miushuo.com/vodshow/1-----------.html","sourl":"https://www.miushuo.com/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h2:matches(影院)&&Text\";\n    标题2 = \"h2:matches(连续剧)&&Text\";\n    标题3 = \"h2:matches(综艺)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2:matches(福利)&&Text\";\n    \n\n    列表1 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表2 = \".module,2&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,4&&.tab-list&&a:lt(9)\";\n    列表5 = \".module,5&&.tab-list&&a:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"3\");\n    综艺_url = MY_URL.replace(/1/, \"4\");\n    短剧_url = MY_URL.replace(/1/, \"67\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodshow/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n    \n/*\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-content\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|更新|解说|赛事|福利|深夜|91|追剧))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype/g, \"vodshow/id\");\n    };\n*/\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&.module-page&&a:has(.module-item-note)\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \"body&&.module-tab-items-box\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.module-card-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-27 12:46:05","off":"1","gs":"JS","fbhost":"","simplifiedName":"青苹果js"},{"name":"星空&&AI","host":"https://www.nbhuiding.com/show/1-----------.html","sourl":"https://www.nbhuiding.com/search/**----------fypage---.html","sy":"https://www.nbhuiding.com/","fl":"","er":"","so":"","time":"2024-06-27 13:13:29","off":"1","gs":"HOST","fbhost":"","simplifiedName":"星空"},{"name":"iK234&&勇士","host":"https://www.kan234.com/list/1.html","sourl":"https://www.kan234.com/search/**----------fypage---.html","sy":"","fl":"","er":"","so":"","time":"2024-06-26 16:36:46","off":"1","gs":"HOST","fbhost":"","simplifiedName":"iK234"},{"name":"落攻阁js&&海阔小白","host":"https://www.lggys.com/show/dianying-----------.html","sourl":"https://www.lggys.com/search/**----------fypage---.html","sy":"    标题1 = \"h2:matches(电影)&&Text\";\n    标题2 = \"h2:matches(电视剧)&&Text\";\n    标题3 = \"h2:matches(综艺)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.module-main&&a:lt(9)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|更新))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype/g, \"vodshow\").replace('.html','-----------.html');\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-26 07:40:55","off":"1","gs":"JS","fbhost":"","simplifiedName":"落攻阁js"},{"name":"糖豆js&&佚名","host":"https://www.tdys.cc/show/dianying-----------.html","sourl":"https://www.tdys.cc/sousou/**----------fypage---.html","sy":"    标题1 = \"h2:matches(爱看)&&Text\";\n    标题2 = \"h2:matches(电影)&&Text\";\n    标题3 = \"h2:matches(剧集)&&Text\";\n    标题4 = \"h2:matches(综艺)&&Text\";\n    标题5 = \"h2:matches(动漫)&&Text\";\n    标题6 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.scroll-box&&a:lt(12)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(12)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(12)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(12)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(12)\";\n    列表6 = \".module,5&&.tab-list&&a:lt(12)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/dianying/, \"juji\");\n    动漫_url = MY_URL.replace(/dianying/, \"dongman\");\n    综艺_url = MY_URL.replace(/dianying/, \"zongyi\");\n    短剧_url = MY_URL.replace(/dianying/, \"duanju\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/type\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/show\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|更新|热搜|留言|解析))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"show\").replace('.html','-----------.html');\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.module-card-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-25 10:48:27","off":"1","gs":"JS","fbhost":"","simplifiedName":"糖豆js"},{"name":"达达龟&&勇士","host":"https://www.dadagui.me/vodtype/1.html","sourl":"https://www.dadagui.me/vodsearch/**----------fypage---.html","sy":"","fl":"","er":"","so":"","time":"2024-06-26 16:10:02","off":"1","gs":"HOST","fbhost":"","simplifiedName":"达达龟"},{"name":"星辰&&大大","host":"https://citytv.cc/tv/dianying/","sourl":"https://citytv.cc/search/**","sy":"","fl":"","er":"","so":"","time":"2024-06-25 07:59:11","off":"1","gs":"HOST","fbhost":"","simplifiedName":"星辰"},{"name":"臭蛋蛋&&勇士","host":"https://cddys.me/vodshow/1-----------.html","sourl":"https://cddys.me/vodsearch/**----------fypage---.html","sy":"","fl":"","er":"","so":"","time":"2024-06-26 16:20:04","off":"1","gs":"HOST","fbhost":"","simplifiedName":"臭蛋蛋"},{"name":"MuTeFun&&古月","host":"https://www.mutean.com/vodshow/20-----------.html","sourl":"https://www.mutean.com/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h2:matches(热映)&&Text\";\n    标题2 = \"h2:matches(日漫)&&Text\";\n    标题3 = \"h2:matches(美漫)&&Text\";\n    标题4 = \"h2:matches(特摄)&&Text\";\n    标题5 = \"h2:matches(日剧)&&Text\";\n\n    列表1 = \".module,1&&.module-item:lt(6)\";\n    列表2 = \".module,2&&.module-item:lt(9)\";\n    列表3 = \".module,3&&.module-item:lt(9)\";\n    列表4 = \".module,4&&.module-item:lt(9)\";\n    列表5 = \".module,6&&.module-item&&li:lt(9)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 = {\n        \"日漫\": MY_URL,\n        \"美漫\": MY_URL.replace(/20/, \"22\"),\n        \"特摄\": MY_URL.replace(/20/, \"23\"),\n        \"日剧\": MY_URL.replace(/20/, \"24\")\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.scroll-content\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a[href^=/vod]\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype/g, \"vodshow\").replace(/.html/,'-----------.html');\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \"#y-playList--span&&span\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body--.module-play-list&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var url = html.url\n    var from=html.from\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    if (/m2/.test(from)) {\n        var jx = MY_HOME+fetch(MY_HOME + '/static/player/' + html.from + '.js').match(/src=\"(.*?)'/)[1]+html.id+'&from='+from+'&url='+url\nlog(jx)\nreturn request(jx.replace('index','dp'), {\n            headers: {\n                'Referer': MY_URL\n            }\n        }).match(/\"url\": \"(.*?)\"/)[1]+\"#isVideo=true#\"\n\n    } else {\n        eval(request(MY_HOME + '/static/js/playerconfig.js'));\n    var jx = MacPlayerConfig.player_list[html.from].parse;\n    if (jx == '') {\n        jx = MacPlayerConfig.parse\n    }\nvar urll =jx+url\nlog(urll)\n                return request(urll, {\n                    headers: {\n                        'Referer': MY_URL\n                    }\n                }).match(/\"url\":\"(.*?)\"/)[1]+\"#isVideo=true#\"\n    }\n    }\n    ","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-29 17:53:57","off":"1","gs":"JS","fbhost":"","simplifiedName":"MuTeFun"},{"name":"臭蛋蛋js&&海阔小白","host":"https://cddys.me/vodshow/1-----------.html","sourl":"https://cddys.me/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h2:matches(电影)&&Text\";\n    标题2 = \"h2:matches(电视剧)&&Text\";\n    标题3 = \"h2:matches(综艺)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.module-main&&a:lt(9)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.mxprofoot\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|更新))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype/g, \"vodshow\").replace('.html','-----------.html');\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-28 20:23:21","off":"1","gs":"JS","fbhost":"","simplifiedName":"臭蛋蛋js"},{"name":"看客网js&&逐风者","host":"https://www.kanke.cc/Show/24-----------/","sourl":"https://www.kanke.cc/Search/-------------/?wd=**&submit=","sy":"    标题1 = \"h2:matches(热播)&&Text\";\n    标题2 = \"h2,1&&Text\";\n    标题3 = \"h2,3&&Text\";\n    标题4 = \"h2,5&&Text\";\n    标题5 = \"h2:matches(纪录)&&Text\";\n    \n\n    列表1 = \".hl-vod-list,0&&li:lt(4)\";\n    列表2 = \".hl-vod-list,1&&li:lt(9)\";\n    列表3 = \".hl-vod-list,2&&li:lt(9)\";\n    列表4 = \".hl-vod-list,3&&li:lt(9)\";\n    列表5 = \".hl-vod-list,4&&li:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"a&&data-original\") + '@Referer=';\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"a&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".remarks&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 = {\n        \"影库\": MY_URL,\n        \"剧库\": MY_URL.replace(/24/, \"1\"),\n        \"番剧\": MY_URL.replace(/24/, \"4\"),\n        \"综艺\": MY_URL.replace(/24/, \"20\"),\n        \"纪录\": MY_URL.replace(/24/, \"3\")\n    };\n    \n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/Type\\/(\\d+)\\.html/, 'Type/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    /*\n    大类 = \"body&&.hl-nav\";\n    拼接小类 = \"body&&.hl-filter-wrap\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|留言|最新|排行|资讯)):not(title\\=\\\"APP下载\\\")\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"Show/id\");\n    };\n\n*/\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".hl-vod-list&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".remarks&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".hl-full-box&&li:matches(类型)&&Text\";\n    导演 = \".hl-full-box&&li:matches(导演)&&Text\";\n    主演 = \".hl-full-box&&li:matches(主演|演员)&&Text\";\n    简介 = \".hl-content-hide&&.hl-content-text&&Text\";\n\n    线路 = \"body&&.hl-plays-from&&a\";\n    线路名 = \"Text\";\n\n    列表 = \"body&&.hl-plays-list\";\n    子列表 = \"body&&li\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".hl-art-list&&li:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"span&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        \n        var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var url = html.url\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    if (/m3u8|mp4/.test(url)) {\n        \n        return url\n    } else {\nvar jx = fetch(MY_HOME + '/static/player/' + html.from + '.js').match(/src=\"(.*?)'/)[1]\n                \n\n\n      /* function getrandom(str) {\n            randStr = str.substring(0, 8);\n            string = str.substring(8, str.length);\n            substr = window0.atob(string);\n            return decodeURIComponent(substr.substring(8, substr.length - 8))\n        }\n     \n        eval(request(jxx+ url, {\n        headers: {\n            'Referer': MY_URL\n        }\n    }).match(/var config = {[\\s\\S]*?}/)[0]);\n     var urll=config.url;\n   */\n \n eval(request(jx.replace('index', 'ec') + url, {\n                    headers: {\n                        'Referer': MY_URL\n                    }\n                }).match(/let ConFig.*}/)[0])\n                eval(getCryptoJS())\n                return CryptoJS.enc.Utf8.stringify(CryptoJS.AES.decrypt(ConFig.url, CryptoJS.enc.Utf8.parse('2890' + ConFig.config.uid + 'tB959C'), {\n                    iv: CryptoJS.enc.Utf8.parse('2F131BE91247866E'),\n                    mode: CryptoJS.mode.CBC,\n                    padding: CryptoJS.pad.Pkcs7\n                })) + '#isVideo=true#'\n    \n\n   /*if (/erting.net/.test(urll)) {\n    \n   var video= JSON.parse(request(urll,{redirect:false, withHeaders:true})).headers.location[0]\n return video + \"#isVideo=true#\"\n    \n} else\n{\nreturn urll+ \"#isVideo=true#\"\n}\n */  \n   }\n\n\n    }","so":"    //搜索链接为ssurl\n    html = fetch(ssurl);\n\n    let 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.hl-one-list&&li\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".remarks&&Text\"),\n                img: pdfh(li, \"a&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-28 20:22:53","off":"1","gs":"JS","fbhost":"","simplifiedName":"看客网js"},{"name":"南柯－饭","host":"https://nkdyw.cc/type/1.html","sourl":"https://nkdyw.cc/type/1.html","sy":"","fl":"","er":"","so":"","time":"2024-06-27 15:22:08","off":"1","gs":"HOST","fbhost":"","simplifiedName":"南柯－饭"},{"name":"老王&&AI","host":"https://www.laowang.co/vodshow/1-----------.html","sourl":"https://www.laowang.co/vodsearch/**----------fypage---.html","sy":"","fl":"","er":"","so":"","time":"2024-06-27 12:52:23","off":"1","gs":"HOST","fbhost":"","simplifiedName":"老王"},{"name":"哔嘀影视&&莲新","host":"let host=\"https://www.bdys.me\";\nlet url = \"https://www.yjys02.com/s/all\";\nreturn url;","sourl":"SURL/search/**/fypage","sy":"    标题1 = \".ribbon-start&&Text\";\n    标题2 = \"h2:matches(最新电影)&&Text\";\n    标题3 = \"h2:matches(最新剧集)&&Text\";\n    标题4 = \"h2:matches(国产剧集)&&Text\";\n    标题5 = \"h2:matches(港台剧集)&&Text\";\n    标题6 = \"h2:matches(动漫)&&Text\";\n\n    列表1 = \".carousel-inner&&a:lt(4)\";\n    列表2 = \".container,0&&.col-4:lt(9)\";\n    列表3 = \".container,1&&.col-4:lt(9)\";\n    列表4 = \".container,2&&.col-4:lt(9)\";\n    列表5 = \".container,3&&.col-4:lt(9)\";\n    列表6 = \".container,4&&.col-4:lt(9)\";\n    \n    \n    \n    html = fetch(MY_URL);\n    \n        \n    var 样式 = function(title) {\n        return /热/.test(title) ? \"movie_2\" : \"movie_3_marquee\";\n    };\n    \n    \n    var 列表显示 = function(list) {\n        \n        let l = [];\n        for (let j of list) {\n            \n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-src||src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-src||src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"h3&&Text\").replace(/.*?《(.*?)》[^》]+/,'$1');\n                let url = pd(li[i], \"a&&href\");\n                let text = pdfh(li[i], \"span&&Text\");\n                if (text){\n                    desc = pdfh(li[i], \"span&&Text\");\n                } else {\n                   desc = pdfh(li[i], \"p&&Text\");\n                };\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n                \n            }\n            \n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}\n","fl":"    电影_url = MY_URL.replace(/\\/all/,'/all?type=0');\n    剧集_url = MY_URL.replace(/\\/all/,'/all?type=1');\n    动漫_url = MY_URL.replace(/\\/all/,'/donghua');\n    综艺_url = MY_URL.replace(/\\/all/,'/zongyi');\n    \n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    \n    \n    if (/\\?/g.test(tr_url)) {\n        if (/\\d+\\?/g.test(tr_url)) {\n            true_url = tr_url.replace(/\\d+\\?/g, page + '?')\n        } else {\n            true_url = tr_url.replace(/\\?/g, '/' + page + '?')\n        }\n    } else{\n        true_url = tr_url + '/' + page\n    }\n    \n    \n   \n\n\n    大类 = \"body&&.card&&dl\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(留言|更多|旧版|首页|国产电视剧))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    \n   \n    html = fetchPC(true_url);\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&.card-sm\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"h3&&Text\"),\n                desc: pdfh(li, \".span||p&&Text\"),\n                img: pd(li, \"img&&src||data-src\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        \n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}\n\n\n\n\n\n","er":"    类型 = \"body&&.mt-3&&p:matches(类型)&&a&&Text\";\n    导演 = \"body&&.mt-3&&p:matches(导演)&&a&&Text\";\n    主演 = \"body&&.mt-3&&p:matches(主演|演员)&&a&&Text\";\n    简介 = \"body&&#synopsis&&.card-body&&Text\";\n\n    线路 = \"body&&.mt-3:has(:matches(播放列表|下载地址|种子下载))\";\n    线路名 = \"h3&&Text\";\n\n    列表 = \"body&&#play-list||#download-list||#torrent-list\";\n    子列表 = \"body&&a||tr||li,0\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n    \n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \"body&&.card-sm:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"h4&&Text\"),\n                desc: pdfh(li, \"span||p&&Text\"),\n                img: pd(li, \"img&&src||data-src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n   var 免嗅 = function(input) {\n        \n     let html=request(input)\nlet pid=html.match(/var pid = (\\d+);/)[1]\n\neval(getCryptoJS())\nvar t = new Date().getTime();\n   key = CryptoJS.enc.Utf8.parse(md5(pid + \"-\" + t).substring(0, 16));\nlet encrypted = CryptoJS.AES.encrypt(pid + \"-\" + t, key, {\n  mode: CryptoJS.mode.ECB,\n  padding: CryptoJS.pad.Pkcs7\n});\nlet sg = encrypted.ciphertext.toString(CryptoJS.enc.Hex).toUpperCase();\nlet lines = MY_HOME + '/lines?t=' + t + '&sg=' + sg + '&pid=' + pid;\n let  play = JSON.parse(request(lines)).data.url3.split(',');\nconsole.log(play);\nreturn play+\"#isVideo=true#\"\n        \n        \n    }\n    \n    \n\n","so":"    //搜索链接为ssurl\n    let htm = fetch(ssurl);\n    if (/验证/.test(htm)) {\n    let c = getVar(\"cecidy\", \"\");\nif (c != \"\") {\n    setItem(MY_HOME, c);\n    clearVar(\"cecidy\");\n}\n//clearItem(MY_HOME)\nvar cookie = getItem(MY_HOME, \"\")\n\nlet headers = {\n    \"Cookie\": cookie,\n    \"User-Agent\": MOBILE_UA,\n};\n//log(cookie)\nMY_URL = ssurl;\n    html = fetch(MY_URL, {\n    headers: headers,\n});\n\nif (html.includes(\"验证码\")) {\n    d.push({\n        title: \"人机验证\",\n        col_type: \"text_center_1\",\n        url: MY_URL + $(\"\").rule(() => {\n            var d = [];\n            d.push({\n                title: \"\",\n                url: MY_URL,\n                col_type: \"x5_webview_single\",\n                desc: \"float&&100%\",\n                extra: {\n                    ua: MOBILE_UA,\n                    js: $.toString(() => {\n                        function check() {\n                            let c = fba.getCookie(location.href);\n                            let nodes = document.querySelectorAll('.row.row-0');\n\n                            if (nodes && nodes.length > 0 && c) {\n                                fba.putVar(\"cecidy\", c);\n                                fba.log(c)\n                                fba.parseLazyRule($$$().lazyRule(() => {\n                                    back();\n                                }));\n                            } else {\n                                setTimeout(check, 250);\n                            }\n                        }\n                        check();\n                    })\n                }\n            })\n            setResult(d);\n        })\n    })\n}\n} else {\n    html = htm;\n};\n        //console.log(html);\n    var 搜索列表 = function(html) {\n        console.log(html);\n        let list = pdfa(html, \"body&&.row.row-0\");\n        \n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \".alert-title&&title\"),\n                desc: pdfh(li, \".card-body&&p,0&&Text\")+'\\n'+pdfh(li, \".card-body&&p,1&&Text\")+'\\n'+pdfh(li, \".card-body&&p,2&&Text\")+'\\n'+pdfh(li, \".card-body&&p,3&&Text\"),\n                img: pdfh(li, \"img&&src\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}\n    \n    \n","time":"2024-07-12T17:47:02","off":"1","gs":"JS","fbhost":"https://www.yjys02.com/s/all","ttl":""},{"name":"[优]麻雀视频&&随风","host":"let html = fetch(\"https://www.mqtv.one/\");\nlet list = pdfa(html, \"#leo-pan-li&&li\");\nlet url = [];\nfor (let i of list) {\n    url.push(pd(i, \"a&&href\"))\n};\n\nlet host = [];\nlet urls = url;\nfor (let i = 0; i < urls.length; i++) {\n    let Code = JSON.parse(fetch(urls[i], {\n    withStatusCode: true,\n    timeout: 5000\n})).statusCode;\n    if (Code == 200) {\nhost.push(urls[i] + \"libs/VodList.api.php?type=movie&rank=rankhot&cat=&year=&area=&page=1\")\n        console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n        break;\n    };\n};\nreturn host[0]","sourl":"SURL/libs/VodList.api.php?search=**","sy":"*","fl":"    var 标题链接 = {\n        \"电影\": MY_URL,\n        \"电视\": MY_URL.replace(/movie/, \"tv\"),\n        \"综艺\": MY_URL.replace(/movie/, \"va\"),\n        \"动漫\": MY_URL.replace(/movie/, \"ct\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    true_url = tr_url.replace(/page\\=1/, 'page=' + page);\n    //log(true_url);\n\n    /*\n        大类 = \"body&&.nav_row:gt(0)\";\n        拼接小类 = \".list_filter&&li\";\n        分类子 = \"body&&a\";\n\n        大类名 = \"a&&Text\";\n        大类链 = \"a&&href\";\n        小类名 = \"a&&Text\";\n        小类链 = \"a&&href\";\n     */\n    html = JSON.parse(fetch(true_url)).data || [];\n\n    var 显示列表 = function(html) {\n        let list = html;\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            let cid = li.url.match(/.*\\/(\\d+)/)[1];\n            s.push({\n                title: li.title,\n                desc: li.remark,\n                img: li.img,\n                url: getHome(MY_URL) + \"/libs/VodInfo.api.php?ctid=\" + cid\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    html = JSON.parse(fetch(MY_URL)).data || [];\n    类型 = html.area + \" / \" + html.year;\n    导演 = html.director;\n    主演 = html.actor;\n    简介 = html.des;\n\n    线路 = html.playinfo;\n    线路名 = function(title) {\n        return title.cnsite;\n    };\n\n    列表 = html.playinfo;\n\n    子列表 = function(title) {\n        return title.player;\n    };\n\n    选集名 = function(title) {\n        return title.no;\n    };\n\n\n\n    let api = \"https://\" + html.playapi[0].url.replace(/https/, \"\").replace(/\\:/, \"\").replace(/\\/\\//, \"\");\n    选集链 = function(title) {\n        return api + title.url;\n    }\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n\n        return \"\";\n    };\n    \n    var 免嗅 = function(input) {\n        \n        log(input)\n        \n        eval(getCryptoJS())\n        function decrypt(input) {\n            const sortByKey = (key, arr, callback) => {\n                let f = (a, b) => callback(a[key], b[key]);\n                return arr.sort(f);\n            }\n            var html = request(input, {\n        headers: {\n            'Referer': input\n        }\n    })\n            eval(html.match(/var config = {[\\s\\S]*?}/)[0]+'}')\n            var _pr = pdfh(html, \"meta[name=\\\"viewport\\\"]&&id\").replace(\"now_\", \"\");\n            var _pu = pdfh(html, \"meta[charset=\\\"UTF-8\\\"]&&id\").replace(\"now_\", \"\");\n            let _puArr = [],\n                _newArr = [],\n                _code = '';\n            for (var i = 0; i < _pu.length; i++) {\n                _puArr.push({\n                    'id': _pu[i],\n                    'text': _pr[i]\n                });\n            }\n            _newArr = sortByKey(\"id\", _puArr, (a, b) => a - b);\n            for (var i = 0; i < _newArr.length; i++) {\n                _code += _newArr[i]['text'];\n            }\n            let vkey = CryptoJS.MD5(_code + \"lemon\").toString();\n            let key = CryptoJS.enc.Utf8.parse(vkey.substring(16));\n            let iv = CryptoJS.enc.Utf8.parse(vkey.substring(0, 16));\n            let decrypted = CryptoJS.AES.decrypt(config.url, key, {\n                iv: iv,\n                mode: CryptoJS.mode.CBC,\n                padding: CryptoJS.pad.Pkcs7\n            });\n            return decrypted.toString(CryptoJS.enc.Utf8);\n        }\n\n        var play = decrypt(input)\n\nreturn play+\"#isVideo=true#\"\n\n\n        \n        }","so":"    let html = JSON.parse(fetch(ssurl));\n\n    var 搜索列表 = function(html) {\n        let list = html.data.vod_all[0].show || [];\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            let cid = li.url.match(/.*\\/(\\d+)/)[1];\n            f.push({\n                title: li.title + \"\\n‘‘’’<small>\" + li.vodtype + \"/\" + li.areas + \"/\" + li.years + \"</small>\",\n                desc: li.remark + \"\\n\" + li.actors + \"\\n\" + li.cont,\n                img: li.img,\n                url: getHome(ssurl) + \"/libs/VodInfo.api.php?ctid=\" + cid\n            })\n        };\n        return f;\n    };","time":"2024-07-09T23:43:21","off":"1","gs":"JS","fbhost":"https://mqtv.cc/libs/VodList.api.php?type=movie&rank=rankhot&cat=&year=&area=&page=1"},{"name":"路漫漫&&儒释道","host":"let html = fetch(\"https://lm.qg50.com/\");\n\nlet list = pdfa(html, \".list&&li\");\nlet url = [];\nfor (let i of list) {\n    url.push(pd(i, \"a&&href\"))\n};\nlet host = [];\nlet urls = url;\nfor (let i = 0; i < urls.length; i++) {\n    let Code = JSON.parse(fetch(urls[i], {\n    withStatusCode: true,\n    timeout: 5000\n})).statusCode;\n    if (Code == 200) {\nhost.push(urls[i] + \"/vod/show/id/1.html\")\n        console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n        break;\n    };\n};\n\nreturn host[0]\n\n","sourl":"SURL/vod/search/page/fypage/wd/**.html","sy":"    标题1 = \"h2:matches(精选推荐)&&Text\";\n    标题2 = \"h2:matches(最近更新)&&Text\";\n    标题3 = \"h2:matches(热门影片)&&Text\";\n    标题4 = \"h2:matches(动画电影)&&Text\";\n    \n\n    列表1 = \".py-3&&.item:lt(4)\";\n    列表2 = \".pb-3,3&&.row&&.col-6:lt(6)\";\n    列表3 = \".pb-3,6&&.row&&.col-6:lt(6)\";\n    列表4 = \".pb-3,7&&.row&&.col-6:lt(6)\";\n    \n\n    html = fetch(MY_URL);\n   \n   var 样式 = function(title) {\n        return /精选/.test(title) ? \"movie_2\" : \"movie_2\";\n    };\n    \n    var 列表显示 = function(list) {\n     \n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pdfh(li[i], \"img&&data-src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \".title&&Text\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".label&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n                console.log(pic);\n            }\n            \n            l.push(lists);\n        };\n        return l;\n    };\n    ","fl":"     var 标题链接 = {\n        \"番剧\": MY_URL,\n        \"剧场\": MY_URL.replace(/\\/1\\.html/, \"/2.html\"),\n        \"热门影片\": MY_URL.replace(/\\/vod\\/show\\/id\\/1\\.html/, \"/label/hot.html\"),\n        \"新番时间表\": MY_URL.replace(/\\/vod\\/show\\/id\\/1\\.html/, \"/label/week.html\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    console.log(tr_url);\n    if (/\\/show/.test(tr_url)) {\n        true_url = tr_url.replace(/\\/page\\/(\\d+)/, '/page/'+page).replace(/\\/id\\/(\\d+)/, '/id/$1/page/' +page);\n    }else if(/\\/label/.test(tr_url)){\n        true_url = tr_url.replace(/\\/page\\/(\\d+)/,'/page/'+page).replace(/\\/label\\/(\\w+)/, '/label/$1/page/' +page);\n    }\nif(/hot|new/.test(true_url)){\n    \n}else if(/week/.test(true_url)){\n    大类 = \"body&&.sort-nav\";\n    分类子 = \"body&&a\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n}else{\n    大类 = \"body&&.app-nav&&.container\";\n    拼接小类 = \"body&&.sort-nav\";\n    分类子 = \"body&&a:not(a:has(.h3-md)):not(:matches(专题|番剧|💡|热门|新番|发布))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n}\n    var 大类链替换 = function(text) {\n        const classes = {\n            \"/dongman.html\" : \"/id/1.html\",\n            \"/ribendongman.html\" : \"/id/6.html\",\n            \"/guochandongman.html\" : \"/id/7.html\",\n            \"/oumeidongman.html\" : \"/id/8.html\",\n            \"/ribendonghuadianying.html\" : \"/id/3.html\",\n            \"/guochandonghuadianying.html\" : \"/id/4.html\",\n            \"/oumeidonghuadianying\" : \"/id/5.html\",\n            \"/dianying.html\" : \"/id/2.html\"\n        };\n        text_1 = text.replace(/\\/type/,\"/vod/show\");\n        result = text_1.replace(/\\/\\w+\\.html/g, (match) => classes[match] || match);\n        return result;\n    };\n    console.log(true_url);\n    html = fetch(true_url);\n    \n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&div.video-img-box\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"h6.title&&Text\"),\n                desc: pdfh(li, \".label&&Text\"),\n                img: pd(li, \"img&&data-src\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}\n   ","er":"    类型 = \".video-info-aux&&a&&Text\";\n    导演 = \".video-info-items:matches(导演)&&.video-info-actor&&Text\";\n    主演 = \".video-info-items:matches(主演|演员)&&.video-info-actor&&Text\";\n    简介 = \".video-info-content&&Text\";\n\n    线路 = \"body&&.module-tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".col&&.gutter-20&&.col-6:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \".title&&Text\"),\n                desc: pdfh(li, \".label&&Text\"),\n                img: pd(li, \"img&&data-src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n  var 免嗅 = function(input) {\nvar html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var url = html.url\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    if (/\\.mp4|\\.m3u8|\\.flv/.test(url)) {\n        return url.split('&')[0];\n        }\n         \nvar json = JSON.parse(apiHtml);\n        if (json.code == 200) {\n            require(\"https://disdk.oss-cn-shenzhen.aliyuncs.com/play/js/decode.js\");\n            playUrl = getVideoInfo(json.url);\n            //log(playUrl)\n            return toUrl(playUrl);\n        } \n    }","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&div.video-img-box\");\n        console.log(list);\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"h6.title&&Text\"),\n                desc: pdfh(li, \".label&&Text\"),\n                img: pd(li, \"img&&data-src\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}\n    \n    ","time":"2024-07-09T10:59:17","off":"1","gs":"JS","fbhost":"https://m.lmm52.com/vod/show/id/1.html"},{"name":"大师兄影视&&莲新","host":"https://dsxys.pro/vodshow/1-----------.html","sourl":"SURL/sb/kemksmaksdl7nhZe3c1**-/page/fypage.html","sy":"    标题1 = \"h2:matches(电影)&&Text\";\n    标题2 = \"h2:matches(连续剧)&&Text\";\n    标题3 = \"h2:matches(动漫)&&Text\";\n    标题4 = \"h2:matches(综艺)&&Text\";\n    \n\n    列表1 = \".module,0&&.tab-list&&a:lt(9)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,2&&.tab-list&&a:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n         \n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/\\/1-/, \"/2-\");\n    动漫_url = MY_URL.replace(/\\/1-/, \"/4-\");\n    综艺_url = MY_URL.replace(/\\/1-/, \"/3-\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    \n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    }else \n    if(/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; \n     //log(true_url);\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type\\/(\\d+)/, \"vodshow/$1-----------\");\n    };\n    \n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|今日|热搜|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    html = fetch(true_url);\n    console.log(true_url);\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL.replace(/\\/p/,'/v'));\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        \n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        \n        var html=JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n        var url=html.url;\n        if(html.encrypt=='1'){\n            url=unescape(url)\n        }else if(html.encrypt=='2'){\n            url=unescape(base64Decode(url))\n            }\n        if(/m3u8|mp4/.test(url)){\n                video=url\n                }else{video}\n        return video;\n    }","so":"    let html = fetch(ssurl);\n    console.log(ssurl);\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\") + '\\n'+pdfh(li, \".module-info-item,0&&Text\")+ '\\n'+pdfh(li, \".module-info-item,1&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        \n        return f;\n    };","time":"2024-07-08T14:33:45","off":"1","gs":"JS","fbhost":""},{"name":"动漫84&&羽龑","host":"https://dm84.tv/list-1.html","sourl":"https://dm84.tv/s----------.html?wd=**","sy":"\n    标题1 = \"h3:matches(热播动漫)&&Text\";\n    标题2 = \"h3:matches(国产动漫)&&Text\";\n    标题3 = \"h3:matches(日本动漫)&&Text\";\n    标题4 = \"h3:matches(欧美动漫)&&Text\";\n    标题5 = \"h3:matches(动漫电影)&&Text\";\n\n    列表1 = \".v_list,0&&li:lt(15)\";\n    列表2 = \".v_list,1&&li:lt(15)\";\n    列表3 = \".v_list,3&&li:lt(15)\";\n    列表4 = \".v_list,2&&li:lt(15)\";\n    列表5 = \".v_list,4&&li:lt(15)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let img = pdfh(li[i], \"a&&data-bg\");\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".desc&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"var 标题链接 ={\n    电影_url = MY_URL;\n    国产_url = MY_URL.replace(/4/, \"1\");\n    日本_url = MY_URL.replace(/4/, \"2\");\n    欧美_url = MY_URL.replace(/4/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.nav_row\";\n    拼接小类 = \".list_filter&&li\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    /*var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"list-id\");\n    };*/\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".v_list&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".desc&&Text\"),\n                img: pd(li, \"a&&data-bg\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \"\";\n    导演 = \"\";\n    主演 = \"\";\n    简介 = \"p:eq(-2)&&Text\";\n\n    线路 = \".tab_control&&li\";\n    线路名 = \"current&&Text\";\n\n    列表 = \".play_list\";\n    子列表 = \"ul&&li\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".v_list&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"h1&&Text\"),\n                desc: pdfh(li, \"\"),\n                img: pd(li, \"img&&src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.v_list&&li\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".desc&&Text\"),\n                img: pdfh(li, \"a&&data-bg\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };","time":"2024-07-08T15:58:47","off":"1","gs":"JS","fbhost":""},{"name":"动漫巴士","host":"let html = fetch(\"http://dm84.site/\");\nlet list = pdfa(html, \"body&&li:matches(网址)\");\nlet url = [];\nfor (let i of list) {\n    url.push(pd(i, \"a&&href\"))\n};\n\nlet host = [];\nlet urls = url;\nfor (let i = 0; i < urls.length; i++) {\n    let Code = JSON.parse(fetch(urls[i], {\n    withStatusCode: true,\n    timeout: 5000\n})).statusCode;\n    if (Code == 200) {\nhost.push(urls[i] + \"/list-1.html\")\n        console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n        break;\n    };\n};\nreturn host[0]","sourl":"SURL/s----------.html?wd=**","sy":"\n    标题1 = \"h3:matches(热)&&Text\";\n    标题2 = \"h3:matches(国)&&Text\";\n    标题3 = \"h3:matches(日)&&Text\";\n    标题4 = \"h3:matches(欧)&&Text\";\n    标题5 = \"h3:matches(影)&&Text\";\n\n    列表1 = \".v_list,0&&li:lt(9)\";\n    列表2 = \".v_list,1&&li:lt(9)\";\n    列表3 = \".v_list,2&&li:lt(9)\";\n    列表4 = \".v_list,3&&li:lt(9)\";\n    列表5 = \".v_list,4&&li:lt(9)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let img = pdfh(li[i], \"a&&data-bg\");\n                let title = pdfh(li[i], \".title&&Text\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".desc&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 = {\n        \"国漫\": MY_URL,\n        \"日漫\": MY_URL.replace(/1/, \"2\"),\n        \"欧美\": MY_URL.replace(/1/, \"3\"),\n        \"剧场\": MY_URL.replace(/1/, \"4\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.nav_row:gt(0)\";\n    拼接小类 = \".list_filter&&li\";\n    分类子 = \"body&&a\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n    \n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".v_list&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \".title&&Text\"),\n                desc: pdfh(li, \".desc&&Text\"),\n                img: pd(li, \"a&&data-bg\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".v_desc&&Text\";\n    导演 = \"p,1&&Text\";\n    主演 = \"p,2&&Text\";\n    简介 = \"p,-2&&Text\";\n\n    线路 = \".play_from&&li\";\n    线路名 = \"li&&Text\";\n\n    列表 = \".play_list\";\n    子列表 = \"ul&&li\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".v_list&&li:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \".name&&Text\"),\n                desc: pdfh(li, \".desc&&Text\"),\n                img: pdfh(li, \"a&&data-bg\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        function exhtml(html, name) {\n    var regex = new RegExp(name + '\\\\s*=\\\\s*\"([^\"]+)\"');\n    var match = html.match(regex);\n    return match ? match[1] : null;\n}\n        let html = fetch(input);\n        let src = pd(html,\"iframe&&src\")\n        let plays = fetch(src)\n        let url = exhtml(plays,'url')\n        let t = exhtml(plays,'r t')\n        let key = exhtml(plays,'key')\n        let act = exhtml(plays,'act')\n        let play = exhtml(plays,'play')\n        let video = JSON.parse(fetch(src.split('?')[0].replace(/index/,'api'),{\n            headers:{\n                \"User-Agent\":\"Mozilla/5.0 (Linux; Android 13; M2012K11AC Build/TKQ1.221114.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/126.0.6478.134 Mobile Safari/537.36\",\n                \"Referer\": src\n            },\n            body:'url='+url+'&t='+t+'&key='+key+'&act='+act+'&play='+play,\n            method:'POST'\n        })).url\n        return video;\n    }","so":"let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.v_list&&li\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".desc&&Text\"),\n                img: pdfh(li, \"a&&data-bg\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };","time":"2024-07-07T13:18:16","off":"1","gs":"JS","fbhost":"https://dm84.tv/list-1.html"},{"name":"闪雷电影院","host":"http://120.224.7.90:808/www/List.asp?classid=5000","sourl":"http://120.224.7.90:808/www/List.asp?classid=30&searchword=GBK**&page=fypage","sy":"    标题1 = \"最近更新\";\r\n    标题2 = \"电影\";\r\n    标题3 = \"电视剧\";\r\n    标题4 = \"综艺\";\r\n    标题5 = \"动漫\";\r\n\r\n    列表1 = \"body&&div,14&&li:lt(4)\";\r\n    列表2 = \"body&&div,25&&li:lt(9)\";\r\n    列表3 = \"body&&div,31&&li:lt(9)\";\r\n    列表4 = \"body&&div,37&&li:lt(9)\";\r\n    列表5 = \"body&&div,43&&li:lt(9)\";\r\n\r\n    html = fetch(MY_URL+'/www/index.asp', {headers: {\r\n            'Content-Type': 'charset=GBK'\r\n        }});\r\n\r\n    var 列表显示 = function(list) {\r\n        \r\n        let l = [];\r\n        for (let j of list) {\r\n            let li = j;\r\n            let lists = [];\r\n            for (let i in li) {\r\n                let pic = pdfh(li[i], \"img&&src\");\r\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&src\") : \"hiker://images/home_bg\";\r\n                let title = pdfh(li[i], \"a&&title\");\r\n                let url = MY_URL+'/www/'+pdfh(li[i], \"a&&href\");\r\n                let desc = pdfh(li[i], \"span,1&&Text\");\r\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n                //console.log(url);         \r\n            }\r\n            l.push(lists);\r\n        };\r\n        return l;\r\n    };\r\n    \r\n    //var 免嗅 = function(input) {\r\n    //转嗅探\r\n    //return \"嗅探\";\r\n    //let html = fetch(input);\r\n    //}","fl":"    var 标题链接 = {\n        \"电影\": MY_URL,\n        \"电视剧\": MY_URL.replace(/\\=5000/, \"=10\"),\n        \"综艺\": MY_URL.replace(/\\=5000/, \"=8\"),\n        \"动漫\": MY_URL.replace(/\\=5000/, \"=6\"),\n    };\n   \n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    console.log(tr_url);\n    \n    if (tr_url) {\n    true_url = tr_url+'&page='+page\n}\n    \n    \n   \n\n\n    大类 = \"body&&ul,0:4\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(首页|留言|求片|音乐))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    \n   \n    html = fetch(true_url, {headers: {\n            'Content-Type': 'charset=GBK'\n        }});\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"ul,5&&strong\");\n        \n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"span,1&&Text\"),\n                img: pd(li, \"img&&src\"),\n                url: pd(li, \"a&&href\")\n            })\n            \n        }\n        \n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \"ul,2&&li,2&&Text\";\n    导演 = \"ul,2&&li,4&&Text\";\n    主演 = \"ul,2&&li,1&&Text\";\n    简介 = \"body&&div:has(p),3&&Text\";\n\n    线路 = \"body&&div:has(p),2&&p\";\n    线路名 = \"body&&Text\";\n\n    列表 = \"body&&div:has(p),2&&ul\";\n    子列表 = \"body&&li\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&onclick\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL, {headers: {\n            'Content-Type': 'charset=GBK'\n        }});\n    var 推荐 = function(html) {\n        \n    };\n    \n    var 免嗅 = function(input) {\n        \n        var html = 'http://120.224.7.90:808/PlayMov.asp?ClassId='+input.split(\",\")[2]+'&video=2&exe=0&down=0&movNo='+input.split(\",\")[3]+'&vgver=undefined&ClientIP=120.224.7.90'\n    var url = request(html).match(/push\\('(.*?)'/)[1]\n        return url;\n    }","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl, {headers: {\n            'Content-Type': 'charset=GBK'\n        }})\n   //console.log(ssurl);\n   //console.log(html);\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"ul,5&&strong\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"span,1&&Text\"),\n                img: pd(li, \"img&&src\", ssurl),\n                url: pd(li, \"a&&href\", ssurl)\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}\n    \n    \n    \n","time":"2024-07-06T16:06:36","off":"1","gs":"JS","fbhost":""},{"name":"北川影视&&随风","host":"let html = fetch(\"https://www.bcyingshi.ink/fb/\");\nlet list = pdfa(html, \"body&&li:matches(官网)\");\nlet url = [];\nfor (let i of list) {\n    url.push(pd(i, \"a&&href\"))\n};\n\nlet host = [];\nlet urls = url;\nfor (let i = 0; i < urls.length; i++) {\n    let Code = JSON.parse(fetch(urls[i], {\n    withStatusCode: true,\n    timeout: 5000\n})).statusCode;\n    if (Code == 200) {\nhost.push(urls[i] + \"/vodshow/1-----------/\")\n        console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n        break;\n    };\n};\nreturn host[0]","sourl":"SURL/vodsearch/page/fypage/wd/**/","sy":"","fl":"","er":"","so":"","time":"2024-07-03T11:40:40","off":"1","gs":"HOST","fbhost":"http://www.bcys.xyz//vodshow/1-----------/"},{"name":"[漫]次元城&&莲新","host":"https://www.cycanime.com/show/20.html","sourl":"SURL/search/wd/**/page/fypage.html","sy":"    标题1 = \"h4:matches(热门)&&Text\";\n    标题2 = \"h4:matches(新番就)&&Text\";\n    标题3 = \"h4:matches(TV动画)&&Text\";\n    标题4 = \"h4:matches(剧场动画)&&Text\";\n    \n\n    列表1 = \".list-swiper,0&&.swiper-wrapper&&.public-list-box:lt(4)\";\n    列表2 = \".list-swiper,1&&.swiper-wrapper&&.public-list-box;lt(9)\";\n    列表3 = \".wow,2&&.border-box&&.public-list-box:lt(9)\";\n    列表4 = \".wow,3&&.border-box&&.public-list-box:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n         \n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|https|\\//.test(pic)) ? pd(li[i], \"img&&data-src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \".time-title&&title\");\n                let url = pd(li[i], \".time-title&&href\");\n                let desc = pdfh(li[i], \".public-list-subtitle&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n                \n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"","er":"    类型 = \".slide-info:matches(类型)&&a&&Text\";\n    导演 = \".search-show&&li:matches(导演：)&&Text\";\n    主演 = \".search-show&&li:matches(主演|演员)&&Text\";\n    简介 = \".check&&Text\";\n\n    线路 = \".nav-swiper&&a:not(:matches(下载))\";\n    线路名 = \"a--i&&Text\";\n\n    列表 = \"body&&.anthology-list-box\";\n    子列表 = \"ul&&li\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n    \n    var 推荐 = function(html) {\n \n        let list = [];\n        let contui = pdfa(html, \".border-box&&.public-list-box:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".public-list-prb&&Text\") ,\n                img: pd(li, \"img&&data-src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        console.log(list);\n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        MY_HOME = getHome(input);\n       var html = request(input)\r\n  \r\n    html = JSON.parse(html.match(/r player_.*?=(.*?)</)[1])\r\n    var url = html.url\r\n    if (html.encrypt == '1') {\r\n        url = unescape(url);\r\n    } else if (html.encrypt == '2') {\r\n        url = unescape(base64Decode(url));\r\n    }\r\n    \r\n        eval(request(MY_HOME + '/static/js/playerconfig.js'));\r\n        var jx = MacPlayerConfig.player_list[html.from].parse;\r\n        if (jx == '') {\r\n            jx = MacPlayerConfig.parse\r\n        }\r\nlog (jx)\r\n            \r\n\t  eval(getCryptoJS())\r\n\r\n        function decrypt(jx, url) {\r\n            const sortByKey = (key, arr, callback) => {\r\n                let f = (a, b) => callback(a[key], b[key]);\r\n                return arr.sort(f);\r\n            }\r\n            var html = request(jx + url, {\r\n        headers: {\r\n            \r\n        }\r\n    })\r\n            eval(html.match(/var config = {[\\s\\S]*?}/)[0]+'}')\r\n            var _pr = pdfh(html, \"meta[name=\\\"viewport\\\"]&&id\").replace(\"now_\", \"\");\r\n            var _pu = pdfh(html, \"meta[charset=\\\"UTF-8\\\"]&&id\").replace(\"now_\", \"\");\r\n            let _puArr = [],\r\n                _newArr = [],\r\n                _code = '';\r\n            for (var i = 0; i < _pu.length; i++) {\r\n                _puArr.push({\r\n                    'id': _pu[i],\r\n                    'text': _pr[i]\r\n                });\r\n            }\r\n            _newArr = sortByKey(\"id\", _puArr, (a, b) => a - b);\r\n            for (var i = 0; i < _newArr.length; i++) {\r\n                _code += _newArr[i]['text'];\r\n            }\r\n            let vkey = CryptoJS.MD5(_code + \"YLwJVbXw77pk2eOrAnFdBo2c3mWkLtodMni2wk81GCnP94ZltW\").toString();\r\n            let key = CryptoJS.enc.Utf8.parse(vkey.substring(16));\r\n            let iv = CryptoJS.enc.Utf8.parse(vkey.substring(0, 16));\r\n            let decrypted = CryptoJS.AES.decrypt(config.url, key, {\r\n                iv: iv,\r\n                mode: CryptoJS.mode.CBC,\r\n                padding: CryptoJS.pad.Pkcs7\r\n            });\r\n            return decrypted.toString(CryptoJS.enc.Utf8);\r\n        }\r\n\r\n        var play = decrypt(jx, url)\r\n\r\nreturn play+ \"#isVideo=true#\" + \"#.mp4;{Referer@https://www.cycanime.com/&&User-Agent@Mozilla/5.0}\"\n    }","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".wrap&&.public-list-box\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \".thumb-txt&&Text\"),\n                desc: pdfh(li, \".thumb-else&&Text\") + '\\n' + pdfh(li, \".thumb-blurb&&Text\"),\n                img: pdfh(li, \"img&&data-src\"),\n                url: pdfh(li, \".left&&a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-07-02T15:22:13","off":"1","gs":"JS","fbhost":""},{"name":"电影之家&&羽龑","host":"https://www.dyzj.me/index.php/vod/type/id/1.html","sourl":"https://www.dyzj.me/index.php/vod/search.html?wd=**&submit=","sy":"*","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n    短剧_url = MY_URL.replace(/1/, \"5\");\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.myui-screen__list\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"type/id\");\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&.myui-vodlist__box\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \".lazyload&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".desc:matches(分类)&&Text\";\n    导演 = \".text-muted:matches(导演)&&Text\";\n    主演 = \".text-muted:matches(主演|演员)&&Text\";\n    简介 = \".content:matches(简介)&&Text\";\n\n    线路 = \".nav-tabs&&li\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&.myui-content__list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \"body&&.myui-panel\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"h1&&Text\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.myui-vodlist__box\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pdfh(li, \".lazyload&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-07-01 13:39:33","off":"1","gs":"JS","fbhost":""},{"name":"电影大师&&羽龑","host":"https://dyds36.cyou/index.php/vod/show/id/1.html","sourl":"https://dyds36.cyou/index.php/vod/search.html?wd=**&submit=","sy":"","fl":"","er":"","so":"","time":"2024-06-27 15:21:36","off":"1","gs":"HOST","fbhost":""},{"name":"多多影视&&羽龑","host":"https://www.5ddys.com/show/1-----------.html","sourl":"","sy":"","fl":"","er":"","so":"","time":"2024-06-27 15:18:57","off":"1","gs":"HOST","fbhost":""},{"name":"天天看电影&&羽龑","host":"https://www.ttspt.com/list/dianying.html","sourl":"","sy":"*","fl":"","er":"","so":"","time":"2024-06-27 15:11:56","off":"1","gs":"HOST","fbhost":""},{"name":"免费影视&&羽龑","host":"http://120.46.69.145/index.php/vod/show/id/1.html","sourl":"http://120.46.69.145/index.php/vod/search.html?wd=**","sy":"","fl":"","er":"","so":"","time":"2024-06-27 15:08:31","off":"1","gs":"HOST","fbhost":""},{"name":"爱看影院&&羽龑","host":"https://www.92kyy.com/vodshow/1-----------.html","sourl":"https://www.92kyy.com/vod-s/-------------.html?wd=**","sy":"","fl":"","er":"","so":"","time":"2024-06-27 15:01:25","off":"1","gs":"HOST","fbhost":""},{"name":"七霞电影&&羽龑","host":"https://www.7xiady.cc/type/dianying/","sourl":"","sy":"*","fl":"","er":"","so":"","time":"2024-06-27 14:43:27","off":"1","gs":"HOST","fbhost":""},{"name":"PPX动漫&&羽龑","host":"https://ppxdm.com/v-show/1-----------.html","sourl":"https://ppxdm.com/search/-------------.html?wd=**","sy":"*","fl":"","er":"","so":"","time":"2024-06-27 13:24:17","off":"1","gs":"HOST","fbhost":""},{"name":"饭团电影&&羽龑","host":"http://www.fantuany.com/vodshow/1-----------.html","sourl":"http://www.fantuany.com/vodsearch/-------------.html?wd=**&submit=","sy":"    标题1 = \"h3:matches(热门)&&Text\";\n    标题2 = \"h3:matches(电影)&&Text\";\n    标题3 = \"h3:matches(剧集)&&Text\";\n    标题4 = \"h3:matches(动漫)&&Text\";\n    标题5 = \"h3:matches(综艺)&&Text\";\n\n    列表1 = \".myui-panel-box,0&&.myui-vodlist&&a:lt(4)\";\n    列表2 = \".myui-panel_bd,1&&.myui-vodlist&&a:lt(6)\";\n    列表3 = \".myui-panel_bd,2&&.myui-vodlist&&a:lt(6)\";\n    列表4 = \".myui-panel_bd,3&&.myui-vodlist&&a:lt(6)\";\n    列表5 = \".myui-panel_bd,4&&.myui-vodlist&&a:lt(6)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \".lazyload&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".pic-text&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.myui-header__menu&&li\";\n    拼接小类 = \"body&&.myui-screen__list\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"vodshow/id\");\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&.myui-vodlist__box\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pd(li, \".lazyload&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".text-muted:matches(分类)&&Text\";\n    导演 = \".text-muted:matches(导演)&&Text\";\n    主演 = \".text-muted:matches(主演|演员)&&Text\";\n    简介 = \".sketch&&Text\";\n\n    线路 = \".nav-tabs&&li\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&.myui-content__list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \"body&&.myui-panel\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"h1&&Text\"),\n                desc: pdfh(li, \".text-red&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.myui-vodlist__thumb\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".pic-text&&Text\"),\n                img: pdfh(li, \".lazyload&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-30 18:44:53","off":"1","gs":"JS","fbhost":""},{"name":"易看影视&&羽龑","host":"http://tv.ykzj6.cn/index.php/vod/show/id/1.html","sourl":"http://tv.ykzj6.cn/index.php/vod/search.html?wd=**","sy":"*","fl":"","er":"","so":"","time":"2024-06-27 12:32:26","off":"1","gs":"HOST","fbhost":""},{"name":"侠客影视&&多多","host":"http://xkys.link/index.php/vod/show/id/1.html","sourl":"http://xkys.link/index.php/vod/search/page/fypage/wd/**.html","sy":"    标题1 = \"h2:matches(热映)&&Text\";\n    标题2 = \"h2:matches(电影)&&Text\";\n    标题3 = \"h2:matches(电视)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2:matches(综艺)&&Text\";\n    标题6 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.scroll-box&&a:lt(12)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(12)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(12)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(12)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(12)\";\n    列表6 = \".module,5&&.tab-list&&a:lt(12)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"","er":"","so":"","time":"2024-06-30 14:50:43","off":"1","gs":"HOST","fbhost":""},{"name":"可可影视&&莲新","host":"let html = fetch(\"https://dl.keke13.com:51111/index.html\");\n\nlet list = pdfa(html, \"body&&.section-row-rSide\");\nlet url = [];\nfor (let i of list) {\n    url.push(pd(i, \"a&&data-clipboard-text||href\"))\n};\n\nlet host = [];\nlet urls = url;\nfor (let i = 0; i < urls.length; i++) {\n    let Code = JSON.parse(fetch(urls[i], {\n    withStatusCode: true,\n    timeout: 5000\n})).statusCode;\n    if (Code == 200) {\nhost.push(urls[i] + \"/show/1------.html\")\n        console.log(\"找到目标值: \" + Code + \", 循环停止。\");\n        break;\n    };\n};\n\nreturn host[0]\n\n","sourl":"SURL/search?k=**&page=fypage","sy":"    标题1 = \".section-header-title:matches(最近更新)&&Text\";\n    标题2 = \".section-header-title:matches(近期热门电影)&&Text\";\n    标题3 = \".section-header-title:matches(近期热门剧集)&&Text\";\n    标题4 = \".section-header-title:matches(近期热门日韩剧)&&Text\";\n    标题5 = \".section-header-title:matches(热播动漫)&&Text\";\n    标题6 = \".section-header-title:matches(热播综艺纪录)&&Text\";\n\n    列表1 = \".carousel-box&&.swiper-wrapper&&.swiper-slide:lt(4)\";\n    列表2 = \".section-box,0&&.module-box&&.module-item:lt(6)\";\n    列表3 = \".section-box,2&&.module-box&&.module-item:lt(6)\";\n    列表4 = \".section-box,4&&.module-box&&.module-item:lt(6)\";\n    列表5 = \".section-box,8&&.module-box&&.module-item:lt(6)\";\n    列表6 = \".section-box,9&&.module-box&&.module-item:lt(6)\";\n\n    html = fetch(MY_URL);\n    \n   var 样式 = function(title) {\n        return /电影|剧集|日韩剧|热播动漫|综艺纪录/.test(title) ? \"movie_3_marquee\" : \"movie_2\";\n    };\n   \n    var 列表显示 = function(list) {\n     \n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? \"https://vres.miximixi.me\"+pdfh(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \".v-item-title,1||.carousel-item-title&&Text\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".v-item-bottom||.carousel-item-tags&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n                console.log(pic);\n            }\n            \n            l.push(lists);\n        };\n        return l;\n    };\n    ","fl":"     var 标题链接 = {\n        \"电影\": MY_URL,\n        \"连续剧\": MY_URL.replace(/\\/1/, \"/2\"),\n        \"动漫\": MY_URL.replace(/\\/1/, \"/3\"),\n        \"综艺记录\": MY_URL.replace(/\\/1/, \"/4\"),\n        \"短剧\": MY_URL.replace(/\\/1/, \"/6\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    console.log(tr_url)\n    if (/\\/show/.test(MY_URL)) {\n        true_url = tr_url.replace(/-\\.html/, page + '.html').replace(/(\\d+)\\.html/, page + '.html');\n    } else\n    if (/\\/channel/.test(MY_URL)) {\n        true_url = tr_url.replace(/channel\\/(\\d+)\\.html/, 'show/$1/------' + page + '.html');\n    }; //log(true_url);\n\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.filter-row\";\n    分类子 = \"body&&a:not(:matches(今日|首页|Netflix|APP|专题|排行榜|留言))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/channel\\/(\\d+)\\.html/g, \"show/$1------.html\");\n    };\n    console.log(true_url);\n    html = fetch(true_url);\n    \n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-box&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \".v-item-title,1&&Text\"),\n                desc: pdfh(li, \".v-item-bottom&&Text\"),\n                img: \"https://vres.miximixi.me\"+pdfh(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".detail-tags&&Text\";\n    导演 = \".detail-info-row:matches(导演)&&Text\";\n    主演 = \".detail-info-row:matches(主演|演员)&&Text\";\n    简介 = \".detail-desc&&Text\";\n\n    线路 = \".episode-box-header&&.source-swiper-slide\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.episode-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-box&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \".v-item-title,1&&Text\"),\n                desc: pdfh(li, \".v-item-bottom&&Text\"),\n                img: \"https://vres.miximixi.me\"+pdfh(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \nvar 免嗅 = function(input) {\n        var url = request(input).match(/const playSource = \\{\\s*src: \"([^\"]*)\"/)[1]\n        return url\n    }","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.search-result-item\");\n        //console.log(list);\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \".title&&Text\"),\n                desc: pdfh(li, \".tags&&Text\") + '\\n' +pdfh(li, \".actors&&span&&Text\") + '\\n' +pdfh(li, \".desc&&Text\"),\n                img: \"https://vres.miximixi.me\"+pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-07-02T01:37:55","off":"1","gs":"JS","fbhost":"https://www.keke12.com:51111/show/1------.html"},{"name":"圣城影视&&随风","host":"https://sc1080.top/index.php/vod/show/id/1.html","sourl":"https://sc1080.top/index.php/vod/search/page/fypage/wd/**.html","sy":"","fl":"","er":"","so":"","time":"2024-06-27 14:20:06","off":"1","gs":"HOST","fbhost":"","simplifiedName":"圣城影视"},{"name":"胖虎影视&&海阔小白","host":"https://physvod.com/vodshow/1.html","sourl":"https://physvod.com/phsch/page/fypage/wd/**.html","sy":"","fl":"","er":"","so":"","time":"2024-06-26 16:43:05","off":"1","gs":"HOST","fbhost":"","simplifiedName":"胖虎影视"},{"name":"影视大全&&古月","host":"https://www.sdsrty.com/index.php/vod/type/id/1.html","sourl":"https://www.sdsrty.com/index.php/vod/search/page/fypage/wd/**.html","sy":"    标题1 = \"h2:matches(推荐)&&Text\";\n    标题2 = \"h2:matches(电视剧)&&Text\";\n    标题3 = \"h2:matches(电影)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2:matches(综艺)&&Text\";\n\n    列表1 = \".new-up-list,0&&li:lt(6)\";\n    列表2 = \".new-up-list,1&&li:lt(9)\";\n    列表3 = \".new-up-list,2&&li:lt(9)\";\n    列表4 = \".new-up-list,4&&li:lt(9)\";\n    列表5 = \".new-up-list,3&&li:lt(9)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"h5--span&&Text\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \"span&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.nav-tabs\";\n    拼接小类 = \"body&&.title\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|当前))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"show\");\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".new-up-list&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"h5--span&&Text\"),\n                desc: pdfh(li, \"span&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".info-wrap&&p:matches(类型)&&Text\";\n    导演 = \".info-wrap&&p:matches(导演)&&Text\";\n    主演 = \".info-wrap&&p:matches(主演|演员)&&Text\";\n    简介 = \".summary-con&&p:matches(简介)&&Text\";\n\n    线路 = \".nav-tabs&&a\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&.episodes-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".new-up-list&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"h5--span&&Text\"),\n                desc: pdfh(li, \"span&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".search-list&&li\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"h5&&Text\"),\n                desc: pdfh(li, \"p:matches(资源)&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-27 10:28:54","off":"1","gs":"JS","fbhost":"","simplifiedName":"影视大全"},{"name":"虾酱追剧js&&海阔小白","host":"https://www.xiajiangzj.top/vod/show/id/1.html","sourl":"https://www.xiajiangzj.top/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h2:matches(电影)&&Text\";\n    标题2 = \"h2:matches(电视剧)&&Text\";\n    标题3 = \"h2:matches(综艺)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.module-main&&a:lt(9)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|更新))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype/g, \"vodshow\").replace('.html','-----------.html');\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-27 06:13:45","off":"1","gs":"JS","fbhost":"","simplifiedName":"虾酱追剧js"},{"name":"悠云影视js&&海阔小白","host":"https://yoyys1.com/vodshow/1-----------.html","sourl":"https://yoyys1.com/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h2:matches(电影)&&Text\";\n    标题2 = \"h2:matches(电视剧)&&Text\";\n    标题3 = \"h2:matches(综艺)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.module-main&&a:lt(9)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|更新))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype/g, \"vodshow\").replace('.html','-----------.html');\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-26 07:11:42","off":"1","gs":"JS","fbhost":"","simplifiedName":"悠云影视js"},{"name":"剧爷爷js&&佚名","host":"https://www.juyeye.cc/vodshow/1-----------.html","sourl":"https://www.juyeye.cc/vodsearch/**----------fypage---.html","sy":"    标题1 = \"h2:matches(电影)&&Text\";\n    标题2 = \"h2:matches(电视剧)&&Text\";\n    标题3 = \"h2:matches(综艺)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.module-main&&a:lt(9)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"2\");\n    动漫_url = MY_URL.replace(/1/, \"4\");\n    综艺_url = MY_URL.replace(/1/, \"3\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|更新))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/vodtype/g, \"vodshow\").replace('.html','-----------.html');\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-25 23:59:50","off":"1","gs":"JS","fbhost":"","simplifiedName":"剧爷爷js"},{"name":"在线电影&&随风","host":"https://www.zaixiandianying8.com/vodshow/1-----------.html","sourl":"https://www.zaixiandianying8.com/vodsearch/**----------fypage---.html","sy":"","fl":"","er":"","so":"","time":"2024-06-21 15:40:30","fbhost":"","off":"1","gs":"HOST","simplifiedName":"在线电影"},{"name":"爱影视&&勇士","host":"https://aiyingshis.com/vodtype/6.html","sourl":"https://aiyingshis.com/vodsearch/page/fypage/wd/**.html","sy":"","fl":"","er":"","so":"","time":"2024-06-26 16:27:47","off":"1","gs":"HOST","fbhost":"","simplifiedName":"爱影视"},{"name":"干饭影视&&随风","host":"https://gfvod.com/vodshow/1-----------.html","sourl":"https://gfvod.com/vodsearch/**----------fypage---.html","sy":"","fl":"","er":"","so":"","time":"2024-06-24 23:22:25","off":"1","gs":"HOST","fbhost":"","simplifiedName":"干饭影视"},{"name":"次元城动画","host":"https://www.cycanime.com/show/20.html","sourl":"SURL/search/wd/**/page/fypage.html","sy":"    标题1 = \"h4:matches(热门)&&Text\";\n    标题2 = \"h4:matches(新番就)&&Text\";\n    标题3 = \"h4:matches(TV动画)&&Text\";\n    标题4 = \"h4:matches(剧场动画)&&Text\";\n    \n\n    列表1 = \".list-swiper,0&&.swiper-wrapper&&.public-list-box:lt(4)\";\n    列表2 = \".list-swiper,1&&.swiper-wrapper&&.public-list-box:lt(9)\";\n    列表3 = \".wow,2&&.border-box&&.public-list-box:lt(9)\";\n    列表4 = \".wow,3&&.border-box&&.public-list-box:lt(9)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n         \n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|https|\\//.test(pic)) ? pd(li[i], \"img&&data-src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \".time-title&&title\");\n                let url = pd(li[i], \".time-title&&href\");\n                let desc = pdfh(li[i], \".public-list-subtitle&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n                \n            }\n            //console.log(lists);\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 = {\n        \"TV动画\": MY_URL,\n        \"剧场\": MY_URL.replace(/20/, \"21\"),\n        \"4K专区\": MY_URL.replace(/20/, \"26\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    //console.log(tr_url);\n\n\n    大类 = \".ec-casc-list&&ul,0:1\";\n    拼接小类 = \"body&&.nav-swiper:gt(0)\";\n    分类子 = \"body&&li:not(:matches(资源|频道|版本))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n\n    var html = request(tr_url);\n\n    var 小类链替换 = function(text, li) {\n        return text.replace(/.*/, pdfh(li, \"li&&data-type\") + \"@@@\" + pdfh(li, \"li&&data-val\"))\n    };\n\n    var 显示列表 = function(html) {\n        type = pdfh(html, '#dataList&&data-type');\n        time = \"\" + Math.ceil(new Date().getTime() / 1000);\n        key = md5(\"DS\" + time + \"DCC147D11943AF75\");\n\n        array = JSON.parse(post(\"https://www.cycanime.com/index.php/api/vod\", {\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\",\n                \"User-Agent\": \"Mozilla/5.0 (Linux; Android 12; 2201122C Build/SKQ1.211006.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/95.0.4638.74 Mobile Safari/537.36\"\n            },\n            body: {\n                type: type,\n                page: page,\n                time: time,\n                key: key,\n                class: getMyVar('class', ''),\n                area: getMyVar('area', ''),\n                year: getMyVar('year', ''),\n                lang: getMyVar('lang', ''),\n                letter: getMyVar('letter', ''),\n            }\n        })).list;\n\n        let s = [];\n        for (let li of array) {\n            s.push({\n                title: li.vod_name,\n                desc: li.vod_remarks,\n                img: li.vod_pic.replace(/mac/, 'https'),\n                url: \"https://www.cycanime.com/bangumi/\" + li.vod_id + \".html\"\n            })\n        };\n        return s\n    };\n\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".slide-info:matches(类型)&&a&&Text\";\n    导演 = \".search-show&&li:matches(导演：)&&Text\";\n    主演 = \".search-show&&li:matches(主演|演员)&&Text\";\n    简介 = \".check&&Text\";\n\n    线路 = \".nav-swiper&&a:not(:matches(下载))\";\n    线路名 = \"a--i&&Text\";\n\n    列表 = \"body&&.anthology-list-box\";\n    子列表 = \"ul&&li\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n    \n    var 推荐 = function(html) {\n \n        let list = [];\n        let contui = pdfa(html, \".border-box&&.public-list-box:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".public-list-prb&&Text\") ,\n                img: pd(li, \"img&&data-src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        \n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        MY_HOME = getHome(input);\n       var html = request(input)\r\n  \r\n    html = JSON.parse(html.match(/r player_.*?=(.*?)</)[1])\r\n    var url = html.url\r\n    if (html.encrypt == '1') {\r\n        url = unescape(url);\r\n    } else if (html.encrypt == '2') {\r\n        url = unescape(base64Decode(url));\r\n    }\r\n    \r\n        eval(request(MY_HOME + '/static/js/playerconfig.js'));\r\n        var jx = MacPlayerConfig.player_list[html.from].parse;\r\n        if (jx == '') {\r\n            jx = MacPlayerConfig.parse\r\n        }\r\nlog (jx)\r\n            \r\n\t  eval(getCryptoJS())\r\n\r\n        function decrypt(jx, url) {\r\n            const sortByKey = (key, arr, callback) => {\r\n                let f = (a, b) => callback(a[key], b[key]);\r\n                return arr.sort(f);\r\n            }\r\n            var html = request(jx + url, {\r\n        headers: {\r\n            \r\n        }\r\n    })\r\n            eval(html.match(/var config = {[\\s\\S]*?}/)[0]+'}')\r\n            var _pr = pdfh(html, \"meta[name=\\\"viewport\\\"]&&id\").replace(\"now_\", \"\");\r\n            var _pu = pdfh(html, \"meta[charset=\\\"UTF-8\\\"]&&id\").replace(\"now_\", \"\");\r\n            let _puArr = [],\r\n                _newArr = [],\r\n                _code = '';\r\n            for (var i = 0; i < _pu.length; i++) {\r\n                _puArr.push({\r\n                    'id': _pu[i],\r\n                    'text': _pr[i]\r\n                });\r\n            }\r\n            _newArr = sortByKey(\"id\", _puArr, (a, b) => a - b);\r\n            for (var i = 0; i < _newArr.length; i++) {\r\n                _code += _newArr[i]['text'];\r\n            }\r\n            let vkey = CryptoJS.MD5(_code + \"YLwJVbXw77pk2eOrAnFdBo2c3mWkLtodMni2wk81GCnP94ZltW\").toString();\r\n            let key = CryptoJS.enc.Utf8.parse(vkey.substring(16));\r\n            let iv = CryptoJS.enc.Utf8.parse(vkey.substring(0, 16));\r\n            let decrypted = CryptoJS.AES.decrypt(config.url, key, {\r\n                iv: iv,\r\n                mode: CryptoJS.mode.CBC,\r\n                padding: CryptoJS.pad.Pkcs7\r\n            });\r\n            return decrypted.toString(CryptoJS.enc.Utf8);\r\n        }\r\n\r\n        var play = decrypt(jx, url)\r\n\r\nreturn play+ \"#isVideo=true#\" + \"#.mp4;{Referer@https://www.cycanime.com/&&User-Agent@Mozilla/5.0}\"\n    }","so":"    //搜索链接为ssurl\n    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".wrap&&.public-list-box\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \".thumb-txt&&Text\"),\n                desc: pdfh(li, \".thumb-else&&Text\") + '\\n' + pdfh(li, \".thumb-blurb&&Text\"),\n                img: pdfh(li, \"img&&data-src\"),\n                url: pdfh(li, \".left&&a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-28 14:29:04","off":"1","gs":"JS","fbhost":"","simplifiedName":"次元城动画"},{"name":"稀饭动漫&&古月","host":"https://dm1.xfdm.pro/show/1.html","sourl":"https://dm1.xfdm.pro/search/wd/**/page/fypage.html","sy":"    标题1 = \"h4:matches(推荐)&&Text\";\n    标题2 = \"h4:matches(新番)&&Text\";\n    标题3 = \"h4:matches(上架)&&Text\";\n    标题4 = \"h4:matches(每周)&&Text\";\n\n    列表1 = \".swiper-wrapper,-1&&.public-list-box:lt(6)\";\n    列表2 = \".border-box,0&&.public-list-box:lt(9)\";\n    列表3 = \".border-box,2&&.public-list-box:lt(9)\";\n    列表4 = \".swiper-wrapper,2&&.public-list-box:lt(9)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \".lazy1&&data-src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \".lazy1&&data-src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \"span,1&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 = {\n        \"TV动画\": MY_URL,\n        \"BD动画\": MY_URL.replace(/1/, \"2\"),\n        \"剧场版\": MY_URL.replace(/1/, \"3\"),\n        \"美漫\": MY_URL.replace(/1/, \"21\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n    //console.log(tr_url);\n\n\n    大类 = \".ec-casc-list&&ul,0:1\";\n    拼接小类 = \"body&&.nav-swiper:gt(0)\";\n    分类子 = \"body&&li:not(:matches(资源|频道|版本))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n\n    var html = request(tr_url);\n\n    var 小类链替换 = function(text, li) {\n        return text.replace(/.*/, pdfh(li, \"li&&data-type\") + \"@@@\" + pdfh(li, \"li&&data-val\"))\n    };\n\n    var 显示列表 = function(html) {\n        type = pdfh(html, '#dataList&&data-type');\n        time = \"\" + Math.ceil(new Date().getTime() / 1000);\n        key = md5(\"DS\" + time + \"DCC147D11943AF75\");\n\n        array = JSON.parse(post(\"https://dm1.xfdm.pro/index.php/api/vod\", {\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\",\n                \"User-Agent\": \"Mozilla/5.0 (Linux; Android 12; 2201122C Build/SKQ1.211006.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/95.0.4638.74 Mobile Safari/537.36\"\n            },\n            body: {\n                type: type,\n                page: page,\n                time: time,\n                key: key,\n                class: getMyVar('class', ''),\n                area: getMyVar('area', ''),\n                year: getMyVar('year', ''),\n                lang: getMyVar('lang', ''),\n                letter: getMyVar('letter', ''),\n            }\n        })).list;\n\n        let s = [];\n        for (let li of array) {\n            s.push({\n                title: li.vod_name,\n                desc: li.vod_remarks,\n                img: li.vod_pic.replace(/mac/, 'https'),\n                url: \"https://dm1.xfdm.pro/bangumi/\" + li.vod_id + \".html\"\n            })\n        };\n        return s\n    };\n\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".detail-info&&.slide-info:matches(类型)&&Text\";\n    导演 = \".detail-info&&.slide-info:matches(导演)&&Text\";\n    主演 = \".detail-info&&.slide-info:matches(主演|演员)&&Text\";\n    简介 = \"#height_limit&&Text\";\n\n    线路 = \".anthology-tab--span&&a\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&.anthology-list-play\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".border-box,1&&.public-list-box\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".public-list-prb&&Text\"),\n                img: pd(li, \".lazy1&&data-src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var url = html.url\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    \n        eval(request(MY_HOME + '/static/js/playerconfig.js'));\n            var jx = MacPlayerConfig.player_list[html.from].parse;\n            if (jx == '') {\n                jx = MacPlayerConfig.parse\n            }\n            \n\n                eval(request(jx.replace('index', 'ec') + url, {\n                    headers: {\n                        'Referer': MY_URL\n                    }\n                }).match(/let ConFig.*}/)[0])\n                eval(getCryptoJS())\n                return CryptoJS.enc.Utf8.stringify(CryptoJS.AES.decrypt(ConFig.url, CryptoJS.enc.Utf8.parse('2890' + ConFig.config.uid + 'tB959C'), {\n                    iv: CryptoJS.enc.Utf8.parse('2F131BE91247866E'),\n                    mode: CryptoJS.mode.CBC,\n                    padding: CryptoJS.pad.Pkcs7\n                })) + '#isVideo=true#'\n\n    }","so":"    let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".row-right&&.public-list-box\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \".thumb-txt&&Text\"),\n                desc: pdfh(li, \"span&&Text\"),\n                img: pdfh(li, \".lazy1&&data-src\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };","time":"2024-06-28 15:03:24","off":"1","gs":"JS","fbhost":"","simplifiedName":"稀饭动漫"},{"name":"555电影新&&随风","host":"https://wuflx.com/vodshow/1-----------.html","sourl":"https://wuflx.com/index.php/ajax/suggest?mid=fypage&wd=**&limit=18&timestamp=Time","sy":"","fl":"","er":"","so":"","time":"2024-06-26 20:11:28","off":"1","gs":"HOST","fbhost":"","simplifiedName":"555电影新"},{"name":"叮叮动漫&&古月","host":"https://dingdingdm.com/v-show/1-----------.html","sourl":"https://dingdingdm.com/search/**----------fypage---.html","sy":"    标题1 = \"h2:matches(推荐)&&Text\";\n    标题2 = \"h2:matches(电影)&&Text\";\n    标题3 = \"h2:matches(日本)&&Text\";\n    标题4 = \"h2:matches(国产)&&Text\";\n    标题5 = \"h2:matches(欧美)&&Text\";\n    标题6 = \"h2:matches(短剧)&&Text\";\n\n    列表1 = \".hl-vod-list,0&&li:lt(6)\";\n    列表2 = \".hl-vod-list,8&&li:lt(12)\";\n    列表3 = \".hl-vod-list,9&&li:lt(12)\";\n    列表4 = \".hl-vod-list,10&&li:lt(12)\";\n    列表5 = \".hl-vod-list,11&&li:lt(12)\";\n    列表6 = \".hl-vod-list,12&&li:lt(12)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"a&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"a&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \"span&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 = {\n        \"动漫电影\": MY_URL,\n        \"日本动漫\": MY_URL.replace(/1/, \"2\"),\n        \"国产动漫\": MY_URL.replace(/1/, \"3\"),\n        \"欧美动漫\": MY_URL.replace(/1/, \"4\"),\n        \"短剧\": MY_URL.replace(/1/, \"20\"),\n    };\n    \n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body--.hl-filter-list&&.hl-filter-list\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|留言|最新|排行))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/list\\/(\\d+).html/,'v-show\\/$1-----------.html')\n\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".hl-vod-list&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"hl-content-text&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".hl-text-muted&&p:matches(类型)&&Text\";\n    导演 = \".hl-text-muted&&p:matches(导演)&&Text\";\n    主演 = \".hl-text-muted&&p:matches(主演|演员)&&Text\";\n    简介 = \".hl-content-text&&Text\";\n\n    线路 = \".hl-tabs-swiper&&a\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&#hl-plays-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".hl-vod-list&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"span&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    var 免嗅 = function(input) {\n        MY_HOME = getHome(input);\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\n    var url = html.url\n    if (html.encrypt == '1') {\n        url = unescape(url);\n    } else if (html.encrypt == '2') {\n        url = unescape(base64Decode(url));\n    }\n    if (/m3u8/.test(url)) {\n        return url\n    } else {\n        var jx = fetch(MY_HOME + '/static/player/' + html.from + '.js').match(/src=\"(.*?)'/)[1]\nlog(jx)\n                eval(request(jx.replace('index', 'ec') + url, {\n                    \n                }).match(/let ConFig.*}/)[0])\n                eval(getCryptoJS())\n                return CryptoJS.enc.Utf8.stringify(CryptoJS.AES.decrypt(ConFig.url, CryptoJS.enc.Utf8.parse('2890' + ConFig.config.uid + 'tB959C'), {\n                    iv: CryptoJS.enc.Utf8.parse('2F131BE91247866E'),\n                    mode: CryptoJS.mode.CBC,\n                    padding: CryptoJS.pad.Pkcs7\n                })) + '#isVideo=true#'\n    }\n}\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"if (page == 1) {\n            ssurl = ssurl.replace(/\\d+---.html/,'---.html')\n        } \nlet html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.hl-list-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"span&&Text\"),\n                img: pdfh(li, \"a&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n    ","time":"2024-06-29 19:55:49","off":"1","gs":"JS","fbhost":"","simplifiedName":"叮叮动漫"},{"name":"NT动漫&&古月","host":"https://www.ntdm9.com/show/riben-----------.html","sourl":"https://www.ntdm9.com/search/-------------.html?wd=**&page=fypage","sy":"    标题1 = \".blocktitle,3&&Text\";\n    标题2 = \".blocktitle,4&&Text\";\n    \n\n    列表1 = \".blockcontent,2&&li:lt(8)\";\n    列表2 = \".blockcontent,3&&li:lt(8)\";\n    \n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original||data-src||src\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original||data-src||src\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"img&&alt\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \"span&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    var 标题链接 ={\n    \"日本\" : MY_URL,\n    \"中国\" : MY_URL.replace(/riben/, \"zhongguo\"),\n    \"欧美\" : MY_URL.replace(/riben/, \"omei\"),\n    };\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \".search-list--.search-tag&&.search-tag\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|留言|最新|排行))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/\\/vodtype\\/(\\d+)\\, //MY_URL.replace(MY_HOME, \"\").replace(/\\d+/, \"$1\"))\n\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \"body&&.cell\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \"a&&Text\"),\n                img: pd(li, \"img&&src\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".detail_imform_kv&&p:matches(类型)&&Text\";\n    导演 = \".detail_imform_kv&&p:matches(导演)&&Text\";\n    主演 = \".detail_imform_kv&&p:matches(主演|演员)&&Text\";\n    简介 = \".detail_imform_desc_pre&&Text\";\n\n    线路 = \"body&&.menu0\";\n    线路名 = \"li&&Text\";\n\n    列表 = \"body&&.movurl\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&title\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \"#recommend_block&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \"span&&Text\"),\n                img: pd(li, \"img&&src\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n    MY_HOME = getHome(input);\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]).url\n    require('http://hiker.nokia.press/hikerule/rulelist.json?id=5800')\n    var play = ParseS.maoss(\"https://danmu.yhdmjx.com/m3u8.php?url=\" + html, MY_URL, \"57A891D97E332A9D\")\n    if (/mgtv/.test(html)) {\n        play += ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\n    } else if (/bili/.test(html)) {\n        play += ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}'\n    }\n    return play + '#isVideo=true#'\n\n    }","so":"let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".blockcontent1&&.cell\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \"a&&Text\"),\n                img: pdfh(li, \"img&&src\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };","time":"2024-06-30 07:48:20","off":"1","gs":"JS","fbhost":"","simplifiedName":"NT动漫"},{"name":"555影视&&羽龑","host":"https://5cinv.net/vodshow/1-----------.html","sourl":"https://5cinv.net/vodsearch/-------------.html?wd=**","sy":"","fl":"","er":"","so":"","time":"2024-06-29 16:12:49","off":"1","gs":"HOST","fbhost":"","simplifiedName":"555影视"},{"name":"樱花动漫&&羽龑","host":"https://dingdingdm.com/v-show/1-----------.html","sourl":"https://dingdingdm.com/search/**-------------.html","sy":"*","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/1/, \"3\");\n    动漫_url = MY_URL.replace(/1/, \"2\");\n    综艺_url = MY_URL.replace(/1/, \"4\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.hl-nav\";\n    拼接小类 = \"\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表|留言|最新|排行))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&title\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/\\/vodtype\\/(\\d+)\\//, MY_URL.replace(MY_HOME, \"\").replace(/\\d+/, \"$1\"))\n\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".hl-vod-list&&li\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"hl-content-text&&Text\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".hl-text-muted&&p:matches(类型)&&Text\";\n    导演 = \".hl-text-muted&&p:matches(导演)&&Text\";\n    主演 = \".hl-text-muted&&p:matches(主演|演员)&&Text\";\n    简介 = \".hl-content-text&&Text\";\n\n    线路 = \".hl-plays-from&&a\";\n    线路名 = \"a&&Text\";\n\n    列表 = \"body&&.hl-plays-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".hl-plays-from&&li\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"h2&&Text\"),\n                desc: pdfh(li, \".hl-content-text&&Text\"),\n                img: pd(li, \".hl-lazy&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    //var 免嗅 = function(input) {\n        //let html = fetch(input);\n        //return video;\n    //}","so":"let html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \"body&&.hl-list-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \"\"),\n                img: pd(li, \"a&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return f;\n    };","time":"2024-06-29 15:19:10","off":"1","gs":"JS","fbhost":"","simplifiedName":"樱花动漫"},{"name":"剧圈圈免嗅js&&随风","host":"https://www.jqqzx.cc/vodshow/id/dianying.html","sourl":"https://www.jqqzx.cc/vodsearch**/page/fypage.html","sy":"    标题1 = \"h2:matches(热门)&&Text\";\n    标题2 = \"h2:matches(电影)&&Text\";\n    标题3 = \"h2:matches(剧集)&&Text\";\n    标题4 = \"h2:matches(动漫)&&Text\";\n    标题5 = \"h2:matches(综艺)&&Text\";\n    标题6 = \"h2,5&&Text\";\n\n    列表1 = \".module,0&&.scroll-box&&a:lt(4)\";\n    列表2 = \".module,1&&.tab-list&&a:lt(9)\";\n    列表3 = \".module,2&&.tab-list&&a:lt(9)\";\n    列表4 = \".module,3&&.tab-list&&a:lt(9)\";\n    列表5 = \".module,4&&.tab-list&&a:lt(9)\";\n    列表6 = \".module,5&&.tab-list&&a:lt(9)\";\n\n    html = fetch(MY_URL);\n\n    var 列表显示 = function(list) {\n        let l = [];\n        for (let j of list) {\n            let li = j;\n            let lists = [];\n            for (let i in li) {\n                let pic = pdfh(li[i], \"img&&data-original\");\n                let img = /.*url=|.*tu=/.test(pic) ? pic.replace(/.*url=|.*tu=/, \"\") : (/http|pic|jpg|png|jpeg|\\//.test(pic)) ? pd(li[i], \"img&&data-original\") : \"hiker://images/home_bg\";\n                let title = pdfh(li[i], \"a&&title\");\n                let url = pd(li[i], \"a&&href\");\n                let desc = pdfh(li[i], \".module-item-note&&Text\");\n                lists.push(title + '$' + desc + '$' + img + '$' + url);\n            }\n            l.push(lists);\n        };\n        return l;\n    };\n    \n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","fl":"    电影_url = MY_URL;\n    剧集_url = MY_URL.replace(/dianying/, \"juji\");\n    动漫_url = MY_URL.replace(/dianying/, \"dongman\");\n    综艺_url = MY_URL.replace(/dianying/, \"zongyi\");\n\n    let tr_url = getMyVar(\"Myurl.url\", MY_URL);\n\n    if (/\\/?([\\w\\d]+|)-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\d*---\\d*(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = tr_url.replace(/---\\.html/, page + '---.html').replace(/---(\\d+)\\.html/, page + '---$1.html').replace(/---\\//, page + '---/').replace(/---(\\d+)\\//, page + '---$1/');\n    } else\n    if (/((\\/(\\w*)show)?((\\/|-)[\\w\\d%])?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?(\\.html|\\/$)/.test(MY_URL)) {\n        true_url = /\\/year\\//.test(tr_url) ? tr_url.replace(/year\\/(\\d+).html/, 'page/' + page + '/year/$1.html').replace(/year\\/(\\d+)\\//, 'page/' + page + '/year/$1/') : /\\/$/.test(tr_url) ? tr_url + 'page/' + page + '/' : tr_url.replace(/\\.html/, '/page/' + page + '.html');\n    } else\n    if (/vod-show-id|vodtype\\//.test(MY_URL)) {\n        true_url = tr_url.replace(/vodtype\\/(\\d+)\\.html/, 'vodtype/$1/page/' + page + '.html').replace(/\\-id\\-(\\d+)/, \"-id-$1-page-\" + page);\n    }; //log(true_url);\n\n\n    大类 = \"body&&.swiper-wrapper\";\n    拼接小类 = \"body&&.scroll-box\";\n    分类子 = \"body&&a:not(:matches(重置|首页|app|APP|热榜|发布|周表))\";\n\n    大类名 = \"a&&Text\";\n    大类链 = \"a&&href\";\n    小类名 = \"a&&Text\";\n    小类链 = \"a&&href\";\n\n    var 大类链替换 = function(text) {\n        return text.replace(/type/g, \"vodshow/id\");\n    };\n\n    html = fetch(true_url);\n\n    var 显示列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let s = [];\n        for (let i in list) {\n            let li = list[i];\n            s.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        }\n        return s;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","er":"    类型 = \".module-info-tag&&Text\";\n    导演 = \".module-info-item:matches(导演)&&Text\";\n    主演 = \".module-info-item:matches(主演|演员)&&Text\";\n    简介 = \".module-info-introduction-content&&Text\";\n\n    线路 = \".module-tab-items-box&&.tab-item\";\n    线路名 = \"span&&Text\";\n\n    列表 = \"body&&.module-play-list\";\n    子列表 = \"body&&a\";\n\n    选集名 = \"a&&Text\";\n    选集链 = \"a&&href\";\n\n    //二级链接为MY_URL\n    html = fetch(MY_URL);\n\n    var 推荐 = function(html) {\n        let list = [];\n        let contui = pdfa(html, \".module-poster-items-base&&.module-item:lt(9)\");\n        for (let i in contui) {\n            let li = contui[i];\n            list.push({\n                title: pdfh(li, \"a&&title\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pd(li, \"img&&data-original\"),\n                url: pd(li, \"a&&href\")\n            })\n        };\n        return list;\n    };\n    \n    var 免嗅 = function(input) {\n        MY_HOME = getHome(input);\n        var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);\n    var url = html.url;\n  if (html.encrypt == '1') {\n    url = unescape(url);\n  } else if (html.encrypt == '2') {\n    url = unescape(base64Decode(url));\n  }\n    if (/m3u8/.test(url)) {\n         return url\n\t\t\t}else{\n  eval(request(MY_HOME + '/static/js/playerconfig.js'));\n  var jx = MacPlayerConfig.player_list[html.from].parse;\n  if (jx == '') {\n    jx = MacPlayerConfig.parse;\n  }\n  \n   \n    function _0xe2a440(_0x1fa139) {\n            var _0x1fa139 = _0x241571(_0x1fa139);\n            var _0x17bd14 = _0x1fa139.split(\"/\");\n            var _0xaefa58 = \"\";\n            for (var _0x2d9357 = 0; _0x2d9357 < _0x17bd14.length; _0x2d9357++) {\n                var _0x501b5f = _0x2d9357 + 1 == _0x17bd14.length ? \"\" : \"/\";\n                if (_0x2d9357 == 0 || _0x2d9357 == 1) {} else {\n                    _0xaefa58 += _0x17bd14[_0x2d9357] + _0x501b5f;\n                }\n            }\n            var _0x28094f = base64Decode(_0xaefa58);\n            var _0x72d7e1 = _0x47b765(JSON.parse(base64Decode(_0x17bd14[1])), JSON.parse(base64Decode(_0x17bd14[0])), _0x28094f);\n            return _0x72d7e1;\n        }\n\n        function _0xf22dc6(_0xe35cdf, _0x4d70fb) {\n            for (var _0x1ed04f = 0; _0x1ed04f < _0xe35cdf.length; _0x1ed04f++) {\n                if (_0x4d70fb === _0xe35cdf[_0x1ed04f]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        function _0x241571(_0x518f7a) {\n            key = md5(\"test\");\n            _0x518f7a = base64Decode(_0x518f7a);\n            len = key.length;\n            code = \"\";\n            for (i = 0; i < _0x518f7a.length; i++) {\n                k = i % len;\n                code += String.fromCharCode(_0x518f7a.charCodeAt(i) ^ key.charCodeAt(k));\n            }\n            return base64Decode(code);\n        }\n\n        function _0x47b765(_0x235332, _0x522cd7, _0x35e619) {\n            var _0x1dcddb = \"\";\n            var _0x4e1939 = _0x235332;\n            var _0x1aa6a7 = _0x522cd7;\n            var _0x3bad8c = _0x35e619.split(\"\");\n            for (var _0x1b6f7c = 0; _0x1b6f7c < _0x3bad8c.length; _0x1b6f7c++) {\n                var _0x854f64 = _0x3bad8c[_0x1b6f7c];\n                var _0x3797f4 = /^[a-zA-Z]+$/.test(_0x854f64);\n                if (_0x3797f4 && _0xf22dc6(_0x1aa6a7, _0x854f64)) {\n                    _0x1dcddb += _0x1aa6a7[_0x4e1939.indexOf(_0x854f64)];\n                } else {\n                    _0x1dcddb += _0x854f64;\n                }\n            }\n            return _0x1dcddb;\n        }\n    let vid='vid='+url\n\n    let u=JSON.parse(request(jx.replace('webcloud.php?vid=', 'api.php'), {\n         body: vid,\n         method: 'POST'\n         \n        })).data.url\n       log(u)\n       \n       let play=_0xe2a440(u)\n        log(play)\n        return play\n        \n        }\n       \n    }","so":"    //搜索链接为ssurl\n    html = fetch(ssurl);\n\n    var 搜索列表 = function(html) {\n        let list = pdfa(html, \".module-items&&.module-item\");\n        let f = [];\n        for (let i in list) {\n            let li = list[i];\n            f.push({\n                title: pdfh(li, \"img&&alt\"),\n                desc: pdfh(li, \".module-item-note&&Text\"),\n                img: pdfh(li, \"img&&data-original\"),\n                url: pdfh(li, \"a&&href\")\n            })\n        };\n        return f;\n    };\n\n    //var 免嗅 = function(input) {\n    //转嗅探\n    //return \"嗅探\";\n    //let html = fetch(input);\n    //}","time":"2024-06-28 20:22:45","off":"1","gs":"JS","fbhost":"","simplifiedName":"剧圈圈免嗅js"},{"name":"无敌影院&&猫","host":"http://www.hebeiyinke.com/vodshow/dianying-----------/","sourl":"http://www.hebeiyinke.com/vodsearch/**----------fypage---/","sy":"","fl":"","er":"","so":"","time":"2024-06-26 13:23:45","off":"1","gs":"HOST","fbhost":"","simplifiedName":"无敌影院"},{"name":"69美剧&&随风","host":"https://www.69mj.com/index.php/vod/show/id/1.html","sourl":"https://www.69mj.com/index.php/vod/search/page/fypage/wd/**.html","sy":"","fl":"","er":"","so":"","time":"2024-06-25 00:49:06","off":"1","gs":"HOST","fbhost":"","simplifiedName":"69美剧"},{"name":"酷云影视&&随风","host":"https://sc1080.top/index.php/vod/show/id/1.html","sourl":"https://sc1080.top/index.php/vod/search/page/fypage/wd/**.html","sy":"","fl":"","er":"","so":"","time":"2024-06-25 00:27:50","off":"1","gs":"HOST","fbhost":"","simplifiedName":"酷云影视"},{"name":"七星电影&&随风","host":"http://www.7xdy.com/dianyingpian/index.html","sourl":"","sy":"","fl":"","er":"","so":"","time":"2024-06-25 00:58:30","off":"1","gs":"HOST","fbhost":"","simplifiedName":"七星电影"},{"name":"03影院&&随风","host":"https://www.03yy.co/search.php?searchtype=5&order=time&tid=1","sourl":"https://www.03yy.co/search.php?page=fypage&searchword=**&searchtype=","sy":"","fl":"","er":"","so":"","time":"2024-06-25 00:52:21","off":"1","gs":"HOST","fbhost":"","simplifiedName":"03影院"}]$c@import=js:$.require('import?rule='+"风影")(input)